 
/*
 * HEADER TEST
 */

package org.tzi.use.parser.use; 



// Generated from USE.g4 by ANTLR 4.13.2


#include "USEListener.h"
#include "USEVisitor.h"

#include "USEParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct USEParserStaticData final {
  USEParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  USEParserStaticData(const USEParserStaticData&) = delete;
  USEParserStaticData(USEParserStaticData&&) = delete;
  USEParserStaticData& operator=(const USEParserStaticData&) = delete;
  USEParserStaticData& operator=(USEParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag useParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<USEParserStaticData> useParserStaticData = nullptr;

void useParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (useParserStaticData != nullptr) {
    return;
  }
#else
  assert(useParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<USEParserStaticData>(
    std::vector<std::string>{
      "model", "modelElement", "enumTypeDefinition", "classDefinition", 
      "associationClassDefinition", "attributeDefinition", "initDefinition", 
      "derivedDefinition", "operationDefinition", "associationDefinition", 
      "associationEnd", "multiplicity", "multiplicityRange", "multiplicitySpec", 
      "constraintDefinition", "invariant", "invariantClause", "prePost", 
      "prePostClause", "stateMachine", "stateDefinition", "transitionDefinition", 
      "expressionOnly", "expression", "lambdaExpression", "letExpression", 
      "logicalExpression", "paramList", "idList", "variableDeclaration", 
      "equalityExpression", "relationalExpression", "additiveExpression", 
      "factorExpression", "unaryExpression", "postfixExpression", "primaryExpression", 
      "objectReference", "propertyCall", "queryExpression", "iterateExpression", 
      "operationExpression", "inStateExpression", "typeExpression", "elemVarsDeclaration", 
      "variableInitialization", "conditionalExpression", "literal", "collectionLiteral", 
      "collectionItem", "emptyCollectionLiteral", "undefinedLiteral", "tupleLiteral", 
      "tupleItem", "type", "typeOnly", "simpleType", "collectionType", "tupleType", 
      "tuplePart"
    },
    std::vector<std::string>{
      "", "'model'", "'constraints'", "'enum'", "'class'", "'attributes'", 
      "'operations'", "'statemachines'", "'end'", "'associationclass'", 
      "'between'", "'aggregation'", "'composition'", "'init'", "'derive'", 
      "'derived'", "'association'", "'role'", "'ordered'", "'subsets'", 
      "'union'", "'redefines'", "'qualifier'", "'context'", "'inv'", "'existential'", 
      "'pre'", "'post'", "'psm'", "'states'", "'transitions'", "'lambda'", 
      "'in'", "'let'", "'and'", "'&'", "'or'", "'xor'", "'=>'", "'implies'", 
      "'div'", "'not'", "'allInstances'", "'byUseId'", "'select'", "'reject'", 
      "'collect'", "'exists'", "'forAll'", "'isUnique'", "'sortedBy'", "'iterate'", 
      "'oclInState'", "'oclAsType'", "'oclIsKindOf'", "'oclIsTypeOf'", "'selectByType'", 
      "'selectByKind'", "'if'", "'then'", "'else'", "'endif'", "'true'", 
      "'false'", "'Set'", "'Sequence'", "'Bag'", "'OrderedSet'", "'oclEmpty'", 
      "'oclUndefined'", "'Undefined'", "'null'", "'Tuple'", "'Collection'", 
      "", "", "", "'->'", "'@'", "'|'", "':'", "'::'", "':='", "','", "'.'", 
      "'..'", "'='", "'>'", "'>='", "'#'", "'{'", "'['", "'<'", "'<='", 
      "'('", "'-'", "'<>'", "'+'", "'}'", "']'", "')'", "';'", "'/'", "'*'", 
      "'abstract'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "WS", "SL_COMMENT", "ML_COMMENT", "ARROW", 
      "AT", "BAR", "COLON", "COLON_COLON", "COLON_EQUAL", "COMMA", "DOT", 
      "DOTDOT", "EQUAL", "GREATER", "GREATER_EQUAL", "HASH", "LBRACE", "LBRACK", 
      "LESS", "LESS_EQUAL", "LPAREN", "MINUS", "NOT_EQUAL", "PLUS", "RBRACE", 
      "RBRACK", "RPAREN", "SEMI", "SLASH", "STAR", "ABSTRACT", "INT", "REAL", 
      "SOIL_OPERATION", "STRING", "NON_OCL_STRING", "ID"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,110,1061,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,0,5,0,124,8,0,10,0,12,0,
  	127,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,5,1,137,8,1,10,1,12,1,140,9,1,
  	3,1,142,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,150,8,2,1,3,3,3,153,8,3,1,3,1,
  	3,1,3,1,3,3,3,159,8,3,1,3,1,3,5,3,163,8,3,10,3,12,3,166,9,3,3,3,168,8,
  	3,1,3,1,3,5,3,172,8,3,10,3,12,3,175,9,3,3,3,177,8,3,1,3,1,3,5,3,181,8,
  	3,10,3,12,3,184,9,3,3,3,186,8,3,1,3,1,3,5,3,190,8,3,10,3,12,3,193,9,3,
  	3,3,195,8,3,1,3,1,3,1,4,3,4,200,8,4,1,4,1,4,1,4,1,4,3,4,206,8,4,1,4,1,
  	4,1,4,4,4,211,8,4,11,4,12,4,212,3,4,215,8,4,1,4,1,4,5,4,219,8,4,10,4,
  	12,4,222,9,4,3,4,224,8,4,1,4,1,4,5,4,228,8,4,10,4,12,4,231,9,4,3,4,233,
  	8,4,1,4,1,4,5,4,237,8,4,10,4,12,4,240,9,4,3,4,242,8,4,1,4,1,4,5,4,246,
  	8,4,10,4,12,4,249,9,4,3,4,251,8,4,1,4,3,4,254,8,4,1,4,1,4,1,5,1,5,1,5,
  	1,5,1,5,3,5,263,8,5,1,5,3,5,266,8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
  	8,1,8,1,8,1,8,3,8,280,8,8,1,8,1,8,1,8,3,8,285,8,8,1,8,5,8,288,8,8,10,
  	8,12,8,291,9,8,1,8,3,8,294,8,8,1,9,1,9,1,9,1,9,1,9,4,9,301,8,9,11,9,12,
  	9,302,1,9,1,9,1,9,1,9,1,9,1,9,1,9,4,9,312,8,9,11,9,12,9,313,1,9,1,9,1,
  	9,1,9,1,9,1,9,1,9,4,9,323,8,9,11,9,12,9,324,1,9,1,9,3,9,329,8,9,1,10,
  	1,10,1,10,1,10,1,10,1,10,3,10,337,8,10,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,3,10,350,8,10,1,10,1,10,1,10,1,10,5,10,356,8,
  	10,10,10,12,10,359,9,10,1,10,3,10,362,8,10,1,11,1,11,1,11,5,11,367,8,
  	11,10,11,12,11,370,9,11,1,12,1,12,1,12,3,12,375,8,12,1,13,1,13,1,14,1,
  	14,3,14,381,8,14,1,15,1,15,1,15,1,15,5,15,387,8,15,10,15,12,15,390,9,
  	15,1,15,3,15,393,8,15,1,15,1,15,5,15,397,8,15,10,15,12,15,400,9,15,1,
  	16,1,16,3,16,404,8,16,1,16,1,16,1,16,1,16,1,16,3,16,411,8,16,1,16,1,16,
  	3,16,415,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,424,8,17,1,17,4,
  	17,427,8,17,11,17,12,17,428,1,18,1,18,3,18,433,8,18,1,18,1,18,1,18,1,
  	18,3,18,439,8,18,1,18,1,18,3,18,443,8,18,1,19,1,19,1,19,1,19,4,19,449,
  	8,19,11,19,12,19,450,1,19,1,19,4,19,455,8,19,11,19,12,19,456,1,19,1,19,
  	1,20,1,20,1,20,3,20,464,8,20,1,20,1,20,1,20,1,20,3,20,470,8,20,1,21,1,
  	21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,480,8,21,1,21,1,21,1,21,3,21,485,
  	8,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,493,8,21,1,21,3,21,496,8,21,1,
  	22,1,22,1,22,1,23,1,23,1,23,1,23,3,23,505,8,23,1,24,1,24,1,24,1,24,1,
  	24,1,24,1,24,1,25,1,25,1,25,1,25,3,25,518,8,25,1,25,1,25,1,25,1,25,1,
  	25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
  	26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,546,8,26,10,26,12,26,549,9,
  	26,1,27,1,27,1,27,1,27,5,27,555,8,27,10,27,12,27,558,9,27,3,27,560,8,
  	27,1,27,1,27,1,28,1,28,1,28,5,28,567,8,28,10,28,12,28,570,9,28,1,29,1,
  	29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,5,30,585,8,
  	30,10,30,12,30,588,9,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,5,31,605,8,31,10,31,12,31,608,9,31,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,619,8,32,10,32,12,32,622,
  	9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,633,8,33,10,33,
  	12,33,636,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,645,8,34,1,35,
  	1,35,1,35,1,35,4,35,651,8,35,11,35,12,35,652,3,35,655,8,35,1,36,1,36,
  	1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,669,8,36,1,36,
  	1,36,3,36,673,8,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,683,8,
  	36,3,36,685,8,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,3,38,695,8,38,
  	1,39,1,39,1,39,1,39,1,39,3,39,702,8,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,3,39,712,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
  	722,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,732,8,39,1,39,1,
  	39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,742,8,39,1,39,1,39,1,39,1,39,1,
  	39,1,39,1,39,1,39,3,39,752,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
  	39,3,39,762,8,39,1,39,1,39,1,39,3,39,767,8,39,1,40,1,40,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,5,41,783,8,41,10,41,12,41,
  	786,9,41,1,41,1,41,1,41,1,41,1,41,5,41,793,8,41,10,41,12,41,796,9,41,
  	1,41,1,41,3,41,800,8,41,3,41,802,8,41,1,41,1,41,3,41,806,8,41,1,41,1,
  	41,1,41,1,41,5,41,812,8,41,10,41,12,41,815,9,41,3,41,817,8,41,1,41,3,
  	41,820,8,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	43,1,43,1,43,1,43,1,43,3,43,852,8,43,1,44,1,44,1,44,3,44,857,8,44,1,44,
  	1,44,1,44,1,44,3,44,863,8,44,5,44,865,8,44,10,44,12,44,868,9,44,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,
  	1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
  	3,47,899,8,47,1,48,1,48,1,48,1,48,1,48,5,48,906,8,48,10,48,12,48,909,
  	9,48,3,48,911,8,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,919,8,48,10,48,
  	12,48,922,9,48,3,48,924,8,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,932,8,
  	48,10,48,12,48,935,9,48,3,48,937,8,48,1,48,1,48,1,48,1,48,1,48,1,48,5,
  	48,945,8,48,10,48,12,48,948,9,48,3,48,950,8,48,1,48,3,48,953,8,48,1,49,
  	1,49,1,49,3,49,958,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
  	3,50,969,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
  	1,51,3,51,983,8,51,1,52,1,52,1,52,1,52,1,52,5,52,990,8,52,10,52,12,52,
  	993,9,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,
  	1006,8,53,1,54,1,54,1,54,3,54,1011,8,54,1,55,1,55,1,55,1,56,1,56,1,57,
  	1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
  	1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1043,8,57,1,58,
  	1,58,1,58,1,58,1,58,5,58,1050,8,58,10,58,12,58,1053,9,58,1,58,1,58,1,
  	59,1,59,1,59,1,59,1,59,0,5,52,60,62,64,66,60,0,2,4,6,8,10,12,14,16,18,
  	20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
  	66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
  	110,112,114,116,118,0,6,1,0,11,12,2,0,80,80,86,86,1,0,14,15,2,0,103,103,
  	105,105,2,0,40,40,102,102,2,0,77,77,84,84,1178,0,120,1,0,0,0,2,141,1,
  	0,0,0,4,143,1,0,0,0,6,152,1,0,0,0,8,199,1,0,0,0,10,257,1,0,0,0,12,267,
  	1,0,0,0,14,271,1,0,0,0,16,275,1,0,0,0,18,328,1,0,0,0,20,330,1,0,0,0,22,
  	363,1,0,0,0,24,371,1,0,0,0,26,376,1,0,0,0,28,380,1,0,0,0,30,382,1,0,0,
  	0,32,414,1,0,0,0,34,416,1,0,0,0,36,442,1,0,0,0,38,444,1,0,0,0,40,460,
  	1,0,0,0,42,471,1,0,0,0,44,497,1,0,0,0,46,504,1,0,0,0,48,506,1,0,0,0,50,
  	513,1,0,0,0,52,524,1,0,0,0,54,550,1,0,0,0,56,563,1,0,0,0,58,571,1,0,0,
  	0,60,575,1,0,0,0,62,589,1,0,0,0,64,609,1,0,0,0,66,623,1,0,0,0,68,644,
  	1,0,0,0,70,654,1,0,0,0,72,684,1,0,0,0,74,686,1,0,0,0,76,694,1,0,0,0,78,
  	766,1,0,0,0,80,768,1,0,0,0,82,777,1,0,0,0,84,821,1,0,0,0,86,851,1,0,0,
  	0,88,853,1,0,0,0,90,869,1,0,0,0,92,875,1,0,0,0,94,898,1,0,0,0,96,952,
  	1,0,0,0,98,954,1,0,0,0,100,968,1,0,0,0,102,982,1,0,0,0,104,984,1,0,0,
  	0,106,1005,1,0,0,0,108,1010,1,0,0,0,110,1012,1,0,0,0,112,1015,1,0,0,0,
  	114,1042,1,0,0,0,116,1044,1,0,0,0,118,1056,1,0,0,0,120,121,5,1,0,0,121,
  	125,5,110,0,0,122,124,3,2,1,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,
  	1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,129,5,0,0,
  	1,129,1,1,0,0,0,130,142,3,4,2,0,131,142,3,6,3,0,132,142,3,18,9,0,133,
  	142,3,8,4,0,134,138,5,2,0,0,135,137,3,28,14,0,136,135,1,0,0,0,137,140,
  	1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,
  	0,141,130,1,0,0,0,141,131,1,0,0,0,141,132,1,0,0,0,141,133,1,0,0,0,141,
  	134,1,0,0,0,142,3,1,0,0,0,143,144,5,3,0,0,144,145,5,110,0,0,145,146,5,
  	90,0,0,146,147,3,56,28,0,147,149,5,98,0,0,148,150,5,101,0,0,149,148,1,
  	0,0,0,149,150,1,0,0,0,150,5,1,0,0,0,151,153,5,104,0,0,152,151,1,0,0,0,
  	152,153,1,0,0,0,153,154,1,0,0,0,154,155,5,4,0,0,155,158,5,110,0,0,156,
  	157,5,92,0,0,157,159,3,56,28,0,158,156,1,0,0,0,158,159,1,0,0,0,159,167,
  	1,0,0,0,160,164,5,5,0,0,161,163,3,10,5,0,162,161,1,0,0,0,163,166,1,0,
  	0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,168,1,0,0,0,166,164,1,0,0,0,167,
  	160,1,0,0,0,167,168,1,0,0,0,168,176,1,0,0,0,169,173,5,6,0,0,170,172,3,
  	16,8,0,171,170,1,0,0,0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,
  	0,174,177,1,0,0,0,175,173,1,0,0,0,176,169,1,0,0,0,176,177,1,0,0,0,177,
  	185,1,0,0,0,178,182,5,2,0,0,179,181,3,32,16,0,180,179,1,0,0,0,181,184,
  	1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,
  	0,185,178,1,0,0,0,185,186,1,0,0,0,186,194,1,0,0,0,187,191,5,7,0,0,188,
  	190,3,38,19,0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,
  	1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,194,187,1,0,0,0,194,195,1,0,0,
  	0,195,196,1,0,0,0,196,197,5,8,0,0,197,7,1,0,0,0,198,200,5,104,0,0,199,
  	198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,5,9,0,0,202,205,5,
  	110,0,0,203,204,5,92,0,0,204,206,3,56,28,0,205,203,1,0,0,0,205,206,1,
  	0,0,0,206,214,1,0,0,0,207,208,5,10,0,0,208,210,3,20,10,0,209,211,3,20,
  	10,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,
  	213,215,1,0,0,0,214,207,1,0,0,0,214,215,1,0,0,0,215,223,1,0,0,0,216,220,
  	5,5,0,0,217,219,3,10,5,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,0,
  	0,0,220,221,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,223,216,1,0,0,0,223,
  	224,1,0,0,0,224,232,1,0,0,0,225,229,5,6,0,0,226,228,3,16,8,0,227,226,
  	1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,233,1,0,0,
  	0,231,229,1,0,0,0,232,225,1,0,0,0,232,233,1,0,0,0,233,241,1,0,0,0,234,
  	238,5,2,0,0,235,237,3,32,16,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,
  	1,0,0,0,238,239,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,241,234,1,0,0,
  	0,241,242,1,0,0,0,242,250,1,0,0,0,243,247,5,7,0,0,244,246,3,38,19,0,245,
  	244,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,251,1,
  	0,0,0,249,247,1,0,0,0,250,243,1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,
  	252,254,7,0,0,0,253,252,1,0,0,0,253,254,1,0,0,0,254,255,1,0,0,0,255,256,
  	5,8,0,0,256,9,1,0,0,0,257,258,5,110,0,0,258,259,5,80,0,0,259,262,3,108,
  	54,0,260,263,3,12,6,0,261,263,3,14,7,0,262,260,1,0,0,0,262,261,1,0,0,
  	0,262,263,1,0,0,0,263,265,1,0,0,0,264,266,5,101,0,0,265,264,1,0,0,0,265,
  	266,1,0,0,0,266,11,1,0,0,0,267,268,5,13,0,0,268,269,7,1,0,0,269,270,3,
  	46,23,0,270,13,1,0,0,0,271,272,7,2,0,0,272,273,7,1,0,0,273,274,3,46,23,
  	0,274,15,1,0,0,0,275,276,5,110,0,0,276,279,3,54,27,0,277,278,5,80,0,0,
  	278,280,3,108,54,0,279,277,1,0,0,0,279,280,1,0,0,0,280,284,1,0,0,0,281,
  	282,5,86,0,0,282,285,3,46,23,0,283,285,5,107,0,0,284,281,1,0,0,0,284,
  	283,1,0,0,0,284,285,1,0,0,0,285,289,1,0,0,0,286,288,3,36,18,0,287,286,
  	1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,293,1,0,0,
  	0,291,289,1,0,0,0,292,294,5,101,0,0,293,292,1,0,0,0,293,294,1,0,0,0,294,
  	17,1,0,0,0,295,296,5,16,0,0,296,297,5,110,0,0,297,298,5,10,0,0,298,300,
  	3,20,10,0,299,301,3,20,10,0,300,299,1,0,0,0,301,302,1,0,0,0,302,300,1,
  	0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,305,5,8,0,0,305,329,1,0,0,0,
  	306,307,5,11,0,0,307,308,5,110,0,0,308,309,5,10,0,0,309,311,3,20,10,0,
  	310,312,3,20,10,0,311,310,1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,
  	314,1,0,0,0,314,315,1,0,0,0,315,316,5,8,0,0,316,329,1,0,0,0,317,318,5,
  	12,0,0,318,319,5,110,0,0,319,320,5,10,0,0,320,322,3,20,10,0,321,323,3,
  	20,10,0,322,321,1,0,0,0,323,324,1,0,0,0,324,322,1,0,0,0,324,325,1,0,0,
  	0,325,326,1,0,0,0,326,327,5,8,0,0,327,329,1,0,0,0,328,295,1,0,0,0,328,
  	306,1,0,0,0,328,317,1,0,0,0,329,19,1,0,0,0,330,331,5,110,0,0,331,332,
  	5,91,0,0,332,333,3,22,11,0,333,336,5,99,0,0,334,335,5,17,0,0,335,337,
  	5,110,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,357,1,0,0,0,338,356,5,18,
  	0,0,339,340,5,19,0,0,340,356,5,110,0,0,341,356,5,20,0,0,342,343,5,21,
  	0,0,343,356,5,110,0,0,344,349,7,2,0,0,345,346,5,94,0,0,346,347,3,88,44,
  	0,347,348,5,100,0,0,348,350,1,0,0,0,349,345,1,0,0,0,349,350,1,0,0,0,350,
  	351,1,0,0,0,351,352,5,86,0,0,352,356,3,46,23,0,353,354,5,22,0,0,354,356,
  	3,54,27,0,355,338,1,0,0,0,355,339,1,0,0,0,355,341,1,0,0,0,355,342,1,0,
  	0,0,355,344,1,0,0,0,355,353,1,0,0,0,356,359,1,0,0,0,357,355,1,0,0,0,357,
  	358,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,360,362,5,101,0,0,361,360,
  	1,0,0,0,361,362,1,0,0,0,362,21,1,0,0,0,363,368,3,24,12,0,364,365,5,83,
  	0,0,365,367,3,24,12,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,
  	368,369,1,0,0,0,369,23,1,0,0,0,370,368,1,0,0,0,371,374,3,26,13,0,372,
  	373,5,85,0,0,373,375,3,26,13,0,374,372,1,0,0,0,374,375,1,0,0,0,375,25,
  	1,0,0,0,376,377,7,3,0,0,377,27,1,0,0,0,378,381,3,30,15,0,379,381,3,34,
  	17,0,380,378,1,0,0,0,380,379,1,0,0,0,381,29,1,0,0,0,382,392,5,23,0,0,
  	383,388,5,110,0,0,384,385,5,83,0,0,385,387,5,110,0,0,386,384,1,0,0,0,
  	387,390,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,391,1,0,0,0,390,388,
  	1,0,0,0,391,393,5,80,0,0,392,383,1,0,0,0,392,393,1,0,0,0,393,394,1,0,
  	0,0,394,398,3,112,56,0,395,397,3,32,16,0,396,395,1,0,0,0,397,400,1,0,
  	0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,31,1,0,0,0,400,398,1,0,0,0,401,
  	403,5,24,0,0,402,404,5,110,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,405,
  	1,0,0,0,405,406,5,80,0,0,406,415,3,46,23,0,407,408,5,25,0,0,408,410,5,
  	24,0,0,409,411,5,110,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,
  	0,0,412,413,5,80,0,0,413,415,3,46,23,0,414,401,1,0,0,0,414,407,1,0,0,
  	0,415,33,1,0,0,0,416,417,5,23,0,0,417,418,5,110,0,0,418,419,5,81,0,0,
  	419,420,5,110,0,0,420,423,3,54,27,0,421,422,5,80,0,0,422,424,3,108,54,
  	0,423,421,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,427,3,36,18,0,426,
  	425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,35,1,
  	0,0,0,430,432,5,26,0,0,431,433,5,110,0,0,432,431,1,0,0,0,432,433,1,0,
  	0,0,433,434,1,0,0,0,434,435,5,80,0,0,435,443,3,46,23,0,436,438,5,27,0,
  	0,437,439,5,110,0,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,1,0,0,0,440,
  	441,5,80,0,0,441,443,3,46,23,0,442,430,1,0,0,0,442,436,1,0,0,0,443,37,
  	1,0,0,0,444,445,5,28,0,0,445,446,5,110,0,0,446,448,5,29,0,0,447,449,3,
  	40,20,0,448,447,1,0,0,0,449,450,1,0,0,0,450,448,1,0,0,0,450,451,1,0,0,
  	0,451,452,1,0,0,0,452,454,5,30,0,0,453,455,3,42,21,0,454,453,1,0,0,0,
  	455,456,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,459,
  	5,8,0,0,459,39,1,0,0,0,460,463,5,110,0,0,461,462,5,80,0,0,462,464,5,110,
  	0,0,463,461,1,0,0,0,463,464,1,0,0,0,464,469,1,0,0,0,465,466,5,91,0,0,
  	466,467,3,46,23,0,467,468,5,99,0,0,468,470,1,0,0,0,469,465,1,0,0,0,469,
  	470,1,0,0,0,470,41,1,0,0,0,471,472,5,110,0,0,472,473,5,77,0,0,473,495,
  	5,110,0,0,474,479,5,90,0,0,475,476,5,91,0,0,476,477,3,46,23,0,477,478,
  	5,99,0,0,478,480,1,0,0,0,479,475,1,0,0,0,479,480,1,0,0,0,480,481,1,0,
  	0,0,481,482,5,110,0,0,482,484,5,94,0,0,483,485,3,54,27,0,484,483,1,0,
  	0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,487,5,100,0,0,487,492,1,0,0,0,
  	488,489,5,91,0,0,489,490,3,46,23,0,490,491,5,99,0,0,491,493,1,0,0,0,492,
  	488,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,496,5,98,0,0,495,474,
  	1,0,0,0,495,496,1,0,0,0,496,43,1,0,0,0,497,498,3,46,23,0,498,499,5,0,
  	0,1,499,45,1,0,0,0,500,505,3,52,26,0,501,505,3,92,46,0,502,505,3,48,24,
  	0,503,505,3,50,25,0,504,500,1,0,0,0,504,501,1,0,0,0,504,502,1,0,0,0,504,
  	503,1,0,0,0,505,47,1,0,0,0,506,507,5,31,0,0,507,508,5,110,0,0,508,509,
  	5,80,0,0,509,510,3,108,54,0,510,511,5,32,0,0,511,512,3,46,23,0,512,49,
  	1,0,0,0,513,514,5,33,0,0,514,517,5,110,0,0,515,516,5,80,0,0,516,518,3,
  	108,54,0,517,515,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,5,86,
  	0,0,520,521,3,46,23,0,521,522,5,32,0,0,522,523,3,46,23,0,523,51,1,0,0,
  	0,524,525,6,26,-1,0,525,526,3,60,30,0,526,547,1,0,0,0,527,528,10,7,0,
  	0,528,529,5,34,0,0,529,546,3,52,26,8,530,531,10,6,0,0,531,532,5,35,0,
  	0,532,546,3,52,26,7,533,534,10,5,0,0,534,535,5,36,0,0,535,546,3,52,26,
  	6,536,537,10,4,0,0,537,538,5,37,0,0,538,546,3,52,26,5,539,540,10,3,0,
  	0,540,541,5,38,0,0,541,546,3,52,26,4,542,543,10,2,0,0,543,544,5,39,0,
  	0,544,546,3,52,26,3,545,527,1,0,0,0,545,530,1,0,0,0,545,533,1,0,0,0,545,
  	536,1,0,0,0,545,539,1,0,0,0,545,542,1,0,0,0,546,549,1,0,0,0,547,545,1,
  	0,0,0,547,548,1,0,0,0,548,53,1,0,0,0,549,547,1,0,0,0,550,559,5,94,0,0,
  	551,556,3,58,29,0,552,553,5,83,0,0,553,555,3,58,29,0,554,552,1,0,0,0,
  	555,558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,560,1,0,0,0,558,556,
  	1,0,0,0,559,551,1,0,0,0,559,560,1,0,0,0,560,561,1,0,0,0,561,562,5,100,
  	0,0,562,55,1,0,0,0,563,568,5,110,0,0,564,565,5,83,0,0,565,567,5,110,0,
  	0,566,564,1,0,0,0,567,570,1,0,0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,
  	57,1,0,0,0,570,568,1,0,0,0,571,572,5,110,0,0,572,573,5,80,0,0,573,574,
  	3,108,54,0,574,59,1,0,0,0,575,576,6,30,-1,0,576,577,3,62,31,0,577,586,
  	1,0,0,0,578,579,10,2,0,0,579,580,5,86,0,0,580,585,3,62,31,0,581,582,10,
  	1,0,0,582,583,5,96,0,0,583,585,3,62,31,0,584,578,1,0,0,0,584,581,1,0,
  	0,0,585,588,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,61,1,0,0,0,588,
  	586,1,0,0,0,589,590,6,31,-1,0,590,591,3,64,32,0,591,606,1,0,0,0,592,593,
  	10,4,0,0,593,594,5,92,0,0,594,605,3,64,32,0,595,596,10,3,0,0,596,597,
  	5,87,0,0,597,605,3,64,32,0,598,599,10,2,0,0,599,600,5,93,0,0,600,605,
  	3,64,32,0,601,602,10,1,0,0,602,603,5,88,0,0,603,605,3,64,32,0,604,592,
  	1,0,0,0,604,595,1,0,0,0,604,598,1,0,0,0,604,601,1,0,0,0,605,608,1,0,0,
  	0,606,604,1,0,0,0,606,607,1,0,0,0,607,63,1,0,0,0,608,606,1,0,0,0,609,
  	610,6,32,-1,0,610,611,3,66,33,0,611,620,1,0,0,0,612,613,10,2,0,0,613,
  	614,5,97,0,0,614,619,3,66,33,0,615,616,10,1,0,0,616,617,5,95,0,0,617,
  	619,3,66,33,0,618,612,1,0,0,0,618,615,1,0,0,0,619,622,1,0,0,0,620,618,
  	1,0,0,0,620,621,1,0,0,0,621,65,1,0,0,0,622,620,1,0,0,0,623,624,6,33,-1,
  	0,624,625,3,68,34,0,625,634,1,0,0,0,626,627,10,2,0,0,627,628,5,103,0,
  	0,628,633,3,68,34,0,629,630,10,1,0,0,630,631,7,4,0,0,631,633,3,68,34,
  	0,632,626,1,0,0,0,632,629,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,634,
  	635,1,0,0,0,635,67,1,0,0,0,636,634,1,0,0,0,637,638,5,41,0,0,638,645,3,
  	68,34,0,639,640,5,95,0,0,640,645,3,68,34,0,641,642,5,97,0,0,642,645,3,
  	68,34,0,643,645,3,70,35,0,644,637,1,0,0,0,644,639,1,0,0,0,644,641,1,0,
  	0,0,644,643,1,0,0,0,645,69,1,0,0,0,646,655,3,72,36,0,647,650,3,72,36,
  	0,648,649,7,5,0,0,649,651,3,76,38,0,650,648,1,0,0,0,651,652,1,0,0,0,652,
  	650,1,0,0,0,652,653,1,0,0,0,653,655,1,0,0,0,654,646,1,0,0,0,654,647,1,
  	0,0,0,655,71,1,0,0,0,656,685,3,94,47,0,657,685,3,74,37,0,658,685,3,76,
  	38,0,659,660,5,94,0,0,660,661,3,46,23,0,661,662,5,100,0,0,662,685,1,0,
  	0,0,663,664,5,110,0,0,664,665,5,84,0,0,665,668,5,42,0,0,666,667,5,78,
  	0,0,667,669,5,26,0,0,668,666,1,0,0,0,668,669,1,0,0,0,669,672,1,0,0,0,
  	670,671,5,94,0,0,671,673,5,100,0,0,672,670,1,0,0,0,672,673,1,0,0,0,673,
  	685,1,0,0,0,674,675,5,110,0,0,675,676,5,84,0,0,676,677,5,43,0,0,677,678,
  	5,94,0,0,678,679,3,46,23,0,679,682,5,100,0,0,680,681,5,78,0,0,681,683,
  	5,26,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,656,1,0,
  	0,0,684,657,1,0,0,0,684,658,1,0,0,0,684,659,1,0,0,0,684,663,1,0,0,0,684,
  	674,1,0,0,0,685,73,1,0,0,0,686,687,5,78,0,0,687,688,5,110,0,0,688,75,
  	1,0,0,0,689,695,3,78,39,0,690,695,3,80,40,0,691,695,3,82,41,0,692,695,
  	3,86,43,0,693,695,3,84,42,0,694,689,1,0,0,0,694,690,1,0,0,0,694,691,1,
  	0,0,0,694,692,1,0,0,0,694,693,1,0,0,0,695,77,1,0,0,0,696,697,5,44,0,0,
  	697,701,5,94,0,0,698,699,3,88,44,0,699,700,5,79,0,0,700,702,1,0,0,0,701,
  	698,1,0,0,0,701,702,1,0,0,0,702,703,1,0,0,0,703,704,3,46,23,0,704,705,
  	5,100,0,0,705,767,1,0,0,0,706,707,5,45,0,0,707,711,5,94,0,0,708,709,3,
  	88,44,0,709,710,5,79,0,0,710,712,1,0,0,0,711,708,1,0,0,0,711,712,1,0,
  	0,0,712,713,1,0,0,0,713,714,3,46,23,0,714,715,5,100,0,0,715,767,1,0,0,
  	0,716,717,5,46,0,0,717,721,5,94,0,0,718,719,3,88,44,0,719,720,5,79,0,
  	0,720,722,1,0,0,0,721,718,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,
  	724,3,46,23,0,724,725,5,100,0,0,725,767,1,0,0,0,726,727,5,47,0,0,727,
  	731,5,94,0,0,728,729,3,88,44,0,729,730,5,79,0,0,730,732,1,0,0,0,731,728,
  	1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,734,3,46,23,0,734,735,5,100,
  	0,0,735,767,1,0,0,0,736,737,5,48,0,0,737,741,5,94,0,0,738,739,3,88,44,
  	0,739,740,5,79,0,0,740,742,1,0,0,0,741,738,1,0,0,0,741,742,1,0,0,0,742,
  	743,1,0,0,0,743,744,3,46,23,0,744,745,5,100,0,0,745,767,1,0,0,0,746,747,
  	5,49,0,0,747,751,5,94,0,0,748,749,3,88,44,0,749,750,5,79,0,0,750,752,
  	1,0,0,0,751,748,1,0,0,0,751,752,1,0,0,0,752,753,1,0,0,0,753,754,3,46,
  	23,0,754,755,5,100,0,0,755,767,1,0,0,0,756,757,5,50,0,0,757,761,5,94,
  	0,0,758,759,3,88,44,0,759,760,5,79,0,0,760,762,1,0,0,0,761,758,1,0,0,
  	0,761,762,1,0,0,0,762,763,1,0,0,0,763,764,3,46,23,0,764,765,5,100,0,0,
  	765,767,1,0,0,0,766,696,1,0,0,0,766,706,1,0,0,0,766,716,1,0,0,0,766,726,
  	1,0,0,0,766,736,1,0,0,0,766,746,1,0,0,0,766,756,1,0,0,0,767,79,1,0,0,
  	0,768,769,5,51,0,0,769,770,5,94,0,0,770,771,3,88,44,0,771,772,5,101,0,
  	0,772,773,3,90,45,0,773,774,5,79,0,0,774,775,3,46,23,0,775,776,5,100,
  	0,0,776,81,1,0,0,0,777,801,5,110,0,0,778,779,5,91,0,0,779,784,3,46,23,
  	0,780,781,5,83,0,0,781,783,3,46,23,0,782,780,1,0,0,0,783,786,1,0,0,0,
  	784,782,1,0,0,0,784,785,1,0,0,0,785,787,1,0,0,0,786,784,1,0,0,0,787,799,
  	5,99,0,0,788,789,5,91,0,0,789,794,3,46,23,0,790,791,5,83,0,0,791,793,
  	3,46,23,0,792,790,1,0,0,0,793,796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,
  	0,0,795,797,1,0,0,0,796,794,1,0,0,0,797,798,5,99,0,0,798,800,1,0,0,0,
  	799,788,1,0,0,0,799,800,1,0,0,0,800,802,1,0,0,0,801,778,1,0,0,0,801,802,
  	1,0,0,0,802,805,1,0,0,0,803,804,5,78,0,0,804,806,5,26,0,0,805,803,1,0,
  	0,0,805,806,1,0,0,0,806,819,1,0,0,0,807,816,5,94,0,0,808,813,3,46,23,
  	0,809,810,5,83,0,0,810,812,3,46,23,0,811,809,1,0,0,0,812,815,1,0,0,0,
  	813,811,1,0,0,0,813,814,1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,816,808,
  	1,0,0,0,816,817,1,0,0,0,817,818,1,0,0,0,818,820,5,100,0,0,819,807,1,0,
  	0,0,819,820,1,0,0,0,820,83,1,0,0,0,821,822,5,52,0,0,822,823,5,94,0,0,
  	823,824,5,110,0,0,824,825,5,100,0,0,825,85,1,0,0,0,826,827,5,53,0,0,827,
  	828,5,94,0,0,828,829,3,108,54,0,829,830,5,100,0,0,830,852,1,0,0,0,831,
  	832,5,54,0,0,832,833,5,94,0,0,833,834,3,108,54,0,834,835,5,100,0,0,835,
  	852,1,0,0,0,836,837,5,55,0,0,837,838,5,94,0,0,838,839,3,108,54,0,839,
  	840,5,100,0,0,840,852,1,0,0,0,841,842,5,56,0,0,842,843,5,94,0,0,843,844,
  	3,108,54,0,844,845,5,100,0,0,845,852,1,0,0,0,846,847,5,57,0,0,847,848,
  	5,94,0,0,848,849,3,108,54,0,849,850,5,100,0,0,850,852,1,0,0,0,851,826,
  	1,0,0,0,851,831,1,0,0,0,851,836,1,0,0,0,851,841,1,0,0,0,851,846,1,0,0,
  	0,852,87,1,0,0,0,853,856,5,110,0,0,854,855,5,80,0,0,855,857,3,108,54,
  	0,856,854,1,0,0,0,856,857,1,0,0,0,857,866,1,0,0,0,858,859,5,83,0,0,859,
  	862,5,110,0,0,860,861,5,80,0,0,861,863,3,108,54,0,862,860,1,0,0,0,862,
  	863,1,0,0,0,863,865,1,0,0,0,864,858,1,0,0,0,865,868,1,0,0,0,866,864,1,
  	0,0,0,866,867,1,0,0,0,867,89,1,0,0,0,868,866,1,0,0,0,869,870,5,110,0,
  	0,870,871,5,80,0,0,871,872,3,108,54,0,872,873,5,86,0,0,873,874,3,46,23,
  	0,874,91,1,0,0,0,875,876,5,58,0,0,876,877,3,46,23,0,877,878,5,59,0,0,
  	878,879,3,46,23,0,879,880,5,60,0,0,880,881,3,46,23,0,881,882,5,61,0,0,
  	882,93,1,0,0,0,883,899,5,62,0,0,884,899,5,63,0,0,885,899,5,105,0,0,886,
  	899,5,106,0,0,887,899,5,108,0,0,888,889,5,89,0,0,889,899,5,110,0,0,890,
  	891,5,110,0,0,891,892,5,81,0,0,892,899,5,110,0,0,893,899,3,96,48,0,894,
  	899,3,100,50,0,895,899,3,102,51,0,896,899,3,104,52,0,897,899,5,103,0,
  	0,898,883,1,0,0,0,898,884,1,0,0,0,898,885,1,0,0,0,898,886,1,0,0,0,898,
  	887,1,0,0,0,898,888,1,0,0,0,898,890,1,0,0,0,898,893,1,0,0,0,898,894,1,
  	0,0,0,898,895,1,0,0,0,898,896,1,0,0,0,898,897,1,0,0,0,899,95,1,0,0,0,
  	900,901,5,64,0,0,901,910,5,90,0,0,902,907,3,98,49,0,903,904,5,83,0,0,
  	904,906,3,98,49,0,905,903,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,
  	908,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,910,902,1,0,0,0,910,911,1,
  	0,0,0,911,912,1,0,0,0,912,953,5,98,0,0,913,914,5,65,0,0,914,923,5,90,
  	0,0,915,920,3,98,49,0,916,917,5,83,0,0,917,919,3,98,49,0,918,916,1,0,
  	0,0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,1,0,0,0,921,924,1,0,0,0,922,
  	920,1,0,0,0,923,915,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,0,925,953,5,
  	98,0,0,926,927,5,66,0,0,927,936,5,90,0,0,928,933,3,98,49,0,929,930,5,
  	83,0,0,930,932,3,98,49,0,931,929,1,0,0,0,932,935,1,0,0,0,933,931,1,0,
  	0,0,933,934,1,0,0,0,934,937,1,0,0,0,935,933,1,0,0,0,936,928,1,0,0,0,936,
  	937,1,0,0,0,937,938,1,0,0,0,938,953,5,98,0,0,939,940,5,67,0,0,940,949,
  	5,90,0,0,941,946,3,98,49,0,942,943,5,83,0,0,943,945,3,98,49,0,944,942,
  	1,0,0,0,945,948,1,0,0,0,946,944,1,0,0,0,946,947,1,0,0,0,947,950,1,0,0,
  	0,948,946,1,0,0,0,949,941,1,0,0,0,949,950,1,0,0,0,950,951,1,0,0,0,951,
  	953,5,98,0,0,952,900,1,0,0,0,952,913,1,0,0,0,952,926,1,0,0,0,952,939,
  	1,0,0,0,953,97,1,0,0,0,954,957,3,46,23,0,955,956,5,85,0,0,956,958,3,46,
  	23,0,957,955,1,0,0,0,957,958,1,0,0,0,958,99,1,0,0,0,959,960,5,68,0,0,
  	960,961,5,94,0,0,961,962,3,114,57,0,962,963,5,100,0,0,963,969,1,0,0,0,
  	964,965,3,114,57,0,965,966,5,90,0,0,966,967,5,98,0,0,967,969,1,0,0,0,
  	968,959,1,0,0,0,968,964,1,0,0,0,969,101,1,0,0,0,970,971,5,69,0,0,971,
  	972,5,94,0,0,972,973,3,108,54,0,973,974,5,100,0,0,974,983,1,0,0,0,975,
  	983,5,70,0,0,976,977,5,71,0,0,977,978,5,94,0,0,978,979,3,108,54,0,979,
  	980,5,100,0,0,980,983,1,0,0,0,981,983,5,71,0,0,982,970,1,0,0,0,982,975,
  	1,0,0,0,982,976,1,0,0,0,982,981,1,0,0,0,983,103,1,0,0,0,984,985,5,72,
  	0,0,985,986,5,90,0,0,986,991,3,106,53,0,987,988,5,83,0,0,988,990,3,106,
  	53,0,989,987,1,0,0,0,990,993,1,0,0,0,991,989,1,0,0,0,991,992,1,0,0,0,
  	992,994,1,0,0,0,993,991,1,0,0,0,994,995,5,98,0,0,995,105,1,0,0,0,996,
  	997,5,110,0,0,997,998,5,80,0,0,998,999,3,108,54,0,999,1000,5,86,0,0,1000,
  	1001,3,46,23,0,1001,1006,1,0,0,0,1002,1003,5,110,0,0,1003,1004,7,1,0,
  	0,1004,1006,3,46,23,0,1005,996,1,0,0,0,1005,1002,1,0,0,0,1006,107,1,0,
  	0,0,1007,1011,3,112,56,0,1008,1011,3,114,57,0,1009,1011,3,116,58,0,1010,
  	1007,1,0,0,0,1010,1008,1,0,0,0,1010,1009,1,0,0,0,1011,109,1,0,0,0,1012,
  	1013,3,108,54,0,1013,1014,5,0,0,1,1014,111,1,0,0,0,1015,1016,5,110,0,
  	0,1016,113,1,0,0,0,1017,1018,5,73,0,0,1018,1019,5,94,0,0,1019,1020,3,
  	108,54,0,1020,1021,5,100,0,0,1021,1043,1,0,0,0,1022,1023,5,64,0,0,1023,
  	1024,5,94,0,0,1024,1025,3,108,54,0,1025,1026,5,100,0,0,1026,1043,1,0,
  	0,0,1027,1028,5,65,0,0,1028,1029,5,94,0,0,1029,1030,3,108,54,0,1030,1031,
  	5,100,0,0,1031,1043,1,0,0,0,1032,1033,5,66,0,0,1033,1034,5,94,0,0,1034,
  	1035,3,108,54,0,1035,1036,5,100,0,0,1036,1043,1,0,0,0,1037,1038,5,67,
  	0,0,1038,1039,5,94,0,0,1039,1040,3,108,54,0,1040,1041,5,100,0,0,1041,
  	1043,1,0,0,0,1042,1017,1,0,0,0,1042,1022,1,0,0,0,1042,1027,1,0,0,0,1042,
  	1032,1,0,0,0,1042,1037,1,0,0,0,1043,115,1,0,0,0,1044,1045,5,72,0,0,1045,
  	1046,5,94,0,0,1046,1051,3,118,59,0,1047,1048,5,83,0,0,1048,1050,3,118,
  	59,0,1049,1047,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,
  	1,0,0,0,1052,1054,1,0,0,0,1053,1051,1,0,0,0,1054,1055,5,100,0,0,1055,
  	117,1,0,0,0,1056,1057,5,110,0,0,1057,1058,5,80,0,0,1058,1059,3,108,54,
  	0,1059,119,1,0,0,0,125,125,138,141,149,152,158,164,167,173,176,182,185,
  	191,194,199,205,212,214,220,223,229,232,238,241,247,250,253,262,265,279,
  	284,289,293,302,313,324,328,336,349,355,357,361,368,374,380,388,392,398,
  	403,410,414,423,428,432,438,442,450,456,463,469,479,484,492,495,504,517,
  	545,547,556,559,568,584,586,604,606,618,620,632,634,644,652,654,668,672,
  	682,684,694,701,711,721,731,741,751,761,766,784,794,799,801,805,813,816,
  	819,851,856,862,866,898,907,910,920,923,933,936,946,949,952,957,968,982,
  	991,1005,1010,1042,1051
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  useParserStaticData = std::move(staticData);
}

}

USEParser::USEParser(TokenStream *input) : USEParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

USEParser::USEParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  USEParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *useParserStaticData->atn, useParserStaticData->decisionToDFA, useParserStaticData->sharedContextCache, options);
}

USEParser::~USEParser() {
  delete _interpreter;
}

const atn::ATN& USEParser::getATN() const {
  return *useParserStaticData->atn;
}

std::string USEParser::getGrammarFileName() const {
  return "USE.g4";
}

const std::vector<std::string>& USEParser::getRuleNames() const {
  return useParserStaticData->ruleNames;
}

const dfa::Vocabulary& USEParser::getVocabulary() const {
  return useParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView USEParser::getSerializedATN() const {
  return useParserStaticData->serializedATN;
}


//----------------- ModelContext ------------------------------------------------------------------

USEParser::ModelContext::ModelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ModelContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ModelContext::EOF() {
  return getToken(USEParser::EOF, 0);
}

std::vector<USEParser::ModelElementContext *> USEParser::ModelContext::modelElement() {
  return getRuleContexts<USEParser::ModelElementContext>();
}

USEParser::ModelElementContext* USEParser::ModelContext::modelElement(size_t i) {
  return getRuleContext<USEParser::ModelElementContext>(i);
}


size_t USEParser::ModelContext::getRuleIndex() const {
  return USEParser::RuleModel;
}

void USEParser::ModelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModel(this);
}

void USEParser::ModelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModel(this);
}


std::any USEParser::ModelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitModel(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ModelContext* USEParser::model() {
  ModelContext *_localctx = _tracker.createInstance<ModelContext>(_ctx, getState());
  enterRule(_localctx, 0, USEParser::RuleModel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(120);
    match(USEParser::T__0);
    setState(121);
    match(USEParser::ID);
    setState(125);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 72220) != 0) || _la == USEParser::ABSTRACT) {
      setState(122);
      modelElement();
      setState(127);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(128);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModelElementContext ------------------------------------------------------------------

USEParser::ModelElementContext::ModelElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::ModelElementContext::getRuleIndex() const {
  return USEParser::RuleModelElement;
}

void USEParser::ModelElementContext::copyFrom(ModelElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EnumContext ------------------------------------------------------------------

USEParser::EnumTypeDefinitionContext* USEParser::EnumContext::enumTypeDefinition() {
  return getRuleContext<USEParser::EnumTypeDefinitionContext>(0);
}

USEParser::EnumContext::EnumContext(ModelElementContext *ctx) { copyFrom(ctx); }

void USEParser::EnumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnum(this);
}
void USEParser::EnumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnum(this);
}

std::any USEParser::EnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AssociationContext ------------------------------------------------------------------

USEParser::AssociationDefinitionContext* USEParser::AssociationContext::associationDefinition() {
  return getRuleContext<USEParser::AssociationDefinitionContext>(0);
}

USEParser::AssociationContext::AssociationContext(ModelElementContext *ctx) { copyFrom(ctx); }

void USEParser::AssociationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociation(this);
}
void USEParser::AssociationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociation(this);
}

std::any USEParser::AssociationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConstraintsContext ------------------------------------------------------------------

std::vector<USEParser::ConstraintDefinitionContext *> USEParser::ConstraintsContext::constraintDefinition() {
  return getRuleContexts<USEParser::ConstraintDefinitionContext>();
}

USEParser::ConstraintDefinitionContext* USEParser::ConstraintsContext::constraintDefinition(size_t i) {
  return getRuleContext<USEParser::ConstraintDefinitionContext>(i);
}

USEParser::ConstraintsContext::ConstraintsContext(ModelElementContext *ctx) { copyFrom(ctx); }

void USEParser::ConstraintsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraints(this);
}
void USEParser::ConstraintsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraints(this);
}

std::any USEParser::ConstraintsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConstraints(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassContext ------------------------------------------------------------------

USEParser::ClassDefinitionContext* USEParser::ClassContext::classDefinition() {
  return getRuleContext<USEParser::ClassDefinitionContext>(0);
}

USEParser::ClassContext::ClassContext(ModelElementContext *ctx) { copyFrom(ctx); }

void USEParser::ClassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClass(this);
}
void USEParser::ClassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClass(this);
}

std::any USEParser::ClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitClass(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AssociationClassContext ------------------------------------------------------------------

USEParser::AssociationClassDefinitionContext* USEParser::AssociationClassContext::associationClassDefinition() {
  return getRuleContext<USEParser::AssociationClassDefinitionContext>(0);
}

USEParser::AssociationClassContext::AssociationClassContext(ModelElementContext *ctx) { copyFrom(ctx); }

void USEParser::AssociationClassContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociationClass(this);
}
void USEParser::AssociationClassContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociationClass(this);
}

std::any USEParser::AssociationClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationClass(this);
  else
    return visitor->visitChildren(this);
}
USEParser::ModelElementContext* USEParser::modelElement() {
  ModelElementContext *_localctx = _tracker.createInstance<ModelElementContext>(_ctx, getState());
  enterRule(_localctx, 2, USEParser::RuleModelElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(141);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::EnumContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(130);
      enumTypeDefinition();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::ClassContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(131);
      classDefinition();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::AssociationContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(132);
      associationDefinition();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::AssociationClassContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(133);
      associationClassDefinition();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::ConstraintsContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(134);
      match(USEParser::T__1);
      setState(138);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__22) {
        setState(135);
        constraintDefinition();
        setState(140);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumTypeDefinitionContext ------------------------------------------------------------------

USEParser::EnumTypeDefinitionContext::EnumTypeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

USEParser::IdListContext* USEParser::EnumTypeDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}


size_t USEParser::EnumTypeDefinitionContext::getRuleIndex() const {
  return USEParser::RuleEnumTypeDefinition;
}

void USEParser::EnumTypeDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumTypeDefinition(this);
}

void USEParser::EnumTypeDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumTypeDefinition(this);
}


std::any USEParser::EnumTypeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEnumTypeDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EnumTypeDefinitionContext* USEParser::enumTypeDefinition() {
  EnumTypeDefinitionContext *_localctx = _tracker.createInstance<EnumTypeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 4, USEParser::RuleEnumTypeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(143);
    match(USEParser::T__2);
    setState(144);
    match(USEParser::ID);
    setState(145);
    match(USEParser::LBRACE);
    setState(146);
    idList();
    setState(147);
    match(USEParser::RBRACE);
    setState(149);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(148);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDefinitionContext ------------------------------------------------------------------

USEParser::ClassDefinitionContext::ClassDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ClassDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ClassDefinitionContext::ABSTRACT() {
  return getToken(USEParser::ABSTRACT, 0);
}

tree::TerminalNode* USEParser::ClassDefinitionContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::IdListContext* USEParser::ClassDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

std::vector<USEParser::AttributeDefinitionContext *> USEParser::ClassDefinitionContext::attributeDefinition() {
  return getRuleContexts<USEParser::AttributeDefinitionContext>();
}

USEParser::AttributeDefinitionContext* USEParser::ClassDefinitionContext::attributeDefinition(size_t i) {
  return getRuleContext<USEParser::AttributeDefinitionContext>(i);
}

std::vector<USEParser::OperationDefinitionContext *> USEParser::ClassDefinitionContext::operationDefinition() {
  return getRuleContexts<USEParser::OperationDefinitionContext>();
}

USEParser::OperationDefinitionContext* USEParser::ClassDefinitionContext::operationDefinition(size_t i) {
  return getRuleContext<USEParser::OperationDefinitionContext>(i);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::ClassDefinitionContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::ClassDefinitionContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<USEParser::StateMachineContext *> USEParser::ClassDefinitionContext::stateMachine() {
  return getRuleContexts<USEParser::StateMachineContext>();
}

USEParser::StateMachineContext* USEParser::ClassDefinitionContext::stateMachine(size_t i) {
  return getRuleContext<USEParser::StateMachineContext>(i);
}


size_t USEParser::ClassDefinitionContext::getRuleIndex() const {
  return USEParser::RuleClassDefinition;
}

void USEParser::ClassDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassDefinition(this);
}

void USEParser::ClassDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassDefinition(this);
}


std::any USEParser::ClassDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitClassDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ClassDefinitionContext* USEParser::classDefinition() {
  ClassDefinitionContext *_localctx = _tracker.createInstance<ClassDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 6, USEParser::RuleClassDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ABSTRACT) {
      setState(151);
      match(USEParser::ABSTRACT);
    }
    setState(154);
    match(USEParser::T__3);
    setState(155);
    match(USEParser::ID);
    setState(158);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LESS) {
      setState(156);
      match(USEParser::LESS);
      setState(157);
      idList();
    }
    setState(167);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__4) {
      setState(160);
      match(USEParser::T__4);
      setState(164);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(161);
        attributeDefinition();
        setState(166);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(176);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__5) {
      setState(169);
      match(USEParser::T__5);
      setState(173);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(170);
        operationDefinition();
        setState(175);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(185);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__1) {
      setState(178);
      match(USEParser::T__1);
      setState(182);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__23

      || _la == USEParser::T__24) {
        setState(179);
        invariantClause();
        setState(184);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(194);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__6) {
      setState(187);
      match(USEParser::T__6);
      setState(191);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__27) {
        setState(188);
        stateMachine();
        setState(193);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(196);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationClassDefinitionContext ------------------------------------------------------------------

USEParser::AssociationClassDefinitionContext::AssociationClassDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::ABSTRACT() {
  return getToken(USEParser::ABSTRACT, 0);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::IdListContext* USEParser::AssociationClassDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::AssociationClassDefinitionContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::AssociationClassDefinitionContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

std::vector<USEParser::AttributeDefinitionContext *> USEParser::AssociationClassDefinitionContext::attributeDefinition() {
  return getRuleContexts<USEParser::AttributeDefinitionContext>();
}

USEParser::AttributeDefinitionContext* USEParser::AssociationClassDefinitionContext::attributeDefinition(size_t i) {
  return getRuleContext<USEParser::AttributeDefinitionContext>(i);
}

std::vector<USEParser::OperationDefinitionContext *> USEParser::AssociationClassDefinitionContext::operationDefinition() {
  return getRuleContexts<USEParser::OperationDefinitionContext>();
}

USEParser::OperationDefinitionContext* USEParser::AssociationClassDefinitionContext::operationDefinition(size_t i) {
  return getRuleContext<USEParser::OperationDefinitionContext>(i);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::AssociationClassDefinitionContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::AssociationClassDefinitionContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<USEParser::StateMachineContext *> USEParser::AssociationClassDefinitionContext::stateMachine() {
  return getRuleContexts<USEParser::StateMachineContext>();
}

USEParser::StateMachineContext* USEParser::AssociationClassDefinitionContext::stateMachine(size_t i) {
  return getRuleContext<USEParser::StateMachineContext>(i);
}


size_t USEParser::AssociationClassDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAssociationClassDefinition;
}

void USEParser::AssociationClassDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociationClassDefinition(this);
}

void USEParser::AssociationClassDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociationClassDefinition(this);
}


std::any USEParser::AssociationClassDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationClassDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AssociationClassDefinitionContext* USEParser::associationClassDefinition() {
  AssociationClassDefinitionContext *_localctx = _tracker.createInstance<AssociationClassDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 8, USEParser::RuleAssociationClassDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(199);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ABSTRACT) {
      setState(198);
      match(USEParser::ABSTRACT);
    }
    setState(201);
    match(USEParser::T__8);
    setState(202);
    match(USEParser::ID);
    setState(205);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LESS) {
      setState(203);
      match(USEParser::LESS);
      setState(204);
      idList();
    }
    setState(214);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__9) {
      setState(207);
      match(USEParser::T__9);
      setState(208);
      associationEnd();
      setState(210); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(209);
        associationEnd();
        setState(212); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == USEParser::ID);
    }
    setState(223);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__4) {
      setState(216);
      match(USEParser::T__4);
      setState(220);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(217);
        attributeDefinition();
        setState(222);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__5) {
      setState(225);
      match(USEParser::T__5);
      setState(229);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(226);
        operationDefinition();
        setState(231);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(241);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__1) {
      setState(234);
      match(USEParser::T__1);
      setState(238);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__23

      || _la == USEParser::T__24) {
        setState(235);
        invariantClause();
        setState(240);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(250);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__6) {
      setState(243);
      match(USEParser::T__6);
      setState(247);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__27) {
        setState(244);
        stateMachine();
        setState(249);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(253);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__10

    || _la == USEParser::T__11) {
      setState(252);
      _la = _input->LA(1);
      if (!(_la == USEParser::T__10

      || _la == USEParser::T__11)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(255);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeDefinitionContext ------------------------------------------------------------------

USEParser::AttributeDefinitionContext::AttributeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::AttributeDefinitionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

USEParser::InitDefinitionContext* USEParser::AttributeDefinitionContext::initDefinition() {
  return getRuleContext<USEParser::InitDefinitionContext>(0);
}

USEParser::DerivedDefinitionContext* USEParser::AttributeDefinitionContext::derivedDefinition() {
  return getRuleContext<USEParser::DerivedDefinitionContext>(0);
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}


size_t USEParser::AttributeDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAttributeDefinition;
}

void USEParser::AttributeDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeDefinition(this);
}

void USEParser::AttributeDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeDefinition(this);
}


std::any USEParser::AttributeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAttributeDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AttributeDefinitionContext* USEParser::attributeDefinition() {
  AttributeDefinitionContext *_localctx = _tracker.createInstance<AttributeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 10, USEParser::RuleAttributeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(257);
    match(USEParser::ID);
    setState(258);
    match(USEParser::COLON);
    setState(259);
    type();
    setState(262);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__12: {
        setState(260);
        initDefinition();
        break;
      }

      case USEParser::T__13:
      case USEParser::T__14: {
        setState(261);
        derivedDefinition();
        break;
      }

      case USEParser::T__1:
      case USEParser::T__5:
      case USEParser::T__6:
      case USEParser::T__7:
      case USEParser::T__10:
      case USEParser::T__11:
      case USEParser::SEMI:
      case USEParser::ID: {
        break;
      }

    default:
      break;
    }
    setState(265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(264);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDefinitionContext ------------------------------------------------------------------

USEParser::InitDefinitionContext::InitDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::InitDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::InitDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::InitDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}


size_t USEParser::InitDefinitionContext::getRuleIndex() const {
  return USEParser::RuleInitDefinition;
}

void USEParser::InitDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitDefinition(this);
}

void USEParser::InitDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitDefinition(this);
}


std::any USEParser::InitDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInitDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InitDefinitionContext* USEParser::initDefinition() {
  InitDefinitionContext *_localctx = _tracker.createInstance<InitDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 12, USEParser::RuleInitDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(267);
    match(USEParser::T__12);
    setState(268);
    _la = _input->LA(1);
    if (!(_la == USEParser::COLON

    || _la == USEParser::EQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(269);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DerivedDefinitionContext ------------------------------------------------------------------

USEParser::DerivedDefinitionContext::DerivedDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::DerivedDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::DerivedDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::DerivedDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}


size_t USEParser::DerivedDefinitionContext::getRuleIndex() const {
  return USEParser::RuleDerivedDefinition;
}

void USEParser::DerivedDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDerivedDefinition(this);
}

void USEParser::DerivedDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDerivedDefinition(this);
}


std::any USEParser::DerivedDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitDerivedDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::DerivedDefinitionContext* USEParser::derivedDefinition() {
  DerivedDefinitionContext *_localctx = _tracker.createInstance<DerivedDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 14, USEParser::RuleDerivedDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(271);
    _la = _input->LA(1);
    if (!(_la == USEParser::T__13

    || _la == USEParser::T__14)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(272);
    _la = _input->LA(1);
    if (!(_la == USEParser::COLON

    || _la == USEParser::EQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(273);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperationDefinitionContext ------------------------------------------------------------------

USEParser::OperationDefinitionContext::OperationDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::OperationDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::ParamListContext* USEParser::OperationDefinitionContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::OperationDefinitionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::SOIL_OPERATION() {
  return getToken(USEParser::SOIL_OPERATION, 0);
}

std::vector<USEParser::PrePostClauseContext *> USEParser::OperationDefinitionContext::prePostClause() {
  return getRuleContexts<USEParser::PrePostClauseContext>();
}

USEParser::PrePostClauseContext* USEParser::OperationDefinitionContext::prePostClause(size_t i) {
  return getRuleContext<USEParser::PrePostClauseContext>(i);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::OperationDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::OperationDefinitionContext::getRuleIndex() const {
  return USEParser::RuleOperationDefinition;
}

void USEParser::OperationDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperationDefinition(this);
}

void USEParser::OperationDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperationDefinition(this);
}


std::any USEParser::OperationDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::OperationDefinitionContext* USEParser::operationDefinition() {
  OperationDefinitionContext *_localctx = _tracker.createInstance<OperationDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 16, USEParser::RuleOperationDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(275);
    match(USEParser::ID);
    setState(276);
    paramList();
    setState(279);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(277);
      match(USEParser::COLON);
      setState(278);
      type();
    }
    setState(284);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::EQUAL: {
        setState(281);
        match(USEParser::EQUAL);
        setState(282);
        expression();
        break;
      }

      case USEParser::SOIL_OPERATION: {
        setState(283);
        match(USEParser::SOIL_OPERATION);
        break;
      }

      case USEParser::T__1:
      case USEParser::T__6:
      case USEParser::T__7:
      case USEParser::T__10:
      case USEParser::T__11:
      case USEParser::T__25:
      case USEParser::T__26:
      case USEParser::SEMI:
      case USEParser::ID: {
        break;
      }

    default:
      break;
    }
    setState(289);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::T__25

    || _la == USEParser::T__26) {
      setState(286);
      prePostClause();
      setState(291);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(293);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(292);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationDefinitionContext ------------------------------------------------------------------

USEParser::AssociationDefinitionContext::AssociationDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::AssociationDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAssociationDefinition;
}

void USEParser::AssociationDefinitionContext::copyFrom(AssociationDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AggregationContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::AggregationContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::AggregationContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::AggregationContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::AggregationContext::AggregationContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }

void USEParser::AggregationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAggregation(this);
}
void USEParser::AggregationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAggregation(this);
}

std::any USEParser::AggregationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAggregation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CompositionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::CompositionContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::CompositionContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::CompositionContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::CompositionContext::CompositionContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }

void USEParser::CompositionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComposition(this);
}
void USEParser::CompositionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComposition(this);
}

std::any USEParser::CompositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitComposition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleAssociationContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SimpleAssociationContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::SimpleAssociationContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::SimpleAssociationContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::SimpleAssociationContext::SimpleAssociationContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }

void USEParser::SimpleAssociationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleAssociation(this);
}
void USEParser::SimpleAssociationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleAssociation(this);
}

std::any USEParser::SimpleAssociationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSimpleAssociation(this);
  else
    return visitor->visitChildren(this);
}
USEParser::AssociationDefinitionContext* USEParser::associationDefinition() {
  AssociationDefinitionContext *_localctx = _tracker.createInstance<AssociationDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 18, USEParser::RuleAssociationDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(328);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__15: {
        _localctx = _tracker.createInstance<USEParser::SimpleAssociationContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(295);
        match(USEParser::T__15);
        setState(296);
        match(USEParser::ID);
        setState(297);
        match(USEParser::T__9);
        setState(298);
        associationEnd();
        setState(300); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(299);
          associationEnd();
          setState(302); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(304);
        match(USEParser::T__7);
        break;
      }

      case USEParser::T__10: {
        _localctx = _tracker.createInstance<USEParser::AggregationContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(306);
        match(USEParser::T__10);
        setState(307);
        match(USEParser::ID);
        setState(308);
        match(USEParser::T__9);
        setState(309);
        associationEnd();
        setState(311); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(310);
          associationEnd();
          setState(313); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(315);
        match(USEParser::T__7);
        break;
      }

      case USEParser::T__11: {
        _localctx = _tracker.createInstance<USEParser::CompositionContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(317);
        match(USEParser::T__11);
        setState(318);
        match(USEParser::ID);
        setState(319);
        match(USEParser::T__9);
        setState(320);
        associationEnd();
        setState(322); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(321);
          associationEnd();
          setState(324); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(326);
        match(USEParser::T__7);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationEndContext ------------------------------------------------------------------

USEParser::AssociationEndContext::AssociationEndContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::AssociationEndContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::AssociationEndContext::LBRACK() {
  return getToken(USEParser::LBRACK, 0);
}

USEParser::MultiplicityContext* USEParser::AssociationEndContext::multiplicity() {
  return getRuleContext<USEParser::MultiplicityContext>(0);
}

tree::TerminalNode* USEParser::AssociationEndContext::RBRACK() {
  return getToken(USEParser::RBRACK, 0);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::EQUAL() {
  return getTokens(USEParser::EQUAL);
}

tree::TerminalNode* USEParser::AssociationEndContext::EQUAL(size_t i) {
  return getToken(USEParser::EQUAL, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::AssociationEndContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::AssociationEndContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<USEParser::ParamListContext *> USEParser::AssociationEndContext::paramList() {
  return getRuleContexts<USEParser::ParamListContext>();
}

USEParser::ParamListContext* USEParser::AssociationEndContext::paramList(size_t i) {
  return getRuleContext<USEParser::ParamListContext>(i);
}

tree::TerminalNode* USEParser::AssociationEndContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::LPAREN() {
  return getTokens(USEParser::LPAREN);
}

tree::TerminalNode* USEParser::AssociationEndContext::LPAREN(size_t i) {
  return getToken(USEParser::LPAREN, i);
}

std::vector<USEParser::ElemVarsDeclarationContext *> USEParser::AssociationEndContext::elemVarsDeclaration() {
  return getRuleContexts<USEParser::ElemVarsDeclarationContext>();
}

USEParser::ElemVarsDeclarationContext* USEParser::AssociationEndContext::elemVarsDeclaration(size_t i) {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::RPAREN() {
  return getTokens(USEParser::RPAREN);
}

tree::TerminalNode* USEParser::AssociationEndContext::RPAREN(size_t i) {
  return getToken(USEParser::RPAREN, i);
}


size_t USEParser::AssociationEndContext::getRuleIndex() const {
  return USEParser::RuleAssociationEnd;
}

void USEParser::AssociationEndContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssociationEnd(this);
}

void USEParser::AssociationEndContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssociationEnd(this);
}


std::any USEParser::AssociationEndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationEnd(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AssociationEndContext* USEParser::associationEnd() {
  AssociationEndContext *_localctx = _tracker.createInstance<AssociationEndContext>(_ctx, getState());
  enterRule(_localctx, 20, USEParser::RuleAssociationEnd);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(330);
    match(USEParser::ID);
    setState(331);
    match(USEParser::LBRACK);
    setState(332);
    multiplicity();
    setState(333);
    match(USEParser::RBRACK);
    setState(336);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__16) {
      setState(334);
      match(USEParser::T__16);
      setState(335);
      match(USEParser::ID);
    }
    setState(357);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 8175616) != 0)) {
      setState(355);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case USEParser::T__17: {
          setState(338);
          match(USEParser::T__17);
          break;
        }

        case USEParser::T__18: {
          setState(339);
          match(USEParser::T__18);
          setState(340);
          match(USEParser::ID);
          break;
        }

        case USEParser::T__19: {
          setState(341);
          match(USEParser::T__19);
          break;
        }

        case USEParser::T__20: {
          setState(342);
          match(USEParser::T__20);
          setState(343);
          match(USEParser::ID);
          break;
        }

        case USEParser::T__13:
        case USEParser::T__14: {
          setState(344);
          _la = _input->LA(1);
          if (!(_la == USEParser::T__13

          || _la == USEParser::T__14)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(349);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == USEParser::LPAREN) {
            setState(345);
            match(USEParser::LPAREN);
            setState(346);
            elemVarsDeclaration();
            setState(347);
            match(USEParser::RPAREN);
          }
          setState(351);
          match(USEParser::EQUAL);
          setState(352);
          expression();
          break;
        }

        case USEParser::T__21: {
          setState(353);
          match(USEParser::T__21);
          setState(354);
          paramList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(359);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(360);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityContext ------------------------------------------------------------------

USEParser::MultiplicityContext::MultiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::MultiplicityRangeContext *> USEParser::MultiplicityContext::multiplicityRange() {
  return getRuleContexts<USEParser::MultiplicityRangeContext>();
}

USEParser::MultiplicityRangeContext* USEParser::MultiplicityContext::multiplicityRange(size_t i) {
  return getRuleContext<USEParser::MultiplicityRangeContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::MultiplicityContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::MultiplicityContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::MultiplicityContext::getRuleIndex() const {
  return USEParser::RuleMultiplicity;
}

void USEParser::MultiplicityContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicity(this);
}

void USEParser::MultiplicityContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicity(this);
}


std::any USEParser::MultiplicityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicity(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicityContext* USEParser::multiplicity() {
  MultiplicityContext *_localctx = _tracker.createInstance<MultiplicityContext>(_ctx, getState());
  enterRule(_localctx, 22, USEParser::RuleMultiplicity);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(363);
    multiplicityRange();
    setState(368);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(364);
      match(USEParser::COMMA);
      setState(365);
      multiplicityRange();
      setState(370);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityRangeContext ------------------------------------------------------------------

USEParser::MultiplicityRangeContext::MultiplicityRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::MultiplicitySpecContext *> USEParser::MultiplicityRangeContext::multiplicitySpec() {
  return getRuleContexts<USEParser::MultiplicitySpecContext>();
}

USEParser::MultiplicitySpecContext* USEParser::MultiplicityRangeContext::multiplicitySpec(size_t i) {
  return getRuleContext<USEParser::MultiplicitySpecContext>(i);
}

tree::TerminalNode* USEParser::MultiplicityRangeContext::DOTDOT() {
  return getToken(USEParser::DOTDOT, 0);
}


size_t USEParser::MultiplicityRangeContext::getRuleIndex() const {
  return USEParser::RuleMultiplicityRange;
}

void USEParser::MultiplicityRangeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicityRange(this);
}

void USEParser::MultiplicityRangeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicityRange(this);
}


std::any USEParser::MultiplicityRangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicityRange(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicityRangeContext* USEParser::multiplicityRange() {
  MultiplicityRangeContext *_localctx = _tracker.createInstance<MultiplicityRangeContext>(_ctx, getState());
  enterRule(_localctx, 24, USEParser::RuleMultiplicityRange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(371);
    multiplicitySpec();
    setState(374);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::DOTDOT) {
      setState(372);
      match(USEParser::DOTDOT);
      setState(373);
      multiplicitySpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicitySpecContext ------------------------------------------------------------------

USEParser::MultiplicitySpecContext::MultiplicitySpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::MultiplicitySpecContext::INT() {
  return getToken(USEParser::INT, 0);
}

tree::TerminalNode* USEParser::MultiplicitySpecContext::STAR() {
  return getToken(USEParser::STAR, 0);
}


size_t USEParser::MultiplicitySpecContext::getRuleIndex() const {
  return USEParser::RuleMultiplicitySpec;
}

void USEParser::MultiplicitySpecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicitySpec(this);
}

void USEParser::MultiplicitySpecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicitySpec(this);
}


std::any USEParser::MultiplicitySpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicitySpec(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicitySpecContext* USEParser::multiplicitySpec() {
  MultiplicitySpecContext *_localctx = _tracker.createInstance<MultiplicitySpecContext>(_ctx, getState());
  enterRule(_localctx, 26, USEParser::RuleMultiplicitySpec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(376);
    _la = _input->LA(1);
    if (!(_la == USEParser::STAR

    || _la == USEParser::INT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintDefinitionContext ------------------------------------------------------------------

USEParser::ConstraintDefinitionContext::ConstraintDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::InvariantContext* USEParser::ConstraintDefinitionContext::invariant() {
  return getRuleContext<USEParser::InvariantContext>(0);
}

USEParser::PrePostContext* USEParser::ConstraintDefinitionContext::prePost() {
  return getRuleContext<USEParser::PrePostContext>(0);
}


size_t USEParser::ConstraintDefinitionContext::getRuleIndex() const {
  return USEParser::RuleConstraintDefinition;
}

void USEParser::ConstraintDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstraintDefinition(this);
}

void USEParser::ConstraintDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstraintDefinition(this);
}


std::any USEParser::ConstraintDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConstraintDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ConstraintDefinitionContext* USEParser::constraintDefinition() {
  ConstraintDefinitionContext *_localctx = _tracker.createInstance<ConstraintDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 28, USEParser::RuleConstraintDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(380);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(378);
      invariant();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(379);
      prePost();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantContext ------------------------------------------------------------------

USEParser::InvariantContext::InvariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::SimpleTypeContext* USEParser::InvariantContext::simpleType() {
  return getRuleContext<USEParser::SimpleTypeContext>(0);
}

std::vector<tree::TerminalNode *> USEParser::InvariantContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::InvariantContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::InvariantContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::InvariantContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::InvariantContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::InvariantContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::InvariantContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::InvariantContext::getRuleIndex() const {
  return USEParser::RuleInvariant;
}

void USEParser::InvariantContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvariant(this);
}

void USEParser::InvariantContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvariant(this);
}


std::any USEParser::InvariantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInvariant(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InvariantContext* USEParser::invariant() {
  InvariantContext *_localctx = _tracker.createInstance<InvariantContext>(_ctx, getState());
  enterRule(_localctx, 30, USEParser::RuleInvariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(382);
    match(USEParser::T__22);
    setState(392);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(383);
      match(USEParser::ID);
      setState(388);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(384);
        match(USEParser::COMMA);
        setState(385);
        match(USEParser::ID);
        setState(390);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(391);
      match(USEParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(394);
    simpleType();
    setState(398);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::T__23

    || _la == USEParser::T__24) {
      setState(395);
      invariantClause();
      setState(400);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantClauseContext ------------------------------------------------------------------

USEParser::InvariantClauseContext::InvariantClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::InvariantClauseContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::InvariantClauseContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::InvariantClauseContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::InvariantClauseContext::getRuleIndex() const {
  return USEParser::RuleInvariantClause;
}

void USEParser::InvariantClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInvariantClause(this);
}

void USEParser::InvariantClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInvariantClause(this);
}


std::any USEParser::InvariantClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInvariantClause(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InvariantClauseContext* USEParser::invariantClause() {
  InvariantClauseContext *_localctx = _tracker.createInstance<InvariantClauseContext>(_ctx, getState());
  enterRule(_localctx, 32, USEParser::RuleInvariantClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(414);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__23: {
        enterOuterAlt(_localctx, 1);
        setState(401);
        match(USEParser::T__23);
        setState(403);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(402);
          match(USEParser::ID);
        }
        setState(405);
        match(USEParser::COLON);
        setState(406);
        expression();
        break;
      }

      case USEParser::T__24: {
        enterOuterAlt(_localctx, 2);
        setState(407);
        match(USEParser::T__24);
        setState(408);
        match(USEParser::T__23);
        setState(410);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(409);
          match(USEParser::ID);
        }
        setState(412);
        match(USEParser::COLON);
        setState(413);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrePostContext ------------------------------------------------------------------

USEParser::PrePostContext::PrePostContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::PrePostContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::PrePostContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::PrePostContext::COLON_COLON() {
  return getToken(USEParser::COLON_COLON, 0);
}

USEParser::ParamListContext* USEParser::PrePostContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}

tree::TerminalNode* USEParser::PrePostContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::PrePostContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

std::vector<USEParser::PrePostClauseContext *> USEParser::PrePostContext::prePostClause() {
  return getRuleContexts<USEParser::PrePostClauseContext>();
}

USEParser::PrePostClauseContext* USEParser::PrePostContext::prePostClause(size_t i) {
  return getRuleContext<USEParser::PrePostClauseContext>(i);
}


size_t USEParser::PrePostContext::getRuleIndex() const {
  return USEParser::RulePrePost;
}

void USEParser::PrePostContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrePost(this);
}

void USEParser::PrePostContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrePost(this);
}


std::any USEParser::PrePostContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPrePost(this);
  else
    return visitor->visitChildren(this);
}

USEParser::PrePostContext* USEParser::prePost() {
  PrePostContext *_localctx = _tracker.createInstance<PrePostContext>(_ctx, getState());
  enterRule(_localctx, 34, USEParser::RulePrePost);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(416);
    match(USEParser::T__22);
    setState(417);
    match(USEParser::ID);
    setState(418);
    match(USEParser::COLON_COLON);
    setState(419);
    match(USEParser::ID);
    setState(420);
    paramList();
    setState(423);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(421);
      match(USEParser::COLON);
      setState(422);
      type();
    }
    setState(426); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(425);
      prePostClause();
      setState(428); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::T__25

    || _la == USEParser::T__26);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrePostClauseContext ------------------------------------------------------------------

USEParser::PrePostClauseContext::PrePostClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PrePostClauseContext::getRuleIndex() const {
  return USEParser::RulePrePostClause;
}

void USEParser::PrePostClauseContext::copyFrom(PrePostClauseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PreConditionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PreConditionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::PreConditionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::PreConditionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::PreConditionContext::PreConditionContext(PrePostClauseContext *ctx) { copyFrom(ctx); }

void USEParser::PreConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPreCondition(this);
}
void USEParser::PreConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPreCondition(this);
}

std::any USEParser::PreConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPreCondition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PostConditionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PostConditionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::PostConditionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::PostConditionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::PostConditionContext::PostConditionContext(PrePostClauseContext *ctx) { copyFrom(ctx); }

void USEParser::PostConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostCondition(this);
}
void USEParser::PostConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostCondition(this);
}

std::any USEParser::PostConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPostCondition(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PrePostClauseContext* USEParser::prePostClause() {
  PrePostClauseContext *_localctx = _tracker.createInstance<PrePostClauseContext>(_ctx, getState());
  enterRule(_localctx, 36, USEParser::RulePrePostClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(442);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__25: {
        _localctx = _tracker.createInstance<USEParser::PreConditionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(430);
        match(USEParser::T__25);
        setState(432);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(431);
          match(USEParser::ID);
        }
        setState(434);
        match(USEParser::COLON);
        setState(435);
        expression();
        break;
      }

      case USEParser::T__26: {
        _localctx = _tracker.createInstance<USEParser::PostConditionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(436);
        match(USEParser::T__26);
        setState(438);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(437);
          match(USEParser::ID);
        }
        setState(440);
        match(USEParser::COLON);
        setState(441);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateMachineContext ------------------------------------------------------------------

USEParser::StateMachineContext::StateMachineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::StateMachineContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::StateDefinitionContext *> USEParser::StateMachineContext::stateDefinition() {
  return getRuleContexts<USEParser::StateDefinitionContext>();
}

USEParser::StateDefinitionContext* USEParser::StateMachineContext::stateDefinition(size_t i) {
  return getRuleContext<USEParser::StateDefinitionContext>(i);
}

std::vector<USEParser::TransitionDefinitionContext *> USEParser::StateMachineContext::transitionDefinition() {
  return getRuleContexts<USEParser::TransitionDefinitionContext>();
}

USEParser::TransitionDefinitionContext* USEParser::StateMachineContext::transitionDefinition(size_t i) {
  return getRuleContext<USEParser::TransitionDefinitionContext>(i);
}


size_t USEParser::StateMachineContext::getRuleIndex() const {
  return USEParser::RuleStateMachine;
}

void USEParser::StateMachineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStateMachine(this);
}

void USEParser::StateMachineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStateMachine(this);
}


std::any USEParser::StateMachineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitStateMachine(this);
  else
    return visitor->visitChildren(this);
}

USEParser::StateMachineContext* USEParser::stateMachine() {
  StateMachineContext *_localctx = _tracker.createInstance<StateMachineContext>(_ctx, getState());
  enterRule(_localctx, 38, USEParser::RuleStateMachine);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(444);
    match(USEParser::T__27);
    setState(445);
    match(USEParser::ID);
    setState(446);
    match(USEParser::T__28);
    setState(448); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(447);
      stateDefinition();
      setState(450); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::ID);
    setState(452);
    match(USEParser::T__29);
    setState(454); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(453);
      transitionDefinition();
      setState(456); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::ID);
    setState(458);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateDefinitionContext ------------------------------------------------------------------

USEParser::StateDefinitionContext::StateDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::StateDefinitionContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::StateDefinitionContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::StateDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::StateDefinitionContext::LBRACK() {
  return getToken(USEParser::LBRACK, 0);
}

USEParser::ExpressionContext* USEParser::StateDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::StateDefinitionContext::RBRACK() {
  return getToken(USEParser::RBRACK, 0);
}


size_t USEParser::StateDefinitionContext::getRuleIndex() const {
  return USEParser::RuleStateDefinition;
}

void USEParser::StateDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStateDefinition(this);
}

void USEParser::StateDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStateDefinition(this);
}


std::any USEParser::StateDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitStateDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::StateDefinitionContext* USEParser::stateDefinition() {
  StateDefinitionContext *_localctx = _tracker.createInstance<StateDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 40, USEParser::RuleStateDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(460);
    match(USEParser::ID);
    setState(463);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(461);
      match(USEParser::COLON);
      setState(462);
      match(USEParser::ID);
    }
    setState(469);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LBRACK) {
      setState(465);
      match(USEParser::LBRACK);
      setState(466);
      expression();
      setState(467);
      match(USEParser::RBRACK);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransitionDefinitionContext ------------------------------------------------------------------

USEParser::TransitionDefinitionContext::TransitionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::ARROW() {
  return getToken(USEParser::ARROW, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::LBRACK() {
  return getTokens(USEParser::LBRACK);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LBRACK(size_t i) {
  return getToken(USEParser::LBRACK, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::TransitionDefinitionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::TransitionDefinitionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::RBRACK() {
  return getTokens(USEParser::RBRACK);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RBRACK(size_t i) {
  return getToken(USEParser::RBRACK, i);
}

USEParser::ParamListContext* USEParser::TransitionDefinitionContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}


size_t USEParser::TransitionDefinitionContext::getRuleIndex() const {
  return USEParser::RuleTransitionDefinition;
}

void USEParser::TransitionDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransitionDefinition(this);
}

void USEParser::TransitionDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransitionDefinition(this);
}


std::any USEParser::TransitionDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTransitionDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TransitionDefinitionContext* USEParser::transitionDefinition() {
  TransitionDefinitionContext *_localctx = _tracker.createInstance<TransitionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 42, USEParser::RuleTransitionDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(471);
    match(USEParser::ID);
    setState(472);
    match(USEParser::ARROW);
    setState(473);
    match(USEParser::ID);
    setState(495);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LBRACE) {
      setState(474);
      match(USEParser::LBRACE);
      setState(479);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LBRACK) {
        setState(475);
        match(USEParser::LBRACK);
        setState(476);
        expression();
        setState(477);
        match(USEParser::RBRACK);
      }

      setState(481);
      match(USEParser::ID);
      setState(482);
      match(USEParser::LPAREN);
      setState(484);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LPAREN) {
        setState(483);
        paramList();
      }
      setState(486);
      match(USEParser::RPAREN);
      setState(492);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LBRACK) {
        setState(488);
        match(USEParser::LBRACK);
        setState(489);
        expression();
        setState(490);
        match(USEParser::RBRACK);
      }
      setState(494);
      match(USEParser::RBRACE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionOnlyContext ------------------------------------------------------------------

USEParser::ExpressionOnlyContext::ExpressionOnlyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::ExpressionOnlyContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ExpressionOnlyContext::EOF() {
  return getToken(USEParser::EOF, 0);
}


size_t USEParser::ExpressionOnlyContext::getRuleIndex() const {
  return USEParser::RuleExpressionOnly;
}

void USEParser::ExpressionOnlyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionOnly(this);
}

void USEParser::ExpressionOnlyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionOnly(this);
}


std::any USEParser::ExpressionOnlyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitExpressionOnly(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ExpressionOnlyContext* USEParser::expressionOnly() {
  ExpressionOnlyContext *_localctx = _tracker.createInstance<ExpressionOnlyContext>(_ctx, getState());
  enterRule(_localctx, 44, USEParser::RuleExpressionOnly);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(497);
    expression();
    setState(498);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

USEParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::ExpressionContext::getRuleIndex() const {
  return USEParser::RuleExpression;
}

void USEParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LetExprContext ------------------------------------------------------------------

USEParser::LetExpressionContext* USEParser::LetExprContext::letExpression() {
  return getRuleContext<USEParser::LetExpressionContext>(0);
}

USEParser::LetExprContext::LetExprContext(ExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::LetExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLetExpr(this);
}
void USEParser::LetExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLetExpr(this);
}

std::any USEParser::LetExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLetExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LambdaExprContext ------------------------------------------------------------------

USEParser::LambdaExpressionContext* USEParser::LambdaExprContext::lambdaExpression() {
  return getRuleContext<USEParser::LambdaExpressionContext>(0);
}

USEParser::LambdaExprContext::LambdaExprContext(ExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::LambdaExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaExpr(this);
}
void USEParser::LambdaExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaExpr(this);
}

std::any USEParser::LambdaExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLambdaExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConditionalExprContext ------------------------------------------------------------------

USEParser::ConditionalExpressionContext* USEParser::ConditionalExprContext::conditionalExpression() {
  return getRuleContext<USEParser::ConditionalExpressionContext>(0);
}

USEParser::ConditionalExprContext::ConditionalExprContext(ExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::ConditionalExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpr(this);
}
void USEParser::ConditionalExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpr(this);
}

std::any USEParser::ConditionalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConditionalExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LogicalExprContext ------------------------------------------------------------------

USEParser::LogicalExpressionContext* USEParser::LogicalExprContext::logicalExpression() {
  return getRuleContext<USEParser::LogicalExpressionContext>(0);
}

USEParser::LogicalExprContext::LogicalExprContext(ExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::LogicalExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalExpr(this);
}
void USEParser::LogicalExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalExpr(this);
}

std::any USEParser::LogicalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLogicalExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::ExpressionContext* USEParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 46, USEParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(504);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__40:
      case USEParser::T__43:
      case USEParser::T__44:
      case USEParser::T__45:
      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48:
      case USEParser::T__49:
      case USEParser::T__50:
      case USEParser::T__51:
      case USEParser::T__52:
      case USEParser::T__53:
      case USEParser::T__54:
      case USEParser::T__55:
      case USEParser::T__56:
      case USEParser::T__61:
      case USEParser::T__62:
      case USEParser::T__63:
      case USEParser::T__64:
      case USEParser::T__65:
      case USEParser::T__66:
      case USEParser::T__67:
      case USEParser::T__68:
      case USEParser::T__69:
      case USEParser::T__70:
      case USEParser::T__71:
      case USEParser::T__72:
      case USEParser::AT:
      case USEParser::HASH:
      case USEParser::LPAREN:
      case USEParser::MINUS:
      case USEParser::PLUS:
      case USEParser::STAR:
      case USEParser::INT:
      case USEParser::REAL:
      case USEParser::STRING:
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::LogicalExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(500);
        logicalExpression(0);
        break;
      }

      case USEParser::T__57: {
        _localctx = _tracker.createInstance<USEParser::ConditionalExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(501);
        conditionalExpression();
        break;
      }

      case USEParser::T__30: {
        _localctx = _tracker.createInstance<USEParser::LambdaExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(502);
        lambdaExpression();
        break;
      }

      case USEParser::T__32: {
        _localctx = _tracker.createInstance<USEParser::LetExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(503);
        letExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

USEParser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::LambdaExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::LambdaExpressionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::LambdaExpressionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

USEParser::ExpressionContext* USEParser::LambdaExpressionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::LambdaExpressionContext::getRuleIndex() const {
  return USEParser::RuleLambdaExpression;
}

void USEParser::LambdaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaExpression(this);
}

void USEParser::LambdaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaExpression(this);
}


std::any USEParser::LambdaExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLambdaExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::LambdaExpressionContext* USEParser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 48, USEParser::RuleLambdaExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    match(USEParser::T__30);
    setState(507);
    match(USEParser::ID);
    setState(508);
    match(USEParser::COLON);
    setState(509);
    type();
    setState(510);
    match(USEParser::T__31);
    setState(511);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetExpressionContext ------------------------------------------------------------------

USEParser::LetExpressionContext::LetExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::LetExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::LetExpressionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

std::vector<USEParser::ExpressionContext *> USEParser::LetExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::LetExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

tree::TerminalNode* USEParser::LetExpressionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::LetExpressionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::LetExpressionContext::getRuleIndex() const {
  return USEParser::RuleLetExpression;
}

void USEParser::LetExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLetExpression(this);
}

void USEParser::LetExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLetExpression(this);
}


std::any USEParser::LetExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLetExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::LetExpressionContext* USEParser::letExpression() {
  LetExpressionContext *_localctx = _tracker.createInstance<LetExpressionContext>(_ctx, getState());
  enterRule(_localctx, 50, USEParser::RuleLetExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(513);
    match(USEParser::T__32);
    setState(514);
    match(USEParser::ID);
    setState(517);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(515);
      match(USEParser::COLON);
      setState(516);
      type();
    }
    setState(519);
    match(USEParser::EQUAL);
    setState(520);
    expression();
    setState(521);
    match(USEParser::T__31);
    setState(522);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalExpressionContext ------------------------------------------------------------------

USEParser::LogicalExpressionContext::LogicalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::LogicalExpressionContext::getRuleIndex() const {
  return USEParser::RuleLogicalExpression;
}

void USEParser::LogicalExpressionContext::copyFrom(LogicalExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AndExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::AndExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::AndExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::AndExprContext::AndExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::AndExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndExpr(this);
}
void USEParser::AndExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndExpr(this);
}

std::any USEParser::AndExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAndExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- EqualityExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::EqualityExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

USEParser::EqualityExprContext::EqualityExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::EqualityExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpr(this);
}
void USEParser::EqualityExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpr(this);
}

std::any USEParser::EqualityExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEqualityExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- XorExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::XorExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::XorExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::XorExprContext::XorExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::XorExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterXorExpr(this);
}
void USEParser::XorExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitXorExpr(this);
}

std::any USEParser::XorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitXorExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ImpliesExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::ImpliesExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::ImpliesExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::ImpliesExprContext::ImpliesExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::ImpliesExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImpliesExpr(this);
}
void USEParser::ImpliesExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImpliesExpr(this);
}

std::any USEParser::ImpliesExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitImpliesExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OrExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::OrExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::OrExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::OrExprContext::OrExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::OrExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrExpr(this);
}
void USEParser::OrExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrExpr(this);
}

std::any USEParser::OrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOrExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::LogicalExpressionContext* USEParser::logicalExpression() {
   return logicalExpression(0);
}

USEParser::LogicalExpressionContext* USEParser::logicalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::LogicalExpressionContext *_localctx = _tracker.createInstance<LogicalExpressionContext>(_ctx, parentState);
  USEParser::LogicalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 52;
  enterRecursionRule(_localctx, 52, USEParser::RuleLogicalExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<EqualityExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(525);
    equalityExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(547);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(545);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<AndExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(527);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(528);
          match(USEParser::T__33);
          setState(529);
          logicalExpression(8);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<AndExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(530);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(531);
          match(USEParser::T__34);
          setState(532);
          logicalExpression(7);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<OrExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(533);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(534);
          match(USEParser::T__35);
          setState(535);
          logicalExpression(6);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<XorExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(536);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(537);
          match(USEParser::T__36);
          setState(538);
          logicalExpression(5);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ImpliesExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(539);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(540);
          match(USEParser::T__37);
          setState(541);
          logicalExpression(4);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ImpliesExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(542);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(543);
          match(USEParser::T__38);
          setState(544);
          logicalExpression(3);
          break;
        }

        default:
          break;
        } 
      }
      setState(549);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParamListContext ------------------------------------------------------------------

USEParser::ParamListContext::ParamListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ParamListContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::ParamListContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<USEParser::VariableDeclarationContext *> USEParser::ParamListContext::variableDeclaration() {
  return getRuleContexts<USEParser::VariableDeclarationContext>();
}

USEParser::VariableDeclarationContext* USEParser::ParamListContext::variableDeclaration(size_t i) {
  return getRuleContext<USEParser::VariableDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::ParamListContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::ParamListContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::ParamListContext::getRuleIndex() const {
  return USEParser::RuleParamList;
}

void USEParser::ParamListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParamList(this);
}

void USEParser::ParamListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParamList(this);
}


std::any USEParser::ParamListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitParamList(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ParamListContext* USEParser::paramList() {
  ParamListContext *_localctx = _tracker.createInstance<ParamListContext>(_ctx, getState());
  enterRule(_localctx, 54, USEParser::RuleParamList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(550);
    match(USEParser::LPAREN);
    setState(559);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ID) {
      setState(551);
      variableDeclaration();
      setState(556);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(552);
        match(USEParser::COMMA);
        setState(553);
        variableDeclaration();
        setState(558);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(561);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdListContext ------------------------------------------------------------------

USEParser::IdListContext::IdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::IdListContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::IdListContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

std::vector<tree::TerminalNode *> USEParser::IdListContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::IdListContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::IdListContext::getRuleIndex() const {
  return USEParser::RuleIdList;
}

void USEParser::IdListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdList(this);
}

void USEParser::IdListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdList(this);
}


std::any USEParser::IdListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIdList(this);
  else
    return visitor->visitChildren(this);
}

USEParser::IdListContext* USEParser::idList() {
  IdListContext *_localctx = _tracker.createInstance<IdListContext>(_ctx, getState());
  enterRule(_localctx, 56, USEParser::RuleIdList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(563);
    match(USEParser::ID);
    setState(568);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(564);
      match(USEParser::COMMA);
      setState(565);
      match(USEParser::ID);
      setState(570);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationContext ------------------------------------------------------------------

USEParser::VariableDeclarationContext::VariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::VariableDeclarationContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::VariableDeclarationContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::VariableDeclarationContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::VariableDeclarationContext::getRuleIndex() const {
  return USEParser::RuleVariableDeclaration;
}

void USEParser::VariableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableDeclaration(this);
}

void USEParser::VariableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableDeclaration(this);
}


std::any USEParser::VariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

USEParser::VariableDeclarationContext* USEParser::variableDeclaration() {
  VariableDeclarationContext *_localctx = _tracker.createInstance<VariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 58, USEParser::RuleVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(571);
    match(USEParser::ID);
    setState(572);
    match(USEParser::COLON);
    setState(573);
    type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::EqualityExpressionContext::getRuleIndex() const {
  return USEParser::RuleEqualityExpression;
}

void USEParser::EqualityExpressionContext::copyFrom(EqualityExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EqualExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::EqualExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

tree::TerminalNode* USEParser::EqualExprContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::RelationalExpressionContext* USEParser::EqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::EqualExprContext::EqualExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::EqualExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualExpr(this);
}
void USEParser::EqualExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualExpr(this);
}

std::any USEParser::EqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEqualExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelationalExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::RelationalExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::RelationalExprContext::RelationalExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::RelationalExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpr(this);
}
void USEParser::RelationalExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpr(this);
}

std::any USEParser::RelationalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRelationalExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotEqualExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::NotEqualExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

tree::TerminalNode* USEParser::NotEqualExprContext::NOT_EQUAL() {
  return getToken(USEParser::NOT_EQUAL, 0);
}

USEParser::RelationalExpressionContext* USEParser::NotEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::NotEqualExprContext::NotEqualExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::NotEqualExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotEqualExpr(this);
}
void USEParser::NotEqualExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotEqualExpr(this);
}

std::any USEParser::NotEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitNotEqualExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EqualityExpressionContext* USEParser::equalityExpression() {
   return equalityExpression(0);
}

USEParser::EqualityExpressionContext* USEParser::equalityExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, parentState);
  USEParser::EqualityExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 60;
  enterRecursionRule(_localctx, 60, USEParser::RuleEqualityExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<RelationalExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(576);
    relationalExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(586);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(584);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<EqualExprContext>(_tracker.createInstance<EqualityExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleEqualityExpression);
          setState(578);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(579);
          match(USEParser::EQUAL);
          setState(580);
          relationalExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<NotEqualExprContext>(_tracker.createInstance<EqualityExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleEqualityExpression);
          setState(581);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(582);
          match(USEParser::NOT_EQUAL);
          setState(583);
          relationalExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(588);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::RelationalExpressionContext::getRuleIndex() const {
  return USEParser::RuleRelationalExpression;
}

void USEParser::RelationalExpressionContext::copyFrom(RelationalExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LessThanOrEqualExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::LessThanOrEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::LessThanOrEqualExprContext::LESS_EQUAL() {
  return getToken(USEParser::LESS_EQUAL, 0);
}

USEParser::AdditiveExpressionContext* USEParser::LessThanOrEqualExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::LessThanOrEqualExprContext::LessThanOrEqualExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::LessThanOrEqualExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLessThanOrEqualExpr(this);
}
void USEParser::LessThanOrEqualExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLessThanOrEqualExpr(this);
}

std::any USEParser::LessThanOrEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLessThanOrEqualExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GreaterThanExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::GreaterThanExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::GreaterThanExprContext::GREATER() {
  return getToken(USEParser::GREATER, 0);
}

USEParser::AdditiveExpressionContext* USEParser::GreaterThanExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::GreaterThanExprContext::GreaterThanExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::GreaterThanExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGreaterThanExpr(this);
}
void USEParser::GreaterThanExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGreaterThanExpr(this);
}

std::any USEParser::GreaterThanExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitGreaterThanExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AdditiveExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::AdditiveExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::AdditiveExprContext::AdditiveExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::AdditiveExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpr(this);
}
void USEParser::AdditiveExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpr(this);
}

std::any USEParser::AdditiveExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LessThanExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::LessThanExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::LessThanExprContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::AdditiveExpressionContext* USEParser::LessThanExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::LessThanExprContext::LessThanExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::LessThanExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLessThanExpr(this);
}
void USEParser::LessThanExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLessThanExpr(this);
}

std::any USEParser::LessThanExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLessThanExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GreaterThanOrEqualExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::GreaterThanOrEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::GreaterThanOrEqualExprContext::GREATER_EQUAL() {
  return getToken(USEParser::GREATER_EQUAL, 0);
}

USEParser::AdditiveExpressionContext* USEParser::GreaterThanOrEqualExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::GreaterThanOrEqualExprContext::GreaterThanOrEqualExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::GreaterThanOrEqualExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGreaterThanOrEqualExpr(this);
}
void USEParser::GreaterThanOrEqualExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGreaterThanOrEqualExpr(this);
}

std::any USEParser::GreaterThanOrEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitGreaterThanOrEqualExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::RelationalExpressionContext* USEParser::relationalExpression() {
   return relationalExpression(0);
}

USEParser::RelationalExpressionContext* USEParser::relationalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, parentState);
  USEParser::RelationalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 62;
  enterRecursionRule(_localctx, 62, USEParser::RuleRelationalExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<AdditiveExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(590);
    additiveExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(606);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(604);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<LessThanExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(592);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(593);
          match(USEParser::LESS);
          setState(594);
          additiveExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<GreaterThanExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(595);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(596);
          match(USEParser::GREATER);
          setState(597);
          additiveExpression(0);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<LessThanOrEqualExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(598);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(599);
          match(USEParser::LESS_EQUAL);
          setState(600);
          additiveExpression(0);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<GreaterThanOrEqualExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(601);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(602);
          match(USEParser::GREATER_EQUAL);
          setState(603);
          additiveExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(608);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::AdditiveExpressionContext::getRuleIndex() const {
  return USEParser::RuleAdditiveExpression;
}

void USEParser::AdditiveExpressionContext::copyFrom(AdditiveExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AdditionExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::AdditionExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* USEParser::AdditionExprContext::PLUS() {
  return getToken(USEParser::PLUS, 0);
}

USEParser::FactorExpressionContext* USEParser::AdditionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::AdditionExprContext::AdditionExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::AdditionExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditionExpr(this);
}
void USEParser::AdditionExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditionExpr(this);
}

std::any USEParser::AdditionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAdditionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubtractionExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::SubtractionExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* USEParser::SubtractionExprContext::MINUS() {
  return getToken(USEParser::MINUS, 0);
}

USEParser::FactorExpressionContext* USEParser::SubtractionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::SubtractionExprContext::SubtractionExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::SubtractionExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubtractionExpr(this);
}
void USEParser::SubtractionExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubtractionExpr(this);
}

std::any USEParser::SubtractionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSubtractionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FactorExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::FactorExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::FactorExprContext::FactorExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::FactorExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFactorExpr(this);
}
void USEParser::FactorExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFactorExpr(this);
}

std::any USEParser::FactorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitFactorExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AdditiveExpressionContext* USEParser::additiveExpression() {
   return additiveExpression(0);
}

USEParser::AdditiveExpressionContext* USEParser::additiveExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, parentState);
  USEParser::AdditiveExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 64;
  enterRecursionRule(_localctx, 64, USEParser::RuleAdditiveExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<FactorExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(610);
    factorExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(620);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(618);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<AdditionExprContext>(_tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleAdditiveExpression);
          setState(612);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(613);
          match(USEParser::PLUS);
          setState(614);
          factorExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<SubtractionExprContext>(_tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleAdditiveExpression);
          setState(615);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(616);
          match(USEParser::MINUS);
          setState(617);
          factorExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(622);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FactorExpressionContext ------------------------------------------------------------------

USEParser::FactorExpressionContext::FactorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::FactorExpressionContext::getRuleIndex() const {
  return USEParser::RuleFactorExpression;
}

void USEParser::FactorExpressionContext::copyFrom(FactorExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DivisionExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::DivisionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::UnaryExpressionContext* USEParser::DivisionExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* USEParser::DivisionExprContext::SLASH() {
  return getToken(USEParser::SLASH, 0);
}

USEParser::DivisionExprContext::DivisionExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::DivisionExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDivisionExpr(this);
}
void USEParser::DivisionExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDivisionExpr(this);
}

std::any USEParser::DivisionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitDivisionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MultiplicationExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::MultiplicationExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

tree::TerminalNode* USEParser::MultiplicationExprContext::STAR() {
  return getToken(USEParser::STAR, 0);
}

USEParser::UnaryExpressionContext* USEParser::MultiplicationExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::MultiplicationExprContext::MultiplicationExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::MultiplicationExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicationExpr(this);
}
void USEParser::MultiplicationExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicationExpr(this);
}

std::any USEParser::MultiplicationExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicationExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExprContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext* USEParser::UnaryExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::UnaryExprContext::UnaryExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::UnaryExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpr(this);
}
void USEParser::UnaryExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpr(this);
}

std::any USEParser::UnaryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUnaryExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::FactorExpressionContext* USEParser::factorExpression() {
   return factorExpression(0);
}

USEParser::FactorExpressionContext* USEParser::factorExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::FactorExpressionContext *_localctx = _tracker.createInstance<FactorExpressionContext>(_ctx, parentState);
  USEParser::FactorExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 66;
  enterRecursionRule(_localctx, 66, USEParser::RuleFactorExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<UnaryExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(624);
    unaryExpression();
    _ctx->stop = _input->LT(-1);
    setState(634);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(632);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<MultiplicationExprContext>(_tracker.createInstance<FactorExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleFactorExpression);
          setState(626);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(627);
          match(USEParser::STAR);
          setState(628);
          unaryExpression();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<DivisionExprContext>(_tracker.createInstance<FactorExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleFactorExpression);
          setState(629);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(630);
          _la = _input->LA(1);
          if (!(_la == USEParser::T__39

          || _la == USEParser::SLASH)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(631);
          unaryExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(636);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::UnaryExpressionContext::getRuleIndex() const {
  return USEParser::RuleUnaryExpression;
}

void USEParser::UnaryExpressionContext::copyFrom(UnaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PostfixExprContext ------------------------------------------------------------------

USEParser::PostfixExpressionContext* USEParser::PostfixExprContext::postfixExpression() {
  return getRuleContext<USEParser::PostfixExpressionContext>(0);
}

USEParser::PostfixExprContext::PostfixExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::PostfixExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpr(this);
}
void USEParser::PostfixExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpr(this);
}

std::any USEParser::PostfixExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPostfixExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PlusExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PlusExprContext::PLUS() {
  return getToken(USEParser::PLUS, 0);
}

USEParser::UnaryExpressionContext* USEParser::PlusExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::PlusExprContext::PlusExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::PlusExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlusExpr(this);
}
void USEParser::PlusExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlusExpr(this);
}

std::any USEParser::PlusExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPlusExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotExprContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext* USEParser::NotExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::NotExprContext::NotExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::NotExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNotExpr(this);
}
void USEParser::NotExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNotExpr(this);
}

std::any USEParser::NotExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitNotExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MinusExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::MinusExprContext::MINUS() {
  return getToken(USEParser::MINUS, 0);
}

USEParser::UnaryExpressionContext* USEParser::MinusExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::MinusExprContext::MinusExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::MinusExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMinusExpr(this);
}
void USEParser::MinusExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMinusExpr(this);
}

std::any USEParser::MinusExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMinusExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::UnaryExpressionContext* USEParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 68, USEParser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(644);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__40: {
        _localctx = _tracker.createInstance<USEParser::NotExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(637);
        match(USEParser::T__40);
        setState(638);
        unaryExpression();
        break;
      }

      case USEParser::MINUS: {
        _localctx = _tracker.createInstance<USEParser::MinusExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(639);
        match(USEParser::MINUS);
        setState(640);
        unaryExpression();
        break;
      }

      case USEParser::PLUS: {
        _localctx = _tracker.createInstance<USEParser::PlusExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(641);
        match(USEParser::PLUS);
        setState(642);
        unaryExpression();
        break;
      }

      case USEParser::T__43:
      case USEParser::T__44:
      case USEParser::T__45:
      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48:
      case USEParser::T__49:
      case USEParser::T__50:
      case USEParser::T__51:
      case USEParser::T__52:
      case USEParser::T__53:
      case USEParser::T__54:
      case USEParser::T__55:
      case USEParser::T__56:
      case USEParser::T__61:
      case USEParser::T__62:
      case USEParser::T__63:
      case USEParser::T__64:
      case USEParser::T__65:
      case USEParser::T__66:
      case USEParser::T__67:
      case USEParser::T__68:
      case USEParser::T__69:
      case USEParser::T__70:
      case USEParser::T__71:
      case USEParser::T__72:
      case USEParser::AT:
      case USEParser::HASH:
      case USEParser::LPAREN:
      case USEParser::STAR:
      case USEParser::INT:
      case USEParser::REAL:
      case USEParser::STRING:
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::PostfixExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(643);
        postfixExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

USEParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PostfixExpressionContext::getRuleIndex() const {
  return USEParser::RulePostfixExpression;
}

void USEParser::PostfixExpressionContext::copyFrom(PostfixExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PropertyCallExprContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext* USEParser::PropertyCallExprContext::primaryExpression() {
  return getRuleContext<USEParser::PrimaryExpressionContext>(0);
}

std::vector<USEParser::PropertyCallContext *> USEParser::PropertyCallExprContext::propertyCall() {
  return getRuleContexts<USEParser::PropertyCallContext>();
}

USEParser::PropertyCallContext* USEParser::PropertyCallExprContext::propertyCall(size_t i) {
  return getRuleContext<USEParser::PropertyCallContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::PropertyCallExprContext::DOT() {
  return getTokens(USEParser::DOT);
}

tree::TerminalNode* USEParser::PropertyCallExprContext::DOT(size_t i) {
  return getToken(USEParser::DOT, i);
}

std::vector<tree::TerminalNode *> USEParser::PropertyCallExprContext::ARROW() {
  return getTokens(USEParser::ARROW);
}

tree::TerminalNode* USEParser::PropertyCallExprContext::ARROW(size_t i) {
  return getToken(USEParser::ARROW, i);
}

USEParser::PropertyCallExprContext::PropertyCallExprContext(PostfixExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::PropertyCallExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPropertyCallExpr(this);
}
void USEParser::PropertyCallExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPropertyCallExpr(this);
}

std::any USEParser::PropertyCallExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPropertyCallExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryExprContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext* USEParser::PrimaryExprContext::primaryExpression() {
  return getRuleContext<USEParser::PrimaryExpressionContext>(0);
}

USEParser::PrimaryExprContext::PrimaryExprContext(PostfixExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::PrimaryExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryExpr(this);
}
void USEParser::PrimaryExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryExpr(this);
}

std::any USEParser::PrimaryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPrimaryExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PostfixExpressionContext* USEParser::postfixExpression() {
  PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 70, USEParser::RulePostfixExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(654);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::PrimaryExprContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(646);
      primaryExpression();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::PropertyCallExprContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(647);
      primaryExpression();
      setState(650); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(648);
                _la = _input->LA(1);
                if (!(_la == USEParser::ARROW

                || _la == USEParser::DOT)) {
                _errHandler->recoverInline(this);
                }
                else {
                  _errHandler->reportMatch(this);
                  consume();
                }
                setState(649);
                propertyCall();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(652); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PrimaryExpressionContext::getRuleIndex() const {
  return USEParser::RulePrimaryExpression;
}

void USEParser::PrimaryExpressionContext::copyFrom(PrimaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EmptyPropertyCallExprContext ------------------------------------------------------------------

USEParser::PropertyCallContext* USEParser::EmptyPropertyCallExprContext::propertyCall() {
  return getRuleContext<USEParser::PropertyCallContext>(0);
}

USEParser::EmptyPropertyCallExprContext::EmptyPropertyCallExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::EmptyPropertyCallExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyPropertyCallExpr(this);
}
void USEParser::EmptyPropertyCallExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyPropertyCallExpr(this);
}

std::any USEParser::EmptyPropertyCallExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEmptyPropertyCallExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ByUseIdExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ByUseIdExprContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::DOT() {
  return getToken(USEParser::DOT, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ByUseIdExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::AT() {
  return getToken(USEParser::AT, 0);
}

USEParser::ByUseIdExprContext::ByUseIdExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::ByUseIdExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterByUseIdExpr(this);
}
void USEParser::ByUseIdExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitByUseIdExpr(this);
}

std::any USEParser::ByUseIdExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitByUseIdExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralExprContext ------------------------------------------------------------------

USEParser::LiteralContext* USEParser::LiteralExprContext::literal() {
  return getRuleContext<USEParser::LiteralContext>(0);
}

USEParser::LiteralExprContext::LiteralExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralExpr(this);
}
void USEParser::LiteralExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralExpr(this);
}

std::any USEParser::LiteralExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ParenthesizedExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ParenthesizedExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ParenthesizedExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ParenthesizedExprContext::ParenthesizedExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::ParenthesizedExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesizedExpr(this);
}
void USEParser::ParenthesizedExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesizedExpr(this);
}

std::any USEParser::ParenthesizedExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitParenthesizedExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AllInstancesExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::AllInstancesExprContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::DOT() {
  return getToken(USEParser::DOT, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::AllInstancesExprContext::AllInstancesExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::AllInstancesExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAllInstancesExpr(this);
}
void USEParser::AllInstancesExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAllInstancesExpr(this);
}

std::any USEParser::AllInstancesExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAllInstancesExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ObjectReferenceExprContext ------------------------------------------------------------------

USEParser::ObjectReferenceContext* USEParser::ObjectReferenceExprContext::objectReference() {
  return getRuleContext<USEParser::ObjectReferenceContext>(0);
}

USEParser::ObjectReferenceExprContext::ObjectReferenceExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::ObjectReferenceExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectReferenceExpr(this);
}
void USEParser::ObjectReferenceExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectReferenceExpr(this);
}

std::any USEParser::ObjectReferenceExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitObjectReferenceExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PrimaryExpressionContext* USEParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, USEParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(684);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::LiteralExprContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(656);
      literal();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::ObjectReferenceExprContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(657);
      objectReference();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::EmptyPropertyCallExprContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(658);
      propertyCall();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::ParenthesizedExprContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(659);
      match(USEParser::LPAREN);
      setState(660);
      expression();
      setState(661);
      match(USEParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::AllInstancesExprContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(663);
      match(USEParser::ID);
      setState(664);
      match(USEParser::DOT);
      setState(665);
      match(USEParser::T__41);
      setState(668);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
      case 1: {
        setState(666);
        match(USEParser::AT);
        setState(667);
        match(USEParser::T__25);
        break;
      }

      default:
        break;
      }
      setState(672);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
      case 1: {
        setState(670);
        match(USEParser::LPAREN);
        setState(671);
        match(USEParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<USEParser::ByUseIdExprContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(674);
      match(USEParser::ID);
      setState(675);
      match(USEParser::DOT);
      setState(676);
      match(USEParser::T__42);
      setState(677);
      match(USEParser::LPAREN);
      setState(678);
      expression();
      setState(679);
      match(USEParser::RPAREN);
      setState(682);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
      case 1: {
        setState(680);
        match(USEParser::AT);
        setState(681);
        match(USEParser::T__25);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectReferenceContext ------------------------------------------------------------------

USEParser::ObjectReferenceContext::ObjectReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ObjectReferenceContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::ObjectReferenceContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::ObjectReferenceContext::getRuleIndex() const {
  return USEParser::RuleObjectReference;
}

void USEParser::ObjectReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterObjectReference(this);
}

void USEParser::ObjectReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitObjectReference(this);
}


std::any USEParser::ObjectReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitObjectReference(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ObjectReferenceContext* USEParser::objectReference() {
  ObjectReferenceContext *_localctx = _tracker.createInstance<ObjectReferenceContext>(_ctx, getState());
  enterRule(_localctx, 74, USEParser::RuleObjectReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(686);
    match(USEParser::AT);
    setState(687);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyCallContext ------------------------------------------------------------------

USEParser::PropertyCallContext::PropertyCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PropertyCallContext::getRuleIndex() const {
  return USEParser::RulePropertyCall;
}

void USEParser::PropertyCallContext::copyFrom(PropertyCallContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QueryExprContext ------------------------------------------------------------------

USEParser::QueryExpressionContext* USEParser::QueryExprContext::queryExpression() {
  return getRuleContext<USEParser::QueryExpressionContext>(0);
}

USEParser::QueryExprContext::QueryExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }

void USEParser::QueryExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryExpr(this);
}
void USEParser::QueryExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryExpr(this);
}

std::any USEParser::QueryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitQueryExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OperationExprContext ------------------------------------------------------------------

USEParser::OperationExpressionContext* USEParser::OperationExprContext::operationExpression() {
  return getRuleContext<USEParser::OperationExpressionContext>(0);
}

USEParser::OperationExprContext::OperationExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }

void USEParser::OperationExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperationExpr(this);
}
void USEParser::OperationExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperationExpr(this);
}

std::any USEParser::OperationExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IterateExprContext ------------------------------------------------------------------

USEParser::IterateExpressionContext* USEParser::IterateExprContext::iterateExpression() {
  return getRuleContext<USEParser::IterateExpressionContext>(0);
}

USEParser::IterateExprContext::IterateExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }

void USEParser::IterateExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterateExpr(this);
}
void USEParser::IterateExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterateExpr(this);
}

std::any USEParser::IterateExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIterateExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeExprContext ------------------------------------------------------------------

USEParser::TypeExpressionContext* USEParser::TypeExprContext::typeExpression() {
  return getRuleContext<USEParser::TypeExpressionContext>(0);
}

USEParser::TypeExprContext::TypeExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }

void USEParser::TypeExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeExpr(this);
}
void USEParser::TypeExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeExpr(this);
}

std::any USEParser::TypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InStateExprContext ------------------------------------------------------------------

USEParser::InStateExpressionContext* USEParser::InStateExprContext::inStateExpression() {
  return getRuleContext<USEParser::InStateExpressionContext>(0);
}

USEParser::InStateExprContext::InStateExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }

void USEParser::InStateExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInStateExpr(this);
}
void USEParser::InStateExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInStateExpr(this);
}

std::any USEParser::InStateExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInStateExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PropertyCallContext* USEParser::propertyCall() {
  PropertyCallContext *_localctx = _tracker.createInstance<PropertyCallContext>(_ctx, getState());
  enterRule(_localctx, 76, USEParser::RulePropertyCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(694);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__43:
      case USEParser::T__44:
      case USEParser::T__45:
      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48:
      case USEParser::T__49: {
        _localctx = _tracker.createInstance<USEParser::QueryExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(689);
        queryExpression();
        break;
      }

      case USEParser::T__50: {
        _localctx = _tracker.createInstance<USEParser::IterateExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(690);
        iterateExpression();
        break;
      }

      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::OperationExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(691);
        operationExpression();
        break;
      }

      case USEParser::T__52:
      case USEParser::T__53:
      case USEParser::T__54:
      case USEParser::T__55:
      case USEParser::T__56: {
        _localctx = _tracker.createInstance<USEParser::TypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(692);
        typeExpression();
        break;
      }

      case USEParser::T__51: {
        _localctx = _tracker.createInstance<USEParser::InStateExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(693);
        inStateExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryExpressionContext ------------------------------------------------------------------

USEParser::QueryExpressionContext::QueryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::QueryExpressionContext::getRuleIndex() const {
  return USEParser::RuleQueryExpression;
}

void USEParser::QueryExpressionContext::copyFrom(QueryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- IsUniqueExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::IsUniqueExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::IsUniqueExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::IsUniqueExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::IsUniqueExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::IsUniqueExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::IsUniqueExprContext::IsUniqueExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::IsUniqueExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsUniqueExpr(this);
}
void USEParser::IsUniqueExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsUniqueExpr(this);
}

std::any USEParser::IsUniqueExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIsUniqueExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SortedByExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SortedByExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::SortedByExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::SortedByExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::SortedByExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::SortedByExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::SortedByExprContext::SortedByExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::SortedByExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortedByExpr(this);
}
void USEParser::SortedByExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortedByExpr(this);
}

std::any USEParser::SortedByExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSortedByExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::SelectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::SelectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::SelectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::SelectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::SelectExprContext::SelectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::SelectExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectExpr(this);
}
void USEParser::SelectExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectExpr(this);
}

std::any USEParser::SelectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CollectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::CollectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::CollectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::CollectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::CollectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::CollectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::CollectExprContext::CollectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::CollectExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollectExpr(this);
}
void USEParser::CollectExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollectExpr(this);
}

std::any USEParser::CollectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitCollectExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ForAllExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ForAllExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ForAllExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ForAllExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::ForAllExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::ForAllExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ForAllExprContext::ForAllExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::ForAllExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForAllExpr(this);
}
void USEParser::ForAllExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForAllExpr(this);
}

std::any USEParser::ForAllExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitForAllExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExistsExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ExistsExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ExistsExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ExistsExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::ExistsExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::ExistsExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ExistsExprContext::ExistsExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::ExistsExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExistsExpr(this);
}
void USEParser::ExistsExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExistsExpr(this);
}

std::any USEParser::ExistsExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitExistsExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RejectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::RejectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::RejectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::RejectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::RejectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::RejectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::RejectExprContext::RejectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::RejectExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRejectExpr(this);
}
void USEParser::RejectExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRejectExpr(this);
}

std::any USEParser::RejectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRejectExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::QueryExpressionContext* USEParser::queryExpression() {
  QueryExpressionContext *_localctx = _tracker.createInstance<QueryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 78, USEParser::RuleQueryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(766);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__43: {
        _localctx = _tracker.createInstance<USEParser::SelectExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(696);
        match(USEParser::T__43);
        setState(697);
        match(USEParser::LPAREN);
        setState(701);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
        case 1: {
          setState(698);
          elemVarsDeclaration();
          setState(699);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(703);
        expression();
        setState(704);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__44: {
        _localctx = _tracker.createInstance<USEParser::RejectExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(706);
        match(USEParser::T__44);
        setState(707);
        match(USEParser::LPAREN);
        setState(711);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
        case 1: {
          setState(708);
          elemVarsDeclaration();
          setState(709);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(713);
        expression();
        setState(714);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__45: {
        _localctx = _tracker.createInstance<USEParser::CollectExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(716);
        match(USEParser::T__45);
        setState(717);
        match(USEParser::LPAREN);
        setState(721);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
        case 1: {
          setState(718);
          elemVarsDeclaration();
          setState(719);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(723);
        expression();
        setState(724);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__46: {
        _localctx = _tracker.createInstance<USEParser::ExistsExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(726);
        match(USEParser::T__46);
        setState(727);
        match(USEParser::LPAREN);
        setState(731);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
        case 1: {
          setState(728);
          elemVarsDeclaration();
          setState(729);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(733);
        expression();
        setState(734);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__47: {
        _localctx = _tracker.createInstance<USEParser::ForAllExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(736);
        match(USEParser::T__47);
        setState(737);
        match(USEParser::LPAREN);
        setState(741);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
        case 1: {
          setState(738);
          elemVarsDeclaration();
          setState(739);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(743);
        expression();
        setState(744);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__48: {
        _localctx = _tracker.createInstance<USEParser::IsUniqueExprContext>(_localctx);
        enterOuterAlt(_localctx, 6);
        setState(746);
        match(USEParser::T__48);
        setState(747);
        match(USEParser::LPAREN);
        setState(751);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
        case 1: {
          setState(748);
          elemVarsDeclaration();
          setState(749);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(753);
        expression();
        setState(754);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__49: {
        _localctx = _tracker.createInstance<USEParser::SortedByExprContext>(_localctx);
        enterOuterAlt(_localctx, 7);
        setState(756);
        match(USEParser::T__49);
        setState(757);
        match(USEParser::LPAREN);
        setState(761);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
        case 1: {
          setState(758);
          elemVarsDeclaration();
          setState(759);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(763);
        expression();
        setState(764);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterateExpressionContext ------------------------------------------------------------------

USEParser::IterateExpressionContext::IterateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::IterateExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::IterateExpressionContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

USEParser::VariableInitializationContext* USEParser::IterateExpressionContext::variableInitialization() {
  return getRuleContext<USEParser::VariableInitializationContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ExpressionContext* USEParser::IterateExpressionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::IterateExpressionContext::getRuleIndex() const {
  return USEParser::RuleIterateExpression;
}

void USEParser::IterateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterateExpression(this);
}

void USEParser::IterateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterateExpression(this);
}


std::any USEParser::IterateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIterateExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::IterateExpressionContext* USEParser::iterateExpression() {
  IterateExpressionContext *_localctx = _tracker.createInstance<IterateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, USEParser::RuleIterateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(768);
    match(USEParser::T__50);
    setState(769);
    match(USEParser::LPAREN);
    setState(770);
    elemVarsDeclaration();
    setState(771);
    match(USEParser::SEMI);
    setState(772);
    variableInitialization();
    setState(773);
    match(USEParser::BAR);
    setState(774);
    expression();
    setState(775);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperationExpressionContext ------------------------------------------------------------------

USEParser::OperationExpressionContext::OperationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::OperationExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::LBRACK() {
  return getTokens(USEParser::LBRACK);
}

tree::TerminalNode* USEParser::OperationExpressionContext::LBRACK(size_t i) {
  return getToken(USEParser::LBRACK, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::OperationExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::OperationExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::RBRACK() {
  return getTokens(USEParser::RBRACK);
}

tree::TerminalNode* USEParser::OperationExpressionContext::RBRACK(size_t i) {
  return getToken(USEParser::RBRACK, i);
}

tree::TerminalNode* USEParser::OperationExpressionContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::OperationExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::OperationExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::OperationExpressionContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::OperationExpressionContext::getRuleIndex() const {
  return USEParser::RuleOperationExpression;
}

void USEParser::OperationExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperationExpression(this);
}

void USEParser::OperationExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperationExpression(this);
}


std::any USEParser::OperationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::OperationExpressionContext* USEParser::operationExpression() {
  OperationExpressionContext *_localctx = _tracker.createInstance<OperationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, USEParser::RuleOperationExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(777);
    match(USEParser::ID);
    setState(801);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      setState(778);
      match(USEParser::LBRACK);
      setState(779);
      expression();
      setState(784);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(780);
        match(USEParser::COMMA);
        setState(781);
        expression();
        setState(786);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(787);
      match(USEParser::RBRACK);
      setState(799);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
      case 1: {
        setState(788);
        match(USEParser::LBRACK);
        setState(789);
        expression();
        setState(794);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == USEParser::COMMA) {
          setState(790);
          match(USEParser::COMMA);
          setState(791);
          expression();
          setState(796);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(797);
        match(USEParser::RBRACK);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(805);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(803);
      match(USEParser::AT);
      setState(804);
      match(USEParser::T__25);
      break;
    }

    default:
      break;
    }
    setState(819);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(807);
      match(USEParser::LPAREN);
      setState(816);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -4035240648549335040) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 95119600534527) != 0)) {
        setState(808);
        expression();
        setState(813);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == USEParser::COMMA) {
          setState(809);
          match(USEParser::COMMA);
          setState(810);
          expression();
          setState(815);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(818);
      match(USEParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InStateExpressionContext ------------------------------------------------------------------

USEParser::InStateExpressionContext::InStateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::InStateExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::InStateExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::InStateExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::InStateExpressionContext::getRuleIndex() const {
  return USEParser::RuleInStateExpression;
}

void USEParser::InStateExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInStateExpression(this);
}

void USEParser::InStateExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInStateExpression(this);
}


std::any USEParser::InStateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInStateExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InStateExpressionContext* USEParser::inStateExpression() {
  InStateExpressionContext *_localctx = _tracker.createInstance<InStateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, USEParser::RuleInStateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(821);
    match(USEParser::T__51);
    setState(822);
    match(USEParser::LPAREN);
    setState(823);
    match(USEParser::ID);
    setState(824);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeExpressionContext ------------------------------------------------------------------

USEParser::TypeExpressionContext::TypeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TypeExpressionContext::getRuleIndex() const {
  return USEParser::RuleTypeExpression;
}

void USEParser::TypeExpressionContext::copyFrom(TypeExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- OclIsTypeOfExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclIsTypeOfExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclIsTypeOfExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclIsTypeOfExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclIsTypeOfExprContext::OclIsTypeOfExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::OclIsTypeOfExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOclIsTypeOfExpr(this);
}
void USEParser::OclIsTypeOfExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOclIsTypeOfExpr(this);
}

std::any USEParser::OclIsTypeOfExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclIsTypeOfExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OclIsKindOfExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclIsKindOfExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclIsKindOfExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclIsKindOfExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclIsKindOfExprContext::OclIsKindOfExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::OclIsKindOfExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOclIsKindOfExpr(this);
}
void USEParser::OclIsKindOfExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOclIsKindOfExpr(this);
}

std::any USEParser::OclIsKindOfExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclIsKindOfExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectByKindExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectByKindExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::SelectByKindExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::SelectByKindExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::SelectByKindExprContext::SelectByKindExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::SelectByKindExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectByKindExpr(this);
}
void USEParser::SelectByKindExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectByKindExpr(this);
}

std::any USEParser::SelectByKindExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectByKindExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectByTypeExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectByTypeExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::SelectByTypeExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::SelectByTypeExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::SelectByTypeExprContext::SelectByTypeExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::SelectByTypeExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectByTypeExpr(this);
}
void USEParser::SelectByTypeExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectByTypeExpr(this);
}

std::any USEParser::SelectByTypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectByTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OclAsTypeExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclAsTypeExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclAsTypeExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclAsTypeExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclAsTypeExprContext::OclAsTypeExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }

void USEParser::OclAsTypeExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOclAsTypeExpr(this);
}
void USEParser::OclAsTypeExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOclAsTypeExpr(this);
}

std::any USEParser::OclAsTypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclAsTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TypeExpressionContext* USEParser::typeExpression() {
  TypeExpressionContext *_localctx = _tracker.createInstance<TypeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 86, USEParser::RuleTypeExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(851);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__52: {
        _localctx = _tracker.createInstance<USEParser::OclAsTypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(826);
        match(USEParser::T__52);
        setState(827);
        match(USEParser::LPAREN);
        setState(828);
        type();
        setState(829);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__53: {
        _localctx = _tracker.createInstance<USEParser::OclIsKindOfExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(831);
        match(USEParser::T__53);
        setState(832);
        match(USEParser::LPAREN);
        setState(833);
        type();
        setState(834);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__54: {
        _localctx = _tracker.createInstance<USEParser::OclIsTypeOfExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(836);
        match(USEParser::T__54);
        setState(837);
        match(USEParser::LPAREN);
        setState(838);
        type();
        setState(839);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__55: {
        _localctx = _tracker.createInstance<USEParser::SelectByTypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(841);
        match(USEParser::T__55);
        setState(842);
        match(USEParser::LPAREN);
        setState(843);
        type();
        setState(844);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__56: {
        _localctx = _tracker.createInstance<USEParser::SelectByKindExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(846);
        match(USEParser::T__56);
        setState(847);
        match(USEParser::LPAREN);
        setState(848);
        type();
        setState(849);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemVarsDeclarationContext ------------------------------------------------------------------

USEParser::ElemVarsDeclarationContext::ElemVarsDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::COLON() {
  return getTokens(USEParser::COLON);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::COLON(size_t i) {
  return getToken(USEParser::COLON, i);
}

std::vector<USEParser::TypeContext *> USEParser::ElemVarsDeclarationContext::type() {
  return getRuleContexts<USEParser::TypeContext>();
}

USEParser::TypeContext* USEParser::ElemVarsDeclarationContext::type(size_t i) {
  return getRuleContext<USEParser::TypeContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::ElemVarsDeclarationContext::getRuleIndex() const {
  return USEParser::RuleElemVarsDeclaration;
}

void USEParser::ElemVarsDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElemVarsDeclaration(this);
}

void USEParser::ElemVarsDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElemVarsDeclaration(this);
}


std::any USEParser::ElemVarsDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitElemVarsDeclaration(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ElemVarsDeclarationContext* USEParser::elemVarsDeclaration() {
  ElemVarsDeclarationContext *_localctx = _tracker.createInstance<ElemVarsDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 88, USEParser::RuleElemVarsDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(853);
    match(USEParser::ID);
    setState(856);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(854);
      match(USEParser::COLON);
      setState(855);
      type();
    }
    setState(866);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(858);
      match(USEParser::COMMA);
      setState(859);
      match(USEParser::ID);
      setState(862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::COLON) {
        setState(860);
        match(USEParser::COLON);
        setState(861);
        type();
      }
      setState(868);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializationContext ------------------------------------------------------------------

USEParser::VariableInitializationContext::VariableInitializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::VariableInitializationContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::VariableInitializationContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::VariableInitializationContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::VariableInitializationContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::VariableInitializationContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::VariableInitializationContext::getRuleIndex() const {
  return USEParser::RuleVariableInitialization;
}

void USEParser::VariableInitializationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVariableInitialization(this);
}

void USEParser::VariableInitializationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVariableInitialization(this);
}


std::any USEParser::VariableInitializationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitVariableInitialization(this);
  else
    return visitor->visitChildren(this);
}

USEParser::VariableInitializationContext* USEParser::variableInitialization() {
  VariableInitializationContext *_localctx = _tracker.createInstance<VariableInitializationContext>(_ctx, getState());
  enterRule(_localctx, 90, USEParser::RuleVariableInitialization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(869);
    match(USEParser::ID);
    setState(870);
    match(USEParser::COLON);
    setState(871);
    type();
    setState(872);
    match(USEParser::EQUAL);
    setState(873);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

USEParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::ExpressionContext *> USEParser::ConditionalExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::ConditionalExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}


size_t USEParser::ConditionalExpressionContext::getRuleIndex() const {
  return USEParser::RuleConditionalExpression;
}

void USEParser::ConditionalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression(this);
}

void USEParser::ConditionalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression(this);
}


std::any USEParser::ConditionalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConditionalExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ConditionalExpressionContext* USEParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 92, USEParser::RuleConditionalExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(875);
    match(USEParser::T__57);
    setState(876);
    expression();
    setState(877);
    match(USEParser::T__58);
    setState(878);
    expression();
    setState(879);
    match(USEParser::T__59);
    setState(880);
    expression();
    setState(881);
    match(USEParser::T__60);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

USEParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::LiteralContext::getRuleIndex() const {
  return USEParser::RuleLiteral;
}

void USEParser::LiteralContext::copyFrom(LiteralContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralIntegerContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralIntegerContext::INT() {
  return getToken(USEParser::INT, 0);
}

USEParser::LiteralIntegerContext::LiteralIntegerContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralIntegerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralInteger(this);
}
void USEParser::LiteralIntegerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralInteger(this);
}

std::any USEParser::LiteralIntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralInteger(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralEmptyCollectionContext ------------------------------------------------------------------

USEParser::EmptyCollectionLiteralContext* USEParser::LiteralEmptyCollectionContext::emptyCollectionLiteral() {
  return getRuleContext<USEParser::EmptyCollectionLiteralContext>(0);
}

USEParser::LiteralEmptyCollectionContext::LiteralEmptyCollectionContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralEmptyCollectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralEmptyCollection(this);
}
void USEParser::LiteralEmptyCollectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralEmptyCollection(this);
}

std::any USEParser::LiteralEmptyCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralEmptyCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralStringContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralStringContext::STRING() {
  return getToken(USEParser::STRING, 0);
}

USEParser::LiteralStringContext::LiteralStringContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralString(this);
}
void USEParser::LiteralStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralString(this);
}

std::any USEParser::LiteralStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralUnlimitedNaturalContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralUnlimitedNaturalContext::STAR() {
  return getToken(USEParser::STAR, 0);
}

USEParser::LiteralUnlimitedNaturalContext::LiteralUnlimitedNaturalContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralUnlimitedNaturalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralUnlimitedNatural(this);
}
void USEParser::LiteralUnlimitedNaturalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralUnlimitedNatural(this);
}

std::any USEParser::LiteralUnlimitedNaturalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralUnlimitedNatural(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralCollectionContext ------------------------------------------------------------------

USEParser::CollectionLiteralContext* USEParser::LiteralCollectionContext::collectionLiteral() {
  return getRuleContext<USEParser::CollectionLiteralContext>(0);
}

USEParser::LiteralCollectionContext::LiteralCollectionContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralCollectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralCollection(this);
}
void USEParser::LiteralCollectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralCollection(this);
}

std::any USEParser::LiteralCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralBooleanFalseContext ------------------------------------------------------------------

USEParser::LiteralBooleanFalseContext::LiteralBooleanFalseContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralBooleanFalseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralBooleanFalse(this);
}
void USEParser::LiteralBooleanFalseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralBooleanFalse(this);
}

std::any USEParser::LiteralBooleanFalseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralBooleanFalse(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralEnumContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralEnumContext::HASH() {
  return getToken(USEParser::HASH, 0);
}

tree::TerminalNode* USEParser::LiteralEnumContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::LiteralEnumContext::LiteralEnumContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralEnumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralEnum(this);
}
void USEParser::LiteralEnumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralEnum(this);
}

std::any USEParser::LiteralEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralQualifiedEnumContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> USEParser::LiteralQualifiedEnumContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::LiteralQualifiedEnumContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::LiteralQualifiedEnumContext::COLON_COLON() {
  return getToken(USEParser::COLON_COLON, 0);
}

USEParser::LiteralQualifiedEnumContext::LiteralQualifiedEnumContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralQualifiedEnumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralQualifiedEnum(this);
}
void USEParser::LiteralQualifiedEnumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralQualifiedEnum(this);
}

std::any USEParser::LiteralQualifiedEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralQualifiedEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralUndefinedContext ------------------------------------------------------------------

USEParser::UndefinedLiteralContext* USEParser::LiteralUndefinedContext::undefinedLiteral() {
  return getRuleContext<USEParser::UndefinedLiteralContext>(0);
}

USEParser::LiteralUndefinedContext::LiteralUndefinedContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralUndefinedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralUndefined(this);
}
void USEParser::LiteralUndefinedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralUndefined(this);
}

std::any USEParser::LiteralUndefinedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralUndefined(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralTupleContext ------------------------------------------------------------------

USEParser::TupleLiteralContext* USEParser::LiteralTupleContext::tupleLiteral() {
  return getRuleContext<USEParser::TupleLiteralContext>(0);
}

USEParser::LiteralTupleContext::LiteralTupleContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralTupleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralTuple(this);
}
void USEParser::LiteralTupleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralTuple(this);
}

std::any USEParser::LiteralTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralBooleanTrueContext ------------------------------------------------------------------

USEParser::LiteralBooleanTrueContext::LiteralBooleanTrueContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralBooleanTrueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralBooleanTrue(this);
}
void USEParser::LiteralBooleanTrueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralBooleanTrue(this);
}

std::any USEParser::LiteralBooleanTrueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralBooleanTrue(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralRealContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralRealContext::REAL() {
  return getToken(USEParser::REAL, 0);
}

USEParser::LiteralRealContext::LiteralRealContext(LiteralContext *ctx) { copyFrom(ctx); }

void USEParser::LiteralRealContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralReal(this);
}
void USEParser::LiteralRealContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralReal(this);
}

std::any USEParser::LiteralRealContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralReal(this);
  else
    return visitor->visitChildren(this);
}
USEParser::LiteralContext* USEParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 94, USEParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(898);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::LiteralBooleanTrueContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(883);
      match(USEParser::T__61);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::LiteralBooleanFalseContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(884);
      match(USEParser::T__62);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::LiteralIntegerContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(885);
      match(USEParser::INT);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::LiteralRealContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(886);
      match(USEParser::REAL);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::LiteralStringContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(887);
      match(USEParser::STRING);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<USEParser::LiteralEnumContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(888);
      match(USEParser::HASH);
      setState(889);
      match(USEParser::ID);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<USEParser::LiteralQualifiedEnumContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(890);
      match(USEParser::ID);
      setState(891);
      match(USEParser::COLON_COLON);
      setState(892);
      match(USEParser::ID);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<USEParser::LiteralCollectionContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(893);
      collectionLiteral();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<USEParser::LiteralEmptyCollectionContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(894);
      emptyCollectionLiteral();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<USEParser::LiteralUndefinedContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(895);
      undefinedLiteral();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<USEParser::LiteralTupleContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(896);
      tupleLiteral();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<USEParser::LiteralUnlimitedNaturalContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(897);
      match(USEParser::STAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionLiteralContext ------------------------------------------------------------------

USEParser::CollectionLiteralContext::CollectionLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::CollectionLiteralContext::getRuleIndex() const {
  return USEParser::RuleCollectionLiteral;
}

void USEParser::CollectionLiteralContext::copyFrom(CollectionLiteralContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- OrderedSetLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OrderedSetLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::OrderedSetLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::OrderedSetLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::OrderedSetLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::OrderedSetLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::OrderedSetLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::OrderedSetLiteralContext::OrderedSetLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }

void USEParser::OrderedSetLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOrderedSetLiteral(this);
}
void USEParser::OrderedSetLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOrderedSetLiteral(this);
}

std::any USEParser::OrderedSetLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOrderedSetLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SequenceLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SequenceLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::SequenceLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::SequenceLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::SequenceLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::SequenceLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::SequenceLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::SequenceLiteralContext::SequenceLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }

void USEParser::SequenceLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSequenceLiteral(this);
}
void USEParser::SequenceLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSequenceLiteral(this);
}

std::any USEParser::SequenceLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSequenceLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BagLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::BagLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::BagLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::BagLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::BagLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::BagLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::BagLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::BagLiteralContext::BagLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }

void USEParser::BagLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBagLiteral(this);
}
void USEParser::BagLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBagLiteral(this);
}

std::any USEParser::BagLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitBagLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SetLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::SetLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::SetLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::SetLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::SetLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::SetLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::SetLiteralContext::SetLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }

void USEParser::SetLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetLiteral(this);
}
void USEParser::SetLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetLiteral(this);
}

std::any USEParser::SetLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSetLiteral(this);
  else
    return visitor->visitChildren(this);
}
USEParser::CollectionLiteralContext* USEParser::collectionLiteral() {
  CollectionLiteralContext *_localctx = _tracker.createInstance<CollectionLiteralContext>(_ctx, getState());
  enterRule(_localctx, 96, USEParser::RuleCollectionLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(952);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__63: {
        _localctx = _tracker.createInstance<USEParser::SetLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(900);
        match(USEParser::T__63);
        setState(901);
        match(USEParser::LBRACE);
        setState(910);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -4035240648549335040) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 95119600534527) != 0)) {
          setState(902);
          collectionItem();
          setState(907);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(903);
            match(USEParser::COMMA);
            setState(904);
            collectionItem();
            setState(909);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(912);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__64: {
        _localctx = _tracker.createInstance<USEParser::SequenceLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(913);
        match(USEParser::T__64);
        setState(914);
        match(USEParser::LBRACE);
        setState(923);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -4035240648549335040) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 95119600534527) != 0)) {
          setState(915);
          collectionItem();
          setState(920);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(916);
            match(USEParser::COMMA);
            setState(917);
            collectionItem();
            setState(922);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(925);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__65: {
        _localctx = _tracker.createInstance<USEParser::BagLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(926);
        match(USEParser::T__65);
        setState(927);
        match(USEParser::LBRACE);
        setState(936);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -4035240648549335040) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 95119600534527) != 0)) {
          setState(928);
          collectionItem();
          setState(933);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(929);
            match(USEParser::COMMA);
            setState(930);
            collectionItem();
            setState(935);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(938);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__66: {
        _localctx = _tracker.createInstance<USEParser::OrderedSetLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(939);
        match(USEParser::T__66);
        setState(940);
        match(USEParser::LBRACE);
        setState(949);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -4035240648549335040) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 95119600534527) != 0)) {
          setState(941);
          collectionItem();
          setState(946);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(942);
            match(USEParser::COMMA);
            setState(943);
            collectionItem();
            setState(948);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(951);
        match(USEParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionItemContext ------------------------------------------------------------------

USEParser::CollectionItemContext::CollectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::ExpressionContext *> USEParser::CollectionItemContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::CollectionItemContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

tree::TerminalNode* USEParser::CollectionItemContext::DOTDOT() {
  return getToken(USEParser::DOTDOT, 0);
}


size_t USEParser::CollectionItemContext::getRuleIndex() const {
  return USEParser::RuleCollectionItem;
}

void USEParser::CollectionItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCollectionItem(this);
}

void USEParser::CollectionItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCollectionItem(this);
}


std::any USEParser::CollectionItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitCollectionItem(this);
  else
    return visitor->visitChildren(this);
}

USEParser::CollectionItemContext* USEParser::collectionItem() {
  CollectionItemContext *_localctx = _tracker.createInstance<CollectionItemContext>(_ctx, getState());
  enterRule(_localctx, 98, USEParser::RuleCollectionItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(954);
    expression();
    setState(957);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::DOTDOT) {
      setState(955);
      match(USEParser::DOTDOT);
      setState(956);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyCollectionLiteralContext ------------------------------------------------------------------

USEParser::EmptyCollectionLiteralContext::EmptyCollectionLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::CollectionTypeContext* USEParser::EmptyCollectionLiteralContext::collectionType() {
  return getRuleContext<USEParser::CollectionTypeContext>(0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}


size_t USEParser::EmptyCollectionLiteralContext::getRuleIndex() const {
  return USEParser::RuleEmptyCollectionLiteral;
}

void USEParser::EmptyCollectionLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyCollectionLiteral(this);
}

void USEParser::EmptyCollectionLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyCollectionLiteral(this);
}


std::any USEParser::EmptyCollectionLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEmptyCollectionLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EmptyCollectionLiteralContext* USEParser::emptyCollectionLiteral() {
  EmptyCollectionLiteralContext *_localctx = _tracker.createInstance<EmptyCollectionLiteralContext>(_ctx, getState());
  enterRule(_localctx, 100, USEParser::RuleEmptyCollectionLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(968);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__67: {
        enterOuterAlt(_localctx, 1);
        setState(959);
        match(USEParser::T__67);
        setState(960);
        match(USEParser::LPAREN);
        setState(961);
        collectionType();
        setState(962);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__63:
      case USEParser::T__64:
      case USEParser::T__65:
      case USEParser::T__66:
      case USEParser::T__72: {
        enterOuterAlt(_localctx, 2);
        setState(964);
        collectionType();
        setState(965);
        match(USEParser::LBRACE);
        setState(966);
        match(USEParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UndefinedLiteralContext ------------------------------------------------------------------

USEParser::UndefinedLiteralContext::UndefinedLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::UndefinedLiteralContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::UndefinedLiteralContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::UndefinedLiteralContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::UndefinedLiteralContext::getRuleIndex() const {
  return USEParser::RuleUndefinedLiteral;
}

void USEParser::UndefinedLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUndefinedLiteral(this);
}

void USEParser::UndefinedLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUndefinedLiteral(this);
}


std::any USEParser::UndefinedLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUndefinedLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::UndefinedLiteralContext* USEParser::undefinedLiteral() {
  UndefinedLiteralContext *_localctx = _tracker.createInstance<UndefinedLiteralContext>(_ctx, getState());
  enterRule(_localctx, 102, USEParser::RuleUndefinedLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(982);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(970);
      match(USEParser::T__68);
      setState(971);
      match(USEParser::LPAREN);
      setState(972);
      type();
      setState(973);
      match(USEParser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(975);
      match(USEParser::T__69);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(976);
      match(USEParser::T__70);
      setState(977);
      match(USEParser::LPAREN);
      setState(978);
      type();
      setState(979);
      match(USEParser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(981);
      match(USEParser::T__70);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleLiteralContext ------------------------------------------------------------------

USEParser::TupleLiteralContext::TupleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TupleLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

std::vector<USEParser::TupleItemContext *> USEParser::TupleLiteralContext::tupleItem() {
  return getRuleContexts<USEParser::TupleItemContext>();
}

USEParser::TupleItemContext* USEParser::TupleLiteralContext::tupleItem(size_t i) {
  return getRuleContext<USEParser::TupleItemContext>(i);
}

tree::TerminalNode* USEParser::TupleLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<tree::TerminalNode *> USEParser::TupleLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::TupleLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::TupleLiteralContext::getRuleIndex() const {
  return USEParser::RuleTupleLiteral;
}

void USEParser::TupleLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTupleLiteral(this);
}

void USEParser::TupleLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTupleLiteral(this);
}


std::any USEParser::TupleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTupleLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TupleLiteralContext* USEParser::tupleLiteral() {
  TupleLiteralContext *_localctx = _tracker.createInstance<TupleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 104, USEParser::RuleTupleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(984);
    match(USEParser::T__71);
    setState(985);
    match(USEParser::LBRACE);
    setState(986);
    tupleItem();
    setState(991);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(987);
      match(USEParser::COMMA);
      setState(988);
      tupleItem();
      setState(993);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(994);
    match(USEParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleItemContext ------------------------------------------------------------------

USEParser::TupleItemContext::TupleItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TupleItemContext::getRuleIndex() const {
  return USEParser::RuleTupleItem;
}

void USEParser::TupleItemContext::copyFrom(TupleItemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UntypedTupleItemContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::UntypedTupleItemContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::ExpressionContext* USEParser::UntypedTupleItemContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::UntypedTupleItemContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::UntypedTupleItemContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::UntypedTupleItemContext::UntypedTupleItemContext(TupleItemContext *ctx) { copyFrom(ctx); }

void USEParser::UntypedTupleItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUntypedTupleItem(this);
}
void USEParser::UntypedTupleItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUntypedTupleItem(this);
}

std::any USEParser::UntypedTupleItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUntypedTupleItem(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypedTupleItemContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypedTupleItemContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::TypedTupleItemContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::TypedTupleItemContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypedTupleItemContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::TypedTupleItemContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

USEParser::TypedTupleItemContext::TypedTupleItemContext(TupleItemContext *ctx) { copyFrom(ctx); }

void USEParser::TypedTupleItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypedTupleItem(this);
}
void USEParser::TypedTupleItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypedTupleItem(this);
}

std::any USEParser::TypedTupleItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypedTupleItem(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TupleItemContext* USEParser::tupleItem() {
  TupleItemContext *_localctx = _tracker.createInstance<TupleItemContext>(_ctx, getState());
  enterRule(_localctx, 106, USEParser::RuleTupleItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1005);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::TypedTupleItemContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(996);
      match(USEParser::ID);
      setState(997);
      match(USEParser::COLON);
      setState(998);
      type();
      setState(999);
      match(USEParser::EQUAL);
      setState(1000);
      expression();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::UntypedTupleItemContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1002);
      match(USEParser::ID);
      setState(1003);
      _la = _input->LA(1);
      if (!(_la == USEParser::COLON

      || _la == USEParser::EQUAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1004);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

USEParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TypeContext::getRuleIndex() const {
  return USEParser::RuleType;
}

void USEParser::TypeContext::copyFrom(TypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeTupleContext ------------------------------------------------------------------

USEParser::TupleTypeContext* USEParser::TypeTupleContext::tupleType() {
  return getRuleContext<USEParser::TupleTypeContext>(0);
}

USEParser::TypeTupleContext::TypeTupleContext(TypeContext *ctx) { copyFrom(ctx); }

void USEParser::TypeTupleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeTuple(this);
}
void USEParser::TypeTupleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeTuple(this);
}

std::any USEParser::TypeTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeCollectionContext ------------------------------------------------------------------

USEParser::CollectionTypeContext* USEParser::TypeCollectionContext::collectionType() {
  return getRuleContext<USEParser::CollectionTypeContext>(0);
}

USEParser::TypeCollectionContext::TypeCollectionContext(TypeContext *ctx) { copyFrom(ctx); }

void USEParser::TypeCollectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeCollection(this);
}
void USEParser::TypeCollectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeCollection(this);
}

std::any USEParser::TypeCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSimpleContext ------------------------------------------------------------------

USEParser::SimpleTypeContext* USEParser::TypeSimpleContext::simpleType() {
  return getRuleContext<USEParser::SimpleTypeContext>(0);
}

USEParser::TypeSimpleContext::TypeSimpleContext(TypeContext *ctx) { copyFrom(ctx); }

void USEParser::TypeSimpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSimple(this);
}
void USEParser::TypeSimpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSimple(this);
}

std::any USEParser::TypeSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSimple(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TypeContext* USEParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 108, USEParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1010);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::TypeSimpleContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1007);
        simpleType();
        break;
      }

      case USEParser::T__63:
      case USEParser::T__64:
      case USEParser::T__65:
      case USEParser::T__66:
      case USEParser::T__72: {
        _localctx = _tracker.createInstance<USEParser::TypeCollectionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1008);
        collectionType();
        break;
      }

      case USEParser::T__71: {
        _localctx = _tracker.createInstance<USEParser::TypeTupleContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1009);
        tupleType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeOnlyContext ------------------------------------------------------------------

USEParser::TypeOnlyContext::TypeOnlyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::TypeContext* USEParser::TypeOnlyContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeOnlyContext::EOF() {
  return getToken(USEParser::EOF, 0);
}


size_t USEParser::TypeOnlyContext::getRuleIndex() const {
  return USEParser::RuleTypeOnly;
}

void USEParser::TypeOnlyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeOnly(this);
}

void USEParser::TypeOnlyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeOnly(this);
}


std::any USEParser::TypeOnlyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeOnly(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TypeOnlyContext* USEParser::typeOnly() {
  TypeOnlyContext *_localctx = _tracker.createInstance<TypeOnlyContext>(_ctx, getState());
  enterRule(_localctx, 110, USEParser::RuleTypeOnly);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1012);
    type();
    setState(1013);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeContext ------------------------------------------------------------------

USEParser::SimpleTypeContext::SimpleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::SimpleTypeContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::SimpleTypeContext::getRuleIndex() const {
  return USEParser::RuleSimpleType;
}

void USEParser::SimpleTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleType(this);
}

void USEParser::SimpleTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleType(this);
}


std::any USEParser::SimpleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSimpleType(this);
  else
    return visitor->visitChildren(this);
}

USEParser::SimpleTypeContext* USEParser::simpleType() {
  SimpleTypeContext *_localctx = _tracker.createInstance<SimpleTypeContext>(_ctx, getState());
  enterRule(_localctx, 112, USEParser::RuleSimpleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1015);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionTypeContext ------------------------------------------------------------------

USEParser::CollectionTypeContext::CollectionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::CollectionTypeContext::getRuleIndex() const {
  return USEParser::RuleCollectionType;
}

void USEParser::CollectionTypeContext::copyFrom(CollectionTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeBagContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeBagContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeBagContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeBagContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeBagContext::TypeBagContext(CollectionTypeContext *ctx) { copyFrom(ctx); }

void USEParser::TypeBagContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeBag(this);
}
void USEParser::TypeBagContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeBag(this);
}

std::any USEParser::TypeBagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeBag(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSimpleCollectionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSimpleCollectionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSimpleCollectionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSimpleCollectionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSimpleCollectionContext::TypeSimpleCollectionContext(CollectionTypeContext *ctx) { copyFrom(ctx); }

void USEParser::TypeSimpleCollectionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSimpleCollection(this);
}
void USEParser::TypeSimpleCollectionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSimpleCollection(this);
}

std::any USEParser::TypeSimpleCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSimpleCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeOrderedSetContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeOrderedSetContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeOrderedSetContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeOrderedSetContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeOrderedSetContext::TypeOrderedSetContext(CollectionTypeContext *ctx) { copyFrom(ctx); }

void USEParser::TypeOrderedSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeOrderedSet(this);
}
void USEParser::TypeOrderedSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeOrderedSet(this);
}

std::any USEParser::TypeOrderedSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeOrderedSet(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSequenceContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSequenceContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSequenceContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSequenceContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSequenceContext::TypeSequenceContext(CollectionTypeContext *ctx) { copyFrom(ctx); }

void USEParser::TypeSequenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSequence(this);
}
void USEParser::TypeSequenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSequence(this);
}

std::any USEParser::TypeSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSequence(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSetContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSetContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSetContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSetContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSetContext::TypeSetContext(CollectionTypeContext *ctx) { copyFrom(ctx); }

void USEParser::TypeSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSet(this);
}
void USEParser::TypeSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSet(this);
}

std::any USEParser::TypeSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSet(this);
  else
    return visitor->visitChildren(this);
}
USEParser::CollectionTypeContext* USEParser::collectionType() {
  CollectionTypeContext *_localctx = _tracker.createInstance<CollectionTypeContext>(_ctx, getState());
  enterRule(_localctx, 114, USEParser::RuleCollectionType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1042);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__72: {
        _localctx = _tracker.createInstance<USEParser::TypeSimpleCollectionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1017);
        match(USEParser::T__72);
        setState(1018);
        match(USEParser::LPAREN);
        setState(1019);
        type();
        setState(1020);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__63: {
        _localctx = _tracker.createInstance<USEParser::TypeSetContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1022);
        match(USEParser::T__63);
        setState(1023);
        match(USEParser::LPAREN);
        setState(1024);
        type();
        setState(1025);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__64: {
        _localctx = _tracker.createInstance<USEParser::TypeSequenceContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1027);
        match(USEParser::T__64);
        setState(1028);
        match(USEParser::LPAREN);
        setState(1029);
        type();
        setState(1030);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__65: {
        _localctx = _tracker.createInstance<USEParser::TypeBagContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1032);
        match(USEParser::T__65);
        setState(1033);
        match(USEParser::LPAREN);
        setState(1034);
        type();
        setState(1035);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__66: {
        _localctx = _tracker.createInstance<USEParser::TypeOrderedSetContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1037);
        match(USEParser::T__66);
        setState(1038);
        match(USEParser::LPAREN);
        setState(1039);
        type();
        setState(1040);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleTypeContext ------------------------------------------------------------------

USEParser::TupleTypeContext::TupleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TupleTypeContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

std::vector<USEParser::TuplePartContext *> USEParser::TupleTypeContext::tuplePart() {
  return getRuleContexts<USEParser::TuplePartContext>();
}

USEParser::TuplePartContext* USEParser::TupleTypeContext::tuplePart(size_t i) {
  return getRuleContext<USEParser::TuplePartContext>(i);
}

tree::TerminalNode* USEParser::TupleTypeContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::TupleTypeContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::TupleTypeContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::TupleTypeContext::getRuleIndex() const {
  return USEParser::RuleTupleType;
}

void USEParser::TupleTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTupleType(this);
}

void USEParser::TupleTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTupleType(this);
}


std::any USEParser::TupleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTupleType(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TupleTypeContext* USEParser::tupleType() {
  TupleTypeContext *_localctx = _tracker.createInstance<TupleTypeContext>(_ctx, getState());
  enterRule(_localctx, 116, USEParser::RuleTupleType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1044);
    match(USEParser::T__71);
    setState(1045);
    match(USEParser::LPAREN);
    setState(1046);
    tuplePart();
    setState(1051);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(1047);
      match(USEParser::COMMA);
      setState(1048);
      tuplePart();
      setState(1053);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1054);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TuplePartContext ------------------------------------------------------------------

USEParser::TuplePartContext::TuplePartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TuplePartContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::TuplePartContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::TuplePartContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::TuplePartContext::getRuleIndex() const {
  return USEParser::RuleTuplePart;
}

void USEParser::TuplePartContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTuplePart(this);
}

void USEParser::TuplePartContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<USEListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTuplePart(this);
}


std::any USEParser::TuplePartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTuplePart(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TuplePartContext* USEParser::tuplePart() {
  TuplePartContext *_localctx = _tracker.createInstance<TuplePartContext>(_ctx, getState());
  enterRule(_localctx, 118, USEParser::RuleTuplePart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1056);
    match(USEParser::ID);
    setState(1057);
    match(USEParser::COLON);
    setState(1058);
    type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool USEParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 26: return logicalExpressionSempred(antlrcpp::downCast<LogicalExpressionContext *>(context), predicateIndex);
    case 30: return equalityExpressionSempred(antlrcpp::downCast<EqualityExpressionContext *>(context), predicateIndex);
    case 31: return relationalExpressionSempred(antlrcpp::downCast<RelationalExpressionContext *>(context), predicateIndex);
    case 32: return additiveExpressionSempred(antlrcpp::downCast<AdditiveExpressionContext *>(context), predicateIndex);
    case 33: return factorExpressionSempred(antlrcpp::downCast<FactorExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool USEParser::logicalExpressionSempred(LogicalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 7);
    case 1: return precpred(_ctx, 6);
    case 2: return precpred(_ctx, 5);
    case 3: return precpred(_ctx, 4);
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool USEParser::equalityExpressionSempred(EqualityExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::relationalExpressionSempred(RelationalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 4);
    case 9: return precpred(_ctx, 3);
    case 10: return precpred(_ctx, 2);
    case 11: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::additiveExpressionSempred(AdditiveExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 2);
    case 13: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::factorExpressionSempred(FactorExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 14: return precpred(_ctx, 2);
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void USEParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  useParserInitialize();
#else
  ::antlr4::internal::call_once(useParserOnceFlag, useParserInitialize);
#endif
}
