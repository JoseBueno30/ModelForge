 
/*
 * HEADER TEST
 */



// Generated from USE.g4 by ANTLR 4.13.2


#include "USEVisitor.h"

#include "USEParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct USEParserStaticData final {
  USEParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  USEParserStaticData(const USEParserStaticData&) = delete;
  USEParserStaticData(USEParserStaticData&&) = delete;
  USEParserStaticData& operator=(const USEParserStaticData&) = delete;
  USEParserStaticData& operator=(USEParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag useParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<USEParserStaticData> useParserStaticData = nullptr;

void useParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (useParserStaticData != nullptr) {
    return;
  }
#else
  assert(useParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<USEParserStaticData>(
    std::vector<std::string>{
      "model", "modelElement", "enumTypeDefinition", "classDefinition", 
      "associationClassDefinition", "attributeDefinition", "initDefinition", 
      "derivedDefinition", "operationDefinition", "associationDefinition", 
      "associationEnd", "role", "redefines", "subsets", "multiplicity", 
      "multiplicityRange", "multiplicitySpec", "constraintDefinition", "invariant", 
      "invariantClause", "prePost", "prePostClause", "stateMachine", "stateDefinition", 
      "transitionDefinition", "expressionOnly", "expression", "letExpression", 
      "logicalExpression", "paramList", "idList", "variableDeclaration", 
      "equalityExpression", "relationalExpression", "additiveExpression", 
      "factorExpression", "unaryExpression", "postfixExpression", "primaryExpression", 
      "objectReference", "propertyCall", "queryExpression", "iterateExpression", 
      "operationExpression", "inStateExpression", "typeExpression", "elemVarsDeclaration", 
      "variableInitialization", "conditionalExpression", "literal", "collectionLiteral", 
      "collectionItem", "emptyCollectionLiteral", "undefinedLiteral", "tupleLiteral", 
      "tupleItem", "type", "typeOnly", "simpleType", "collectionType", "tupleType", 
      "tuplePart"
    },
    std::vector<std::string>{
      "", "'model'", "'constraints'", "'enum'", "'class'", "'attributes'", 
      "'operations'", "'statemachines'", "'end'", "'associationclass'", 
      "'between'", "'init'", "'derive'", "'derived'", "'association'", "'qualifier'", 
      "'role'", "'redefines'", "'subsets'", "'context'", "'inv'", "'pre'", 
      "'post'", "'psm'", "'states'", "'transitions'", "'let'", "'in'", "'and'", 
      "'&'", "'or'", "'xor'", "'=>'", "'implies'", "'div'", "'not'", "'allInstances'", 
      "'byUseId'", "'select'", "'reject'", "'collect'", "'exists'", "'forAll'", 
      "'isUnique'", "'sortedBy'", "'iterate'", "'oclInState'", "'oclAsType'", 
      "'oclIsKindOf'", "'oclIsTypeOf'", "'selectByType'", "'selectByKind'", 
      "'if'", "'then'", "'else'", "'endif'", "'true'", "'false'", "'Set'", 
      "'Sequence'", "'Bag'", "'OrderedSet'", "'oclEmpty'", "'oclUndefined'", 
      "'Undefined'", "'null'", "'Tuple'", "'Collection'", "", "", "", "'->'", 
      "'@'", "'|'", "':'", "'::'", "':='", "','", "'.'", "'..'", "'='", 
      "'>'", "'>='", "'#'", "'{'", "'['", "'<'", "'<='", "'('", "'-'", "'<>'", 
      "'+'", "'}'", "']'", "')'", "';'", "'/'", "'*'", "'abstract'", "'existential'", 
      "'aggregation'", "'composition'", "'ordered'", "'union'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "WS", "SL_COMMENT", "ML_COMMENT", "ARROW", "AT", "BAR", "COLON", "COLON_COLON", 
      "COLON_EQUAL", "COMMA", "DOT", "DOTDOT", "EQUAL", "GREATER", "GREATER_EQUAL", 
      "HASH", "LBRACE", "LBRACK", "LESS", "LESS_EQUAL", "LPAREN", "MINUS", 
      "NOT_EQUAL", "PLUS", "RBRACE", "RBRACK", "RPAREN", "SEMI", "SLASH", 
      "STAR", "ABSTRACT", "EXISTENTIAL", "AGGREGATION", "COMPOSITION", "ORDERED", 
      "UNION", "INT", "REAL", "SOIL_OPERATION", "STRING", "NON_OCL_STRING", 
      "ID"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,109,1063,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,5,
  	0,128,8,0,10,0,12,0,131,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,5,1,141,8,
  	1,10,1,12,1,144,9,1,3,1,146,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,154,8,2,1,
  	3,3,3,157,8,3,1,3,1,3,1,3,1,3,3,3,163,8,3,1,3,1,3,5,3,167,8,3,10,3,12,
  	3,170,9,3,3,3,172,8,3,1,3,1,3,5,3,176,8,3,10,3,12,3,179,9,3,3,3,181,8,
  	3,1,3,1,3,5,3,185,8,3,10,3,12,3,188,9,3,3,3,190,8,3,1,3,1,3,5,3,194,8,
  	3,10,3,12,3,197,9,3,3,3,199,8,3,1,3,1,3,1,4,3,4,204,8,4,1,4,1,4,1,4,1,
  	4,3,4,210,8,4,1,4,1,4,1,4,4,4,215,8,4,11,4,12,4,216,3,4,219,8,4,1,4,1,
  	4,5,4,223,8,4,10,4,12,4,226,9,4,3,4,228,8,4,1,4,1,4,5,4,232,8,4,10,4,
  	12,4,235,9,4,3,4,237,8,4,1,4,1,4,5,4,241,8,4,10,4,12,4,244,9,4,3,4,246,
  	8,4,1,4,1,4,5,4,250,8,4,10,4,12,4,253,9,4,3,4,255,8,4,1,4,3,4,258,8,4,
  	1,4,1,4,1,5,1,5,1,5,1,5,1,5,3,5,267,8,5,1,5,3,5,270,8,5,1,6,1,6,1,6,1,
  	6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,284,8,8,1,8,1,8,1,8,3,8,289,8,8,
  	1,8,5,8,292,8,8,10,8,12,8,295,9,8,1,8,3,8,298,8,8,1,9,1,9,1,9,1,9,1,9,
  	4,9,305,8,9,11,9,12,9,306,1,9,1,9,1,9,1,9,1,9,1,9,1,9,4,9,316,8,9,11,
  	9,12,9,317,1,9,1,9,1,9,1,9,1,9,1,9,1,9,4,9,327,8,9,11,9,12,9,328,1,9,
  	1,9,3,9,333,8,9,1,10,1,10,1,10,1,10,1,10,3,10,340,8,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,3,10,351,8,10,1,10,1,10,1,10,1,10,5,10,
  	357,8,10,10,10,12,10,360,9,10,1,10,3,10,363,8,10,1,11,1,11,1,11,1,12,
  	1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,5,14,377,8,14,10,14,12,14,380,
  	9,14,1,15,1,15,1,15,3,15,385,8,15,1,16,1,16,1,17,1,17,3,17,391,8,17,1,
  	18,1,18,1,18,1,18,5,18,397,8,18,10,18,12,18,400,9,18,1,18,3,18,403,8,
  	18,1,18,1,18,5,18,407,8,18,10,18,12,18,410,9,18,1,19,1,19,3,19,414,8,
  	19,1,19,1,19,1,19,1,19,1,19,3,19,421,8,19,1,19,1,19,3,19,425,8,19,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,3,20,434,8,20,1,20,4,20,437,8,20,11,20,
  	12,20,438,1,21,1,21,3,21,443,8,21,1,21,1,21,1,21,1,21,3,21,449,8,21,1,
  	21,1,21,3,21,453,8,21,1,22,1,22,1,22,1,22,4,22,459,8,22,11,22,12,22,460,
  	1,22,1,22,4,22,465,8,22,11,22,12,22,466,1,22,1,22,1,23,1,23,1,23,3,23,
  	474,8,23,1,23,1,23,1,23,1,23,3,23,480,8,23,1,24,1,24,1,24,1,24,1,24,1,
  	24,1,24,1,24,3,24,490,8,24,1,24,1,24,1,24,3,24,495,8,24,1,24,1,24,1,24,
  	1,24,1,24,1,24,3,24,503,8,24,1,24,3,24,506,8,24,1,25,1,25,1,25,1,26,1,
  	26,1,26,3,26,514,8,26,1,27,1,27,1,27,1,27,3,27,520,8,27,1,27,1,27,1,27,
  	1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
  	1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,5,28,548,8,28,10,28,12,28,
  	551,9,28,1,29,1,29,1,29,1,29,5,29,557,8,29,10,29,12,29,560,9,29,3,29,
  	562,8,29,1,29,1,29,1,30,1,30,1,30,5,30,569,8,30,10,30,12,30,572,9,30,
  	1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,
  	587,8,32,10,32,12,32,590,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,5,33,607,8,33,10,33,12,33,610,9,33,
  	1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,5,34,621,8,34,10,34,12,34,
  	624,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,635,8,35,10,
  	35,12,35,638,9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,647,8,36,1,
  	37,1,37,1,37,1,37,4,37,653,8,37,11,37,12,37,654,3,37,657,8,37,1,38,1,
  	38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,671,8,38,1,
  	38,1,38,3,38,675,8,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,685,
  	8,38,3,38,687,8,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,697,8,
  	40,1,41,1,41,1,41,1,41,1,41,3,41,704,8,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,1,41,3,41,714,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,
  	41,724,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,734,8,41,1,41,
  	1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,744,8,41,1,41,1,41,1,41,1,41,
  	1,41,1,41,1,41,1,41,3,41,754,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
  	1,41,3,41,764,8,41,1,41,1,41,1,41,3,41,769,8,41,1,42,1,42,1,42,1,42,1,
  	42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,5,43,785,8,43,10,43,12,
  	43,788,9,43,1,43,1,43,1,43,1,43,1,43,5,43,795,8,43,10,43,12,43,798,9,
  	43,1,43,1,43,3,43,802,8,43,3,43,804,8,43,1,43,1,43,3,43,808,8,43,1,43,
  	1,43,1,43,1,43,5,43,814,8,43,10,43,12,43,817,9,43,3,43,819,8,43,1,43,
  	3,43,822,8,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
  	1,45,1,45,1,45,1,45,1,45,3,45,854,8,45,1,46,1,46,1,46,3,46,859,8,46,1,
  	46,1,46,1,46,1,46,3,46,865,8,46,5,46,867,8,46,10,46,12,46,870,9,46,1,
  	47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,3,49,901,8,49,1,50,1,50,1,50,1,50,1,50,5,50,908,8,50,10,50,12,50,911,
  	9,50,3,50,913,8,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,921,8,50,10,50,
  	12,50,924,9,50,3,50,926,8,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,934,8,
  	50,10,50,12,50,937,9,50,3,50,939,8,50,1,50,1,50,1,50,1,50,1,50,1,50,5,
  	50,947,8,50,10,50,12,50,950,9,50,3,50,952,8,50,1,50,3,50,955,8,50,1,51,
  	1,51,1,51,3,51,960,8,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
  	3,52,971,8,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
  	1,53,3,53,985,8,53,1,54,1,54,1,54,1,54,1,54,5,54,992,8,54,10,54,12,54,
  	995,9,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
  	1008,8,55,1,56,1,56,1,56,3,56,1013,8,56,1,57,1,57,1,57,1,58,1,58,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,1045,8,59,1,60,
  	1,60,1,60,1,60,1,60,5,60,1052,8,60,10,60,12,60,1055,9,60,1,60,1,60,1,
  	61,1,61,1,61,1,61,1,61,0,5,56,64,66,68,70,62,0,2,4,6,8,10,12,14,16,18,
  	20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
  	66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
  	110,112,114,116,118,120,122,0,6,1,0,100,101,2,0,74,74,80,80,1,0,12,13,
  	2,0,97,97,104,104,2,0,34,34,96,96,2,0,71,71,78,78,1177,0,124,1,0,0,0,
  	2,145,1,0,0,0,4,147,1,0,0,0,6,156,1,0,0,0,8,203,1,0,0,0,10,261,1,0,0,
  	0,12,271,1,0,0,0,14,275,1,0,0,0,16,279,1,0,0,0,18,332,1,0,0,0,20,334,
  	1,0,0,0,22,364,1,0,0,0,24,367,1,0,0,0,26,370,1,0,0,0,28,373,1,0,0,0,30,
  	381,1,0,0,0,32,386,1,0,0,0,34,390,1,0,0,0,36,392,1,0,0,0,38,424,1,0,0,
  	0,40,426,1,0,0,0,42,452,1,0,0,0,44,454,1,0,0,0,46,470,1,0,0,0,48,481,
  	1,0,0,0,50,507,1,0,0,0,52,513,1,0,0,0,54,515,1,0,0,0,56,526,1,0,0,0,58,
  	552,1,0,0,0,60,565,1,0,0,0,62,573,1,0,0,0,64,577,1,0,0,0,66,591,1,0,0,
  	0,68,611,1,0,0,0,70,625,1,0,0,0,72,646,1,0,0,0,74,656,1,0,0,0,76,686,
  	1,0,0,0,78,688,1,0,0,0,80,696,1,0,0,0,82,768,1,0,0,0,84,770,1,0,0,0,86,
  	779,1,0,0,0,88,823,1,0,0,0,90,853,1,0,0,0,92,855,1,0,0,0,94,871,1,0,0,
  	0,96,877,1,0,0,0,98,900,1,0,0,0,100,954,1,0,0,0,102,956,1,0,0,0,104,970,
  	1,0,0,0,106,984,1,0,0,0,108,986,1,0,0,0,110,1007,1,0,0,0,112,1012,1,0,
  	0,0,114,1014,1,0,0,0,116,1017,1,0,0,0,118,1044,1,0,0,0,120,1046,1,0,0,
  	0,122,1058,1,0,0,0,124,125,5,1,0,0,125,129,5,109,0,0,126,128,3,2,1,0,
  	127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,132,
  	1,0,0,0,131,129,1,0,0,0,132,133,5,0,0,1,133,1,1,0,0,0,134,146,3,4,2,0,
  	135,146,3,6,3,0,136,146,3,18,9,0,137,146,3,8,4,0,138,142,5,2,0,0,139,
  	141,3,34,17,0,140,139,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,142,143,
  	1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,145,134,1,0,0,0,145,135,1,0,0,
  	0,145,136,1,0,0,0,145,137,1,0,0,0,145,138,1,0,0,0,146,3,1,0,0,0,147,148,
  	5,3,0,0,148,149,5,109,0,0,149,150,5,84,0,0,150,151,3,60,30,0,151,153,
  	5,92,0,0,152,154,5,95,0,0,153,152,1,0,0,0,153,154,1,0,0,0,154,5,1,0,0,
  	0,155,157,5,98,0,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,
  	159,5,4,0,0,159,162,5,109,0,0,160,161,5,86,0,0,161,163,3,60,30,0,162,
  	160,1,0,0,0,162,163,1,0,0,0,163,171,1,0,0,0,164,168,5,5,0,0,165,167,3,
  	10,5,0,166,165,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,
  	0,169,172,1,0,0,0,170,168,1,0,0,0,171,164,1,0,0,0,171,172,1,0,0,0,172,
  	180,1,0,0,0,173,177,5,6,0,0,174,176,3,16,8,0,175,174,1,0,0,0,176,179,
  	1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,
  	0,180,173,1,0,0,0,180,181,1,0,0,0,181,189,1,0,0,0,182,186,5,2,0,0,183,
  	185,3,38,19,0,184,183,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,
  	1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,189,182,1,0,0,0,189,190,1,0,0,
  	0,190,198,1,0,0,0,191,195,5,7,0,0,192,194,3,44,22,0,193,192,1,0,0,0,194,
  	197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,199,1,0,0,0,197,195,1,
  	0,0,0,198,191,1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,201,5,8,0,0,
  	201,7,1,0,0,0,202,204,5,98,0,0,203,202,1,0,0,0,203,204,1,0,0,0,204,205,
  	1,0,0,0,205,206,5,9,0,0,206,209,5,109,0,0,207,208,5,86,0,0,208,210,3,
  	60,30,0,209,207,1,0,0,0,209,210,1,0,0,0,210,218,1,0,0,0,211,212,5,10,
  	0,0,212,214,3,20,10,0,213,215,3,20,10,0,214,213,1,0,0,0,215,216,1,0,0,
  	0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,211,1,0,0,0,218,
  	219,1,0,0,0,219,227,1,0,0,0,220,224,5,5,0,0,221,223,3,10,5,0,222,221,
  	1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,228,1,0,0,
  	0,226,224,1,0,0,0,227,220,1,0,0,0,227,228,1,0,0,0,228,236,1,0,0,0,229,
  	233,5,6,0,0,230,232,3,16,8,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,
  	1,0,0,0,233,234,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,236,229,1,0,0,
  	0,236,237,1,0,0,0,237,245,1,0,0,0,238,242,5,2,0,0,239,241,3,38,19,0,240,
  	239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,246,1,
  	0,0,0,244,242,1,0,0,0,245,238,1,0,0,0,245,246,1,0,0,0,246,254,1,0,0,0,
  	247,251,5,7,0,0,248,250,3,44,22,0,249,248,1,0,0,0,250,253,1,0,0,0,251,
  	249,1,0,0,0,251,252,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,254,247,1,
  	0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,258,7,0,0,0,257,256,1,0,0,0,
  	257,258,1,0,0,0,258,259,1,0,0,0,259,260,5,8,0,0,260,9,1,0,0,0,261,262,
  	5,109,0,0,262,263,5,74,0,0,263,266,3,112,56,0,264,267,3,12,6,0,265,267,
  	3,14,7,0,266,264,1,0,0,0,266,265,1,0,0,0,266,267,1,0,0,0,267,269,1,0,
  	0,0,268,270,5,95,0,0,269,268,1,0,0,0,269,270,1,0,0,0,270,11,1,0,0,0,271,
  	272,5,11,0,0,272,273,7,1,0,0,273,274,3,52,26,0,274,13,1,0,0,0,275,276,
  	7,2,0,0,276,277,7,1,0,0,277,278,3,52,26,0,278,15,1,0,0,0,279,280,5,109,
  	0,0,280,283,3,58,29,0,281,282,5,74,0,0,282,284,3,112,56,0,283,281,1,0,
  	0,0,283,284,1,0,0,0,284,288,1,0,0,0,285,286,5,80,0,0,286,289,3,52,26,
  	0,287,289,5,106,0,0,288,285,1,0,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,
  	293,1,0,0,0,290,292,3,42,21,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,
  	1,0,0,0,293,294,1,0,0,0,294,297,1,0,0,0,295,293,1,0,0,0,296,298,5,95,
  	0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,17,1,0,0,0,299,300,5,14,0,0,300,
  	301,5,109,0,0,301,302,5,10,0,0,302,304,3,20,10,0,303,305,3,20,10,0,304,
  	303,1,0,0,0,305,306,1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,308,1,
  	0,0,0,308,309,5,8,0,0,309,333,1,0,0,0,310,311,5,100,0,0,311,312,5,109,
  	0,0,312,313,5,10,0,0,313,315,3,20,10,0,314,316,3,20,10,0,315,314,1,0,
  	0,0,316,317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,
  	320,5,8,0,0,320,333,1,0,0,0,321,322,5,101,0,0,322,323,5,109,0,0,323,324,
  	5,10,0,0,324,326,3,20,10,0,325,327,3,20,10,0,326,325,1,0,0,0,327,328,
  	1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,5,8,0,
  	0,331,333,1,0,0,0,332,299,1,0,0,0,332,310,1,0,0,0,332,321,1,0,0,0,333,
  	19,1,0,0,0,334,335,5,109,0,0,335,336,5,85,0,0,336,337,3,28,14,0,337,339,
  	5,93,0,0,338,340,3,22,11,0,339,338,1,0,0,0,339,340,1,0,0,0,340,358,1,
  	0,0,0,341,357,5,102,0,0,342,357,3,26,13,0,343,357,5,103,0,0,344,357,3,
  	24,12,0,345,350,7,2,0,0,346,347,5,88,0,0,347,348,3,92,46,0,348,349,5,
  	94,0,0,349,351,1,0,0,0,350,346,1,0,0,0,350,351,1,0,0,0,351,352,1,0,0,
  	0,352,353,5,80,0,0,353,357,3,52,26,0,354,355,5,15,0,0,355,357,3,58,29,
  	0,356,341,1,0,0,0,356,342,1,0,0,0,356,343,1,0,0,0,356,344,1,0,0,0,356,
  	345,1,0,0,0,356,354,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,
  	0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,361,363,5,95,0,0,362,361,1,0,0,
  	0,362,363,1,0,0,0,363,21,1,0,0,0,364,365,5,16,0,0,365,366,5,109,0,0,366,
  	23,1,0,0,0,367,368,5,17,0,0,368,369,5,109,0,0,369,25,1,0,0,0,370,371,
  	5,18,0,0,371,372,5,109,0,0,372,27,1,0,0,0,373,378,3,30,15,0,374,375,5,
  	77,0,0,375,377,3,30,15,0,376,374,1,0,0,0,377,380,1,0,0,0,378,376,1,0,
  	0,0,378,379,1,0,0,0,379,29,1,0,0,0,380,378,1,0,0,0,381,384,3,32,16,0,
  	382,383,5,79,0,0,383,385,3,32,16,0,384,382,1,0,0,0,384,385,1,0,0,0,385,
  	31,1,0,0,0,386,387,7,3,0,0,387,33,1,0,0,0,388,391,3,36,18,0,389,391,3,
  	40,20,0,390,388,1,0,0,0,390,389,1,0,0,0,391,35,1,0,0,0,392,402,5,19,0,
  	0,393,398,5,109,0,0,394,395,5,77,0,0,395,397,5,109,0,0,396,394,1,0,0,
  	0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,401,1,0,0,0,400,
  	398,1,0,0,0,401,403,5,74,0,0,402,393,1,0,0,0,402,403,1,0,0,0,403,404,
  	1,0,0,0,404,408,3,116,58,0,405,407,3,38,19,0,406,405,1,0,0,0,407,410,
  	1,0,0,0,408,406,1,0,0,0,408,409,1,0,0,0,409,37,1,0,0,0,410,408,1,0,0,
  	0,411,413,5,20,0,0,412,414,5,109,0,0,413,412,1,0,0,0,413,414,1,0,0,0,
  	414,415,1,0,0,0,415,416,5,74,0,0,416,425,3,52,26,0,417,418,5,99,0,0,418,
  	420,5,20,0,0,419,421,5,109,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,
  	1,0,0,0,422,423,5,74,0,0,423,425,3,52,26,0,424,411,1,0,0,0,424,417,1,
  	0,0,0,425,39,1,0,0,0,426,427,5,19,0,0,427,428,5,109,0,0,428,429,5,75,
  	0,0,429,430,5,109,0,0,430,433,3,58,29,0,431,432,5,74,0,0,432,434,3,112,
  	56,0,433,431,1,0,0,0,433,434,1,0,0,0,434,436,1,0,0,0,435,437,3,42,21,
  	0,436,435,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,0,0,0,439,
  	41,1,0,0,0,440,442,5,21,0,0,441,443,5,109,0,0,442,441,1,0,0,0,442,443,
  	1,0,0,0,443,444,1,0,0,0,444,445,5,74,0,0,445,453,3,52,26,0,446,448,5,
  	22,0,0,447,449,5,109,0,0,448,447,1,0,0,0,448,449,1,0,0,0,449,450,1,0,
  	0,0,450,451,5,74,0,0,451,453,3,52,26,0,452,440,1,0,0,0,452,446,1,0,0,
  	0,453,43,1,0,0,0,454,455,5,23,0,0,455,456,5,109,0,0,456,458,5,24,0,0,
  	457,459,3,46,23,0,458,457,1,0,0,0,459,460,1,0,0,0,460,458,1,0,0,0,460,
  	461,1,0,0,0,461,462,1,0,0,0,462,464,5,25,0,0,463,465,3,48,24,0,464,463,
  	1,0,0,0,465,466,1,0,0,0,466,464,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,
  	0,468,469,5,8,0,0,469,45,1,0,0,0,470,473,5,109,0,0,471,472,5,74,0,0,472,
  	474,5,109,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,479,1,0,0,0,475,476,
  	5,85,0,0,476,477,3,52,26,0,477,478,5,93,0,0,478,480,1,0,0,0,479,475,1,
  	0,0,0,479,480,1,0,0,0,480,47,1,0,0,0,481,482,5,109,0,0,482,483,5,71,0,
  	0,483,505,5,109,0,0,484,489,5,84,0,0,485,486,5,85,0,0,486,487,3,52,26,
  	0,487,488,5,93,0,0,488,490,1,0,0,0,489,485,1,0,0,0,489,490,1,0,0,0,490,
  	491,1,0,0,0,491,492,5,109,0,0,492,494,5,88,0,0,493,495,3,58,29,0,494,
  	493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,497,5,94,0,0,497,502,
  	1,0,0,0,498,499,5,85,0,0,499,500,3,52,26,0,500,501,5,93,0,0,501,503,1,
  	0,0,0,502,498,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,506,5,92,0,
  	0,505,484,1,0,0,0,505,506,1,0,0,0,506,49,1,0,0,0,507,508,3,52,26,0,508,
  	509,5,0,0,1,509,51,1,0,0,0,510,514,3,56,28,0,511,514,3,96,48,0,512,514,
  	3,54,27,0,513,510,1,0,0,0,513,511,1,0,0,0,513,512,1,0,0,0,514,53,1,0,
  	0,0,515,516,5,26,0,0,516,519,5,109,0,0,517,518,5,74,0,0,518,520,3,112,
  	56,0,519,517,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,522,5,80,0,0,
  	522,523,3,52,26,0,523,524,5,27,0,0,524,525,3,52,26,0,525,55,1,0,0,0,526,
  	527,6,28,-1,0,527,528,3,64,32,0,528,549,1,0,0,0,529,530,10,7,0,0,530,
  	531,5,28,0,0,531,548,3,56,28,8,532,533,10,6,0,0,533,534,5,29,0,0,534,
  	548,3,56,28,7,535,536,10,5,0,0,536,537,5,30,0,0,537,548,3,56,28,6,538,
  	539,10,4,0,0,539,540,5,31,0,0,540,548,3,56,28,5,541,542,10,3,0,0,542,
  	543,5,32,0,0,543,548,3,56,28,4,544,545,10,2,0,0,545,546,5,33,0,0,546,
  	548,3,56,28,3,547,529,1,0,0,0,547,532,1,0,0,0,547,535,1,0,0,0,547,538,
  	1,0,0,0,547,541,1,0,0,0,547,544,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,
  	0,549,550,1,0,0,0,550,57,1,0,0,0,551,549,1,0,0,0,552,561,5,88,0,0,553,
  	558,3,62,31,0,554,555,5,77,0,0,555,557,3,62,31,0,556,554,1,0,0,0,557,
  	560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,562,1,0,0,0,560,558,1,
  	0,0,0,561,553,1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,564,5,94,0,
  	0,564,59,1,0,0,0,565,570,5,109,0,0,566,567,5,77,0,0,567,569,5,109,0,0,
  	568,566,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,1,0,0,0,571,61,
  	1,0,0,0,572,570,1,0,0,0,573,574,5,109,0,0,574,575,5,74,0,0,575,576,3,
  	112,56,0,576,63,1,0,0,0,577,578,6,32,-1,0,578,579,3,66,33,0,579,588,1,
  	0,0,0,580,581,10,2,0,0,581,582,5,80,0,0,582,587,3,66,33,0,583,584,10,
  	1,0,0,584,585,5,90,0,0,585,587,3,66,33,0,586,580,1,0,0,0,586,583,1,0,
  	0,0,587,590,1,0,0,0,588,586,1,0,0,0,588,589,1,0,0,0,589,65,1,0,0,0,590,
  	588,1,0,0,0,591,592,6,33,-1,0,592,593,3,68,34,0,593,608,1,0,0,0,594,595,
  	10,4,0,0,595,596,5,86,0,0,596,607,3,68,34,0,597,598,10,3,0,0,598,599,
  	5,81,0,0,599,607,3,68,34,0,600,601,10,2,0,0,601,602,5,87,0,0,602,607,
  	3,68,34,0,603,604,10,1,0,0,604,605,5,82,0,0,605,607,3,68,34,0,606,594,
  	1,0,0,0,606,597,1,0,0,0,606,600,1,0,0,0,606,603,1,0,0,0,607,610,1,0,0,
  	0,608,606,1,0,0,0,608,609,1,0,0,0,609,67,1,0,0,0,610,608,1,0,0,0,611,
  	612,6,34,-1,0,612,613,3,70,35,0,613,622,1,0,0,0,614,615,10,2,0,0,615,
  	616,5,91,0,0,616,621,3,70,35,0,617,618,10,1,0,0,618,619,5,89,0,0,619,
  	621,3,70,35,0,620,614,1,0,0,0,620,617,1,0,0,0,621,624,1,0,0,0,622,620,
  	1,0,0,0,622,623,1,0,0,0,623,69,1,0,0,0,624,622,1,0,0,0,625,626,6,35,-1,
  	0,626,627,3,72,36,0,627,636,1,0,0,0,628,629,10,2,0,0,629,630,5,97,0,0,
  	630,635,3,72,36,0,631,632,10,1,0,0,632,633,7,4,0,0,633,635,3,72,36,0,
  	634,628,1,0,0,0,634,631,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,
  	1,0,0,0,637,71,1,0,0,0,638,636,1,0,0,0,639,640,5,35,0,0,640,647,3,72,
  	36,0,641,642,5,89,0,0,642,647,3,72,36,0,643,644,5,91,0,0,644,647,3,72,
  	36,0,645,647,3,74,37,0,646,639,1,0,0,0,646,641,1,0,0,0,646,643,1,0,0,
  	0,646,645,1,0,0,0,647,73,1,0,0,0,648,657,3,76,38,0,649,652,3,76,38,0,
  	650,651,7,5,0,0,651,653,3,80,40,0,652,650,1,0,0,0,653,654,1,0,0,0,654,
  	652,1,0,0,0,654,655,1,0,0,0,655,657,1,0,0,0,656,648,1,0,0,0,656,649,1,
  	0,0,0,657,75,1,0,0,0,658,687,3,98,49,0,659,687,3,78,39,0,660,687,3,80,
  	40,0,661,662,5,88,0,0,662,663,3,52,26,0,663,664,5,94,0,0,664,687,1,0,
  	0,0,665,666,5,109,0,0,666,667,5,78,0,0,667,670,5,36,0,0,668,669,5,72,
  	0,0,669,671,5,21,0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,674,1,0,0,0,
  	672,673,5,88,0,0,673,675,5,94,0,0,674,672,1,0,0,0,674,675,1,0,0,0,675,
  	687,1,0,0,0,676,677,5,109,0,0,677,678,5,78,0,0,678,679,5,37,0,0,679,680,
  	5,88,0,0,680,681,3,52,26,0,681,684,5,94,0,0,682,683,5,72,0,0,683,685,
  	5,21,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,686,658,1,0,
  	0,0,686,659,1,0,0,0,686,660,1,0,0,0,686,661,1,0,0,0,686,665,1,0,0,0,686,
  	676,1,0,0,0,687,77,1,0,0,0,688,689,5,72,0,0,689,690,5,109,0,0,690,79,
  	1,0,0,0,691,697,3,82,41,0,692,697,3,84,42,0,693,697,3,86,43,0,694,697,
  	3,90,45,0,695,697,3,88,44,0,696,691,1,0,0,0,696,692,1,0,0,0,696,693,1,
  	0,0,0,696,694,1,0,0,0,696,695,1,0,0,0,697,81,1,0,0,0,698,699,5,38,0,0,
  	699,703,5,88,0,0,700,701,3,92,46,0,701,702,5,73,0,0,702,704,1,0,0,0,703,
  	700,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,706,3,52,26,0,706,707,
  	5,94,0,0,707,769,1,0,0,0,708,709,5,39,0,0,709,713,5,88,0,0,710,711,3,
  	92,46,0,711,712,5,73,0,0,712,714,1,0,0,0,713,710,1,0,0,0,713,714,1,0,
  	0,0,714,715,1,0,0,0,715,716,3,52,26,0,716,717,5,94,0,0,717,769,1,0,0,
  	0,718,719,5,40,0,0,719,723,5,88,0,0,720,721,3,92,46,0,721,722,5,73,0,
  	0,722,724,1,0,0,0,723,720,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,
  	726,3,52,26,0,726,727,5,94,0,0,727,769,1,0,0,0,728,729,5,41,0,0,729,733,
  	5,88,0,0,730,731,3,92,46,0,731,732,5,73,0,0,732,734,1,0,0,0,733,730,1,
  	0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,736,3,52,26,0,736,737,5,94,
  	0,0,737,769,1,0,0,0,738,739,5,42,0,0,739,743,5,88,0,0,740,741,3,92,46,
  	0,741,742,5,73,0,0,742,744,1,0,0,0,743,740,1,0,0,0,743,744,1,0,0,0,744,
  	745,1,0,0,0,745,746,3,52,26,0,746,747,5,94,0,0,747,769,1,0,0,0,748,749,
  	5,43,0,0,749,753,5,88,0,0,750,751,3,92,46,0,751,752,5,73,0,0,752,754,
  	1,0,0,0,753,750,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,756,3,52,
  	26,0,756,757,5,94,0,0,757,769,1,0,0,0,758,759,5,44,0,0,759,763,5,88,0,
  	0,760,761,3,92,46,0,761,762,5,73,0,0,762,764,1,0,0,0,763,760,1,0,0,0,
  	763,764,1,0,0,0,764,765,1,0,0,0,765,766,3,52,26,0,766,767,5,94,0,0,767,
  	769,1,0,0,0,768,698,1,0,0,0,768,708,1,0,0,0,768,718,1,0,0,0,768,728,1,
  	0,0,0,768,738,1,0,0,0,768,748,1,0,0,0,768,758,1,0,0,0,769,83,1,0,0,0,
  	770,771,5,45,0,0,771,772,5,88,0,0,772,773,3,92,46,0,773,774,5,95,0,0,
  	774,775,3,94,47,0,775,776,5,73,0,0,776,777,3,52,26,0,777,778,5,94,0,0,
  	778,85,1,0,0,0,779,803,5,109,0,0,780,781,5,85,0,0,781,786,3,52,26,0,782,
  	783,5,77,0,0,783,785,3,52,26,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,
  	1,0,0,0,786,787,1,0,0,0,787,789,1,0,0,0,788,786,1,0,0,0,789,801,5,93,
  	0,0,790,791,5,85,0,0,791,796,3,52,26,0,792,793,5,77,0,0,793,795,3,52,
  	26,0,794,792,1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,
  	797,799,1,0,0,0,798,796,1,0,0,0,799,800,5,93,0,0,800,802,1,0,0,0,801,
  	790,1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,780,1,0,0,0,803,804,1,
  	0,0,0,804,807,1,0,0,0,805,806,5,72,0,0,806,808,5,21,0,0,807,805,1,0,0,
  	0,807,808,1,0,0,0,808,821,1,0,0,0,809,818,5,88,0,0,810,815,3,52,26,0,
  	811,812,5,77,0,0,812,814,3,52,26,0,813,811,1,0,0,0,814,817,1,0,0,0,815,
  	813,1,0,0,0,815,816,1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,818,810,1,
  	0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,822,5,94,0,0,821,809,1,0,0,
  	0,821,822,1,0,0,0,822,87,1,0,0,0,823,824,5,46,0,0,824,825,5,88,0,0,825,
  	826,5,109,0,0,826,827,5,94,0,0,827,89,1,0,0,0,828,829,5,47,0,0,829,830,
  	5,88,0,0,830,831,3,112,56,0,831,832,5,94,0,0,832,854,1,0,0,0,833,834,
  	5,48,0,0,834,835,5,88,0,0,835,836,3,112,56,0,836,837,5,94,0,0,837,854,
  	1,0,0,0,838,839,5,49,0,0,839,840,5,88,0,0,840,841,3,112,56,0,841,842,
  	5,94,0,0,842,854,1,0,0,0,843,844,5,50,0,0,844,845,5,88,0,0,845,846,3,
  	112,56,0,846,847,5,94,0,0,847,854,1,0,0,0,848,849,5,51,0,0,849,850,5,
  	88,0,0,850,851,3,112,56,0,851,852,5,94,0,0,852,854,1,0,0,0,853,828,1,
  	0,0,0,853,833,1,0,0,0,853,838,1,0,0,0,853,843,1,0,0,0,853,848,1,0,0,0,
  	854,91,1,0,0,0,855,858,5,109,0,0,856,857,5,74,0,0,857,859,3,112,56,0,
  	858,856,1,0,0,0,858,859,1,0,0,0,859,868,1,0,0,0,860,861,5,77,0,0,861,
  	864,5,109,0,0,862,863,5,74,0,0,863,865,3,112,56,0,864,862,1,0,0,0,864,
  	865,1,0,0,0,865,867,1,0,0,0,866,860,1,0,0,0,867,870,1,0,0,0,868,866,1,
  	0,0,0,868,869,1,0,0,0,869,93,1,0,0,0,870,868,1,0,0,0,871,872,5,109,0,
  	0,872,873,5,74,0,0,873,874,3,112,56,0,874,875,5,80,0,0,875,876,3,52,26,
  	0,876,95,1,0,0,0,877,878,5,52,0,0,878,879,3,52,26,0,879,880,5,53,0,0,
  	880,881,3,52,26,0,881,882,5,54,0,0,882,883,3,52,26,0,883,884,5,55,0,0,
  	884,97,1,0,0,0,885,901,5,56,0,0,886,901,5,57,0,0,887,901,5,104,0,0,888,
  	901,5,105,0,0,889,901,5,107,0,0,890,891,5,83,0,0,891,901,5,109,0,0,892,
  	893,5,109,0,0,893,894,5,75,0,0,894,901,5,109,0,0,895,901,3,100,50,0,896,
  	901,3,104,52,0,897,901,3,106,53,0,898,901,3,108,54,0,899,901,5,97,0,0,
  	900,885,1,0,0,0,900,886,1,0,0,0,900,887,1,0,0,0,900,888,1,0,0,0,900,889,
  	1,0,0,0,900,890,1,0,0,0,900,892,1,0,0,0,900,895,1,0,0,0,900,896,1,0,0,
  	0,900,897,1,0,0,0,900,898,1,0,0,0,900,899,1,0,0,0,901,99,1,0,0,0,902,
  	903,5,58,0,0,903,912,5,84,0,0,904,909,3,102,51,0,905,906,5,77,0,0,906,
  	908,3,102,51,0,907,905,1,0,0,0,908,911,1,0,0,0,909,907,1,0,0,0,909,910,
  	1,0,0,0,910,913,1,0,0,0,911,909,1,0,0,0,912,904,1,0,0,0,912,913,1,0,0,
  	0,913,914,1,0,0,0,914,955,5,92,0,0,915,916,5,59,0,0,916,925,5,84,0,0,
  	917,922,3,102,51,0,918,919,5,77,0,0,919,921,3,102,51,0,920,918,1,0,0,
  	0,921,924,1,0,0,0,922,920,1,0,0,0,922,923,1,0,0,0,923,926,1,0,0,0,924,
  	922,1,0,0,0,925,917,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,955,5,
  	92,0,0,928,929,5,60,0,0,929,938,5,84,0,0,930,935,3,102,51,0,931,932,5,
  	77,0,0,932,934,3,102,51,0,933,931,1,0,0,0,934,937,1,0,0,0,935,933,1,0,
  	0,0,935,936,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,938,930,1,0,0,0,938,
  	939,1,0,0,0,939,940,1,0,0,0,940,955,5,92,0,0,941,942,5,61,0,0,942,951,
  	5,84,0,0,943,948,3,102,51,0,944,945,5,77,0,0,945,947,3,102,51,0,946,944,
  	1,0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,948,949,1,0,0,0,949,952,1,0,0,
  	0,950,948,1,0,0,0,951,943,1,0,0,0,951,952,1,0,0,0,952,953,1,0,0,0,953,
  	955,5,92,0,0,954,902,1,0,0,0,954,915,1,0,0,0,954,928,1,0,0,0,954,941,
  	1,0,0,0,955,101,1,0,0,0,956,959,3,52,26,0,957,958,5,79,0,0,958,960,3,
  	52,26,0,959,957,1,0,0,0,959,960,1,0,0,0,960,103,1,0,0,0,961,962,5,62,
  	0,0,962,963,5,88,0,0,963,964,3,118,59,0,964,965,5,94,0,0,965,971,1,0,
  	0,0,966,967,3,118,59,0,967,968,5,84,0,0,968,969,5,92,0,0,969,971,1,0,
  	0,0,970,961,1,0,0,0,970,966,1,0,0,0,971,105,1,0,0,0,972,973,5,63,0,0,
  	973,974,5,88,0,0,974,975,3,112,56,0,975,976,5,94,0,0,976,985,1,0,0,0,
  	977,985,5,64,0,0,978,979,5,65,0,0,979,980,5,88,0,0,980,981,3,112,56,0,
  	981,982,5,94,0,0,982,985,1,0,0,0,983,985,5,65,0,0,984,972,1,0,0,0,984,
  	977,1,0,0,0,984,978,1,0,0,0,984,983,1,0,0,0,985,107,1,0,0,0,986,987,5,
  	66,0,0,987,988,5,84,0,0,988,993,3,110,55,0,989,990,5,77,0,0,990,992,3,
  	110,55,0,991,989,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,994,1,0,
  	0,0,994,996,1,0,0,0,995,993,1,0,0,0,996,997,5,92,0,0,997,109,1,0,0,0,
  	998,999,5,109,0,0,999,1000,5,74,0,0,1000,1001,3,112,56,0,1001,1002,5,
  	80,0,0,1002,1003,3,52,26,0,1003,1008,1,0,0,0,1004,1005,5,109,0,0,1005,
  	1006,7,1,0,0,1006,1008,3,52,26,0,1007,998,1,0,0,0,1007,1004,1,0,0,0,1008,
  	111,1,0,0,0,1009,1013,3,116,58,0,1010,1013,3,118,59,0,1011,1013,3,120,
  	60,0,1012,1009,1,0,0,0,1012,1010,1,0,0,0,1012,1011,1,0,0,0,1013,113,1,
  	0,0,0,1014,1015,3,112,56,0,1015,1016,5,0,0,1,1016,115,1,0,0,0,1017,1018,
  	5,109,0,0,1018,117,1,0,0,0,1019,1020,5,67,0,0,1020,1021,5,88,0,0,1021,
  	1022,3,112,56,0,1022,1023,5,94,0,0,1023,1045,1,0,0,0,1024,1025,5,58,0,
  	0,1025,1026,5,88,0,0,1026,1027,3,112,56,0,1027,1028,5,94,0,0,1028,1045,
  	1,0,0,0,1029,1030,5,59,0,0,1030,1031,5,88,0,0,1031,1032,3,112,56,0,1032,
  	1033,5,94,0,0,1033,1045,1,0,0,0,1034,1035,5,60,0,0,1035,1036,5,88,0,0,
  	1036,1037,3,112,56,0,1037,1038,5,94,0,0,1038,1045,1,0,0,0,1039,1040,5,
  	61,0,0,1040,1041,5,88,0,0,1041,1042,3,112,56,0,1042,1043,5,94,0,0,1043,
  	1045,1,0,0,0,1044,1019,1,0,0,0,1044,1024,1,0,0,0,1044,1029,1,0,0,0,1044,
  	1034,1,0,0,0,1044,1039,1,0,0,0,1045,119,1,0,0,0,1046,1047,5,66,0,0,1047,
  	1048,5,88,0,0,1048,1053,3,122,61,0,1049,1050,5,77,0,0,1050,1052,3,122,
  	61,0,1051,1049,1,0,0,0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,
  	1,0,0,0,1054,1056,1,0,0,0,1055,1053,1,0,0,0,1056,1057,5,94,0,0,1057,121,
  	1,0,0,0,1058,1059,5,109,0,0,1059,1060,5,74,0,0,1060,1061,3,112,56,0,1061,
  	123,1,0,0,0,125,129,142,145,153,156,162,168,171,177,180,186,189,195,198,
  	203,209,216,218,224,227,233,236,242,245,251,254,257,266,269,283,288,293,
  	297,306,317,328,332,339,350,356,358,362,378,384,390,398,402,408,413,420,
  	424,433,438,442,448,452,460,466,473,479,489,494,502,505,513,519,547,549,
  	558,561,570,586,588,606,608,620,622,634,636,646,654,656,670,674,684,686,
  	696,703,713,723,733,743,753,763,768,786,796,801,803,807,815,818,821,853,
  	858,864,868,900,909,912,922,925,935,938,948,951,954,959,970,984,993,1007,
  	1012,1044,1053
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  useParserStaticData = std::move(staticData);
}

}

USEParser::USEParser(TokenStream *input) : USEParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

USEParser::USEParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  USEParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *useParserStaticData->atn, useParserStaticData->decisionToDFA, useParserStaticData->sharedContextCache, options);
}

USEParser::~USEParser() {
  delete _interpreter;
}

const atn::ATN& USEParser::getATN() const {
  return *useParserStaticData->atn;
}

std::string USEParser::getGrammarFileName() const {
  return "USE.g4";
}

const std::vector<std::string>& USEParser::getRuleNames() const {
  return useParserStaticData->ruleNames;
}

const dfa::Vocabulary& USEParser::getVocabulary() const {
  return useParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView USEParser::getSerializedATN() const {
  return useParserStaticData->serializedATN;
}


//----------------- ModelContext ------------------------------------------------------------------

USEParser::ModelContext::ModelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ModelContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ModelContext::EOF() {
  return getToken(USEParser::EOF, 0);
}

std::vector<USEParser::ModelElementContext *> USEParser::ModelContext::modelElement() {
  return getRuleContexts<USEParser::ModelElementContext>();
}

USEParser::ModelElementContext* USEParser::ModelContext::modelElement(size_t i) {
  return getRuleContext<USEParser::ModelElementContext>(i);
}


size_t USEParser::ModelContext::getRuleIndex() const {
  return USEParser::RuleModel;
}


std::any USEParser::ModelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitModel(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ModelContext* USEParser::model() {
  ModelContext *_localctx = _tracker.createInstance<ModelContext>(_ctx, getState());
  enterRule(_localctx, 0, USEParser::RuleModel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(124);
    match(USEParser::T__0);
    setState(125);
    match(USEParser::ID);
    setState(129);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 16924) != 0) || ((((_la - 98) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 98)) & 13) != 0)) {
      setState(126);
      modelElement();
      setState(131);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(132);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModelElementContext ------------------------------------------------------------------

USEParser::ModelElementContext::ModelElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::ModelElementContext::getRuleIndex() const {
  return USEParser::RuleModelElement;
}

void USEParser::ModelElementContext::copyFrom(ModelElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EnumContext ------------------------------------------------------------------

USEParser::EnumTypeDefinitionContext* USEParser::EnumContext::enumTypeDefinition() {
  return getRuleContext<USEParser::EnumTypeDefinitionContext>(0);
}

USEParser::EnumContext::EnumContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::EnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AssociationContext ------------------------------------------------------------------

USEParser::AssociationDefinitionContext* USEParser::AssociationContext::associationDefinition() {
  return getRuleContext<USEParser::AssociationDefinitionContext>(0);
}

USEParser::AssociationContext::AssociationContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::AssociationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConstraintsContext ------------------------------------------------------------------

std::vector<USEParser::ConstraintDefinitionContext *> USEParser::ConstraintsContext::constraintDefinition() {
  return getRuleContexts<USEParser::ConstraintDefinitionContext>();
}

USEParser::ConstraintDefinitionContext* USEParser::ConstraintsContext::constraintDefinition(size_t i) {
  return getRuleContext<USEParser::ConstraintDefinitionContext>(i);
}

USEParser::ConstraintsContext::ConstraintsContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::ConstraintsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConstraints(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassContext ------------------------------------------------------------------

USEParser::ClassDefinitionContext* USEParser::ClassContext::classDefinition() {
  return getRuleContext<USEParser::ClassDefinitionContext>(0);
}

USEParser::ClassContext::ClassContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::ClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitClass(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AssociationClassContext ------------------------------------------------------------------

USEParser::AssociationClassDefinitionContext* USEParser::AssociationClassContext::associationClassDefinition() {
  return getRuleContext<USEParser::AssociationClassDefinitionContext>(0);
}

USEParser::AssociationClassContext::AssociationClassContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::AssociationClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationClass(this);
  else
    return visitor->visitChildren(this);
}
USEParser::ModelElementContext* USEParser::modelElement() {
  ModelElementContext *_localctx = _tracker.createInstance<ModelElementContext>(_ctx, getState());
  enterRule(_localctx, 2, USEParser::RuleModelElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(145);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::EnumContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(134);
      enumTypeDefinition();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::ClassContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(135);
      classDefinition();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::AssociationContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(136);
      associationDefinition();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::AssociationClassContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(137);
      associationClassDefinition();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::ConstraintsContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(138);
      match(USEParser::T__1);
      setState(142);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__18) {
        setState(139);
        constraintDefinition();
        setState(144);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumTypeDefinitionContext ------------------------------------------------------------------

USEParser::EnumTypeDefinitionContext::EnumTypeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

USEParser::IdListContext* USEParser::EnumTypeDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}


size_t USEParser::EnumTypeDefinitionContext::getRuleIndex() const {
  return USEParser::RuleEnumTypeDefinition;
}


std::any USEParser::EnumTypeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEnumTypeDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EnumTypeDefinitionContext* USEParser::enumTypeDefinition() {
  EnumTypeDefinitionContext *_localctx = _tracker.createInstance<EnumTypeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 4, USEParser::RuleEnumTypeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(147);
    match(USEParser::T__2);
    setState(148);
    match(USEParser::ID);
    setState(149);
    match(USEParser::LBRACE);
    setState(150);
    idList();
    setState(151);
    match(USEParser::RBRACE);
    setState(153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(152);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDefinitionContext ------------------------------------------------------------------

USEParser::ClassDefinitionContext::ClassDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ClassDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ClassDefinitionContext::ABSTRACT() {
  return getToken(USEParser::ABSTRACT, 0);
}

tree::TerminalNode* USEParser::ClassDefinitionContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::IdListContext* USEParser::ClassDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

std::vector<USEParser::AttributeDefinitionContext *> USEParser::ClassDefinitionContext::attributeDefinition() {
  return getRuleContexts<USEParser::AttributeDefinitionContext>();
}

USEParser::AttributeDefinitionContext* USEParser::ClassDefinitionContext::attributeDefinition(size_t i) {
  return getRuleContext<USEParser::AttributeDefinitionContext>(i);
}

std::vector<USEParser::OperationDefinitionContext *> USEParser::ClassDefinitionContext::operationDefinition() {
  return getRuleContexts<USEParser::OperationDefinitionContext>();
}

USEParser::OperationDefinitionContext* USEParser::ClassDefinitionContext::operationDefinition(size_t i) {
  return getRuleContext<USEParser::OperationDefinitionContext>(i);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::ClassDefinitionContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::ClassDefinitionContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<USEParser::StateMachineContext *> USEParser::ClassDefinitionContext::stateMachine() {
  return getRuleContexts<USEParser::StateMachineContext>();
}

USEParser::StateMachineContext* USEParser::ClassDefinitionContext::stateMachine(size_t i) {
  return getRuleContext<USEParser::StateMachineContext>(i);
}


size_t USEParser::ClassDefinitionContext::getRuleIndex() const {
  return USEParser::RuleClassDefinition;
}


std::any USEParser::ClassDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitClassDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ClassDefinitionContext* USEParser::classDefinition() {
  ClassDefinitionContext *_localctx = _tracker.createInstance<ClassDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 6, USEParser::RuleClassDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(156);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ABSTRACT) {
      setState(155);
      match(USEParser::ABSTRACT);
    }
    setState(158);
    match(USEParser::T__3);
    setState(159);
    match(USEParser::ID);
    setState(162);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LESS) {
      setState(160);
      match(USEParser::LESS);
      setState(161);
      idList();
    }
    setState(171);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__4) {
      setState(164);
      match(USEParser::T__4);
      setState(168);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(165);
        attributeDefinition();
        setState(170);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(180);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__5) {
      setState(173);
      match(USEParser::T__5);
      setState(177);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(174);
        operationDefinition();
        setState(179);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(189);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__1) {
      setState(182);
      match(USEParser::T__1);
      setState(186);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__19 || _la == USEParser::EXISTENTIAL) {
        setState(183);
        invariantClause();
        setState(188);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(198);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__6) {
      setState(191);
      match(USEParser::T__6);
      setState(195);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__22) {
        setState(192);
        stateMachine();
        setState(197);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(200);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationClassDefinitionContext ------------------------------------------------------------------

USEParser::AssociationClassDefinitionContext::AssociationClassDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::ABSTRACT() {
  return getToken(USEParser::ABSTRACT, 0);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::IdListContext* USEParser::AssociationClassDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::AssociationClassDefinitionContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::AssociationClassDefinitionContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::AGGREGATION() {
  return getToken(USEParser::AGGREGATION, 0);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::COMPOSITION() {
  return getToken(USEParser::COMPOSITION, 0);
}

std::vector<USEParser::AttributeDefinitionContext *> USEParser::AssociationClassDefinitionContext::attributeDefinition() {
  return getRuleContexts<USEParser::AttributeDefinitionContext>();
}

USEParser::AttributeDefinitionContext* USEParser::AssociationClassDefinitionContext::attributeDefinition(size_t i) {
  return getRuleContext<USEParser::AttributeDefinitionContext>(i);
}

std::vector<USEParser::OperationDefinitionContext *> USEParser::AssociationClassDefinitionContext::operationDefinition() {
  return getRuleContexts<USEParser::OperationDefinitionContext>();
}

USEParser::OperationDefinitionContext* USEParser::AssociationClassDefinitionContext::operationDefinition(size_t i) {
  return getRuleContext<USEParser::OperationDefinitionContext>(i);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::AssociationClassDefinitionContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::AssociationClassDefinitionContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<USEParser::StateMachineContext *> USEParser::AssociationClassDefinitionContext::stateMachine() {
  return getRuleContexts<USEParser::StateMachineContext>();
}

USEParser::StateMachineContext* USEParser::AssociationClassDefinitionContext::stateMachine(size_t i) {
  return getRuleContext<USEParser::StateMachineContext>(i);
}


size_t USEParser::AssociationClassDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAssociationClassDefinition;
}


std::any USEParser::AssociationClassDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationClassDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AssociationClassDefinitionContext* USEParser::associationClassDefinition() {
  AssociationClassDefinitionContext *_localctx = _tracker.createInstance<AssociationClassDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 8, USEParser::RuleAssociationClassDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(203);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ABSTRACT) {
      setState(202);
      match(USEParser::ABSTRACT);
    }
    setState(205);
    match(USEParser::T__8);
    setState(206);
    match(USEParser::ID);
    setState(209);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LESS) {
      setState(207);
      match(USEParser::LESS);
      setState(208);
      idList();
    }
    setState(218);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__9) {
      setState(211);
      match(USEParser::T__9);
      setState(212);
      associationEnd();
      setState(214); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(213);
        associationEnd();
        setState(216); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == USEParser::ID);
    }
    setState(227);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__4) {
      setState(220);
      match(USEParser::T__4);
      setState(224);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(221);
        attributeDefinition();
        setState(226);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(236);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__5) {
      setState(229);
      match(USEParser::T__5);
      setState(233);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(230);
        operationDefinition();
        setState(235);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(245);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__1) {
      setState(238);
      match(USEParser::T__1);
      setState(242);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__19 || _la == USEParser::EXISTENTIAL) {
        setState(239);
        invariantClause();
        setState(244);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(254);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__6) {
      setState(247);
      match(USEParser::T__6);
      setState(251);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__22) {
        setState(248);
        stateMachine();
        setState(253);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(257);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::AGGREGATION

    || _la == USEParser::COMPOSITION) {
      setState(256);
      _la = _input->LA(1);
      if (!(_la == USEParser::AGGREGATION

      || _la == USEParser::COMPOSITION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(259);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeDefinitionContext ------------------------------------------------------------------

USEParser::AttributeDefinitionContext::AttributeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::AttributeDefinitionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

USEParser::InitDefinitionContext* USEParser::AttributeDefinitionContext::initDefinition() {
  return getRuleContext<USEParser::InitDefinitionContext>(0);
}

USEParser::DerivedDefinitionContext* USEParser::AttributeDefinitionContext::derivedDefinition() {
  return getRuleContext<USEParser::DerivedDefinitionContext>(0);
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}


size_t USEParser::AttributeDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAttributeDefinition;
}


std::any USEParser::AttributeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAttributeDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AttributeDefinitionContext* USEParser::attributeDefinition() {
  AttributeDefinitionContext *_localctx = _tracker.createInstance<AttributeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 10, USEParser::RuleAttributeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(261);
    match(USEParser::ID);
    setState(262);
    match(USEParser::COLON);
    setState(263);
    type();
    setState(266);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__10: {
        setState(264);
        initDefinition();
        break;
      }

      case USEParser::T__11:
      case USEParser::T__12: {
        setState(265);
        derivedDefinition();
        break;
      }

      case USEParser::T__1:
      case USEParser::T__5:
      case USEParser::T__6:
      case USEParser::T__7:
      case USEParser::SEMI:
      case USEParser::AGGREGATION:
      case USEParser::COMPOSITION:
      case USEParser::ID: {
        break;
      }

    default:
      break;
    }
    setState(269);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(268);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDefinitionContext ------------------------------------------------------------------

USEParser::InitDefinitionContext::InitDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::InitDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::InitDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::InitDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}


size_t USEParser::InitDefinitionContext::getRuleIndex() const {
  return USEParser::RuleInitDefinition;
}


std::any USEParser::InitDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInitDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InitDefinitionContext* USEParser::initDefinition() {
  InitDefinitionContext *_localctx = _tracker.createInstance<InitDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 12, USEParser::RuleInitDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(271);
    match(USEParser::T__10);
    setState(272);
    _la = _input->LA(1);
    if (!(_la == USEParser::COLON

    || _la == USEParser::EQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(273);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DerivedDefinitionContext ------------------------------------------------------------------

USEParser::DerivedDefinitionContext::DerivedDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::DerivedDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::DerivedDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::DerivedDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}


size_t USEParser::DerivedDefinitionContext::getRuleIndex() const {
  return USEParser::RuleDerivedDefinition;
}


std::any USEParser::DerivedDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitDerivedDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::DerivedDefinitionContext* USEParser::derivedDefinition() {
  DerivedDefinitionContext *_localctx = _tracker.createInstance<DerivedDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 14, USEParser::RuleDerivedDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(275);
    _la = _input->LA(1);
    if (!(_la == USEParser::T__11

    || _la == USEParser::T__12)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(276);
    _la = _input->LA(1);
    if (!(_la == USEParser::COLON

    || _la == USEParser::EQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(277);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperationDefinitionContext ------------------------------------------------------------------

USEParser::OperationDefinitionContext::OperationDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::OperationDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::ParamListContext* USEParser::OperationDefinitionContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::OperationDefinitionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::SOIL_OPERATION() {
  return getToken(USEParser::SOIL_OPERATION, 0);
}

std::vector<USEParser::PrePostClauseContext *> USEParser::OperationDefinitionContext::prePostClause() {
  return getRuleContexts<USEParser::PrePostClauseContext>();
}

USEParser::PrePostClauseContext* USEParser::OperationDefinitionContext::prePostClause(size_t i) {
  return getRuleContext<USEParser::PrePostClauseContext>(i);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::OperationDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::OperationDefinitionContext::getRuleIndex() const {
  return USEParser::RuleOperationDefinition;
}


std::any USEParser::OperationDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::OperationDefinitionContext* USEParser::operationDefinition() {
  OperationDefinitionContext *_localctx = _tracker.createInstance<OperationDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 16, USEParser::RuleOperationDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(279);
    match(USEParser::ID);
    setState(280);
    paramList();
    setState(283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(281);
      match(USEParser::COLON);
      setState(282);
      type();
    }
    setState(288);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::EQUAL: {
        setState(285);
        match(USEParser::EQUAL);
        setState(286);
        expression();
        break;
      }

      case USEParser::SOIL_OPERATION: {
        setState(287);
        match(USEParser::SOIL_OPERATION);
        break;
      }

      case USEParser::T__1:
      case USEParser::T__6:
      case USEParser::T__7:
      case USEParser::T__20:
      case USEParser::T__21:
      case USEParser::SEMI:
      case USEParser::AGGREGATION:
      case USEParser::COMPOSITION:
      case USEParser::ID: {
        break;
      }

    default:
      break;
    }
    setState(293);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::T__20

    || _la == USEParser::T__21) {
      setState(290);
      prePostClause();
      setState(295);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(297);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(296);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationDefinitionContext ------------------------------------------------------------------

USEParser::AssociationDefinitionContext::AssociationDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::AssociationDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAssociationDefinition;
}

void USEParser::AssociationDefinitionContext::copyFrom(AssociationDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AggregationContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::AggregationContext::AGGREGATION() {
  return getToken(USEParser::AGGREGATION, 0);
}

tree::TerminalNode* USEParser::AggregationContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::AggregationContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::AggregationContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::AggregationContext::AggregationContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AggregationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAggregation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CompositionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::CompositionContext::COMPOSITION() {
  return getToken(USEParser::COMPOSITION, 0);
}

tree::TerminalNode* USEParser::CompositionContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::CompositionContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::CompositionContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::CompositionContext::CompositionContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::CompositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitComposition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleAssociationContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SimpleAssociationContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::SimpleAssociationContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::SimpleAssociationContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::SimpleAssociationContext::SimpleAssociationContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SimpleAssociationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSimpleAssociation(this);
  else
    return visitor->visitChildren(this);
}
USEParser::AssociationDefinitionContext* USEParser::associationDefinition() {
  AssociationDefinitionContext *_localctx = _tracker.createInstance<AssociationDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 18, USEParser::RuleAssociationDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(332);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__13: {
        _localctx = _tracker.createInstance<USEParser::SimpleAssociationContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(299);
        match(USEParser::T__13);
        setState(300);
        match(USEParser::ID);
        setState(301);
        match(USEParser::T__9);
        setState(302);
        associationEnd();
        setState(304); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(303);
          associationEnd();
          setState(306); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(308);
        match(USEParser::T__7);
        break;
      }

      case USEParser::AGGREGATION: {
        _localctx = _tracker.createInstance<USEParser::AggregationContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(310);
        match(USEParser::AGGREGATION);
        setState(311);
        match(USEParser::ID);
        setState(312);
        match(USEParser::T__9);
        setState(313);
        associationEnd();
        setState(315); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(314);
          associationEnd();
          setState(317); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(319);
        match(USEParser::T__7);
        break;
      }

      case USEParser::COMPOSITION: {
        _localctx = _tracker.createInstance<USEParser::CompositionContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(321);
        match(USEParser::COMPOSITION);
        setState(322);
        match(USEParser::ID);
        setState(323);
        match(USEParser::T__9);
        setState(324);
        associationEnd();
        setState(326); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(325);
          associationEnd();
          setState(328); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(330);
        match(USEParser::T__7);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationEndContext ------------------------------------------------------------------

USEParser::AssociationEndContext::AssociationEndContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::AssociationEndContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AssociationEndContext::LBRACK() {
  return getToken(USEParser::LBRACK, 0);
}

USEParser::MultiplicityContext* USEParser::AssociationEndContext::multiplicity() {
  return getRuleContext<USEParser::MultiplicityContext>(0);
}

tree::TerminalNode* USEParser::AssociationEndContext::RBRACK() {
  return getToken(USEParser::RBRACK, 0);
}

USEParser::RoleContext* USEParser::AssociationEndContext::role() {
  return getRuleContext<USEParser::RoleContext>(0);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::ORDERED() {
  return getTokens(USEParser::ORDERED);
}

tree::TerminalNode* USEParser::AssociationEndContext::ORDERED(size_t i) {
  return getToken(USEParser::ORDERED, i);
}

std::vector<USEParser::SubsetsContext *> USEParser::AssociationEndContext::subsets() {
  return getRuleContexts<USEParser::SubsetsContext>();
}

USEParser::SubsetsContext* USEParser::AssociationEndContext::subsets(size_t i) {
  return getRuleContext<USEParser::SubsetsContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::UNION() {
  return getTokens(USEParser::UNION);
}

tree::TerminalNode* USEParser::AssociationEndContext::UNION(size_t i) {
  return getToken(USEParser::UNION, i);
}

std::vector<USEParser::RedefinesContext *> USEParser::AssociationEndContext::redefines() {
  return getRuleContexts<USEParser::RedefinesContext>();
}

USEParser::RedefinesContext* USEParser::AssociationEndContext::redefines(size_t i) {
  return getRuleContext<USEParser::RedefinesContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::EQUAL() {
  return getTokens(USEParser::EQUAL);
}

tree::TerminalNode* USEParser::AssociationEndContext::EQUAL(size_t i) {
  return getToken(USEParser::EQUAL, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::AssociationEndContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::AssociationEndContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<USEParser::ParamListContext *> USEParser::AssociationEndContext::paramList() {
  return getRuleContexts<USEParser::ParamListContext>();
}

USEParser::ParamListContext* USEParser::AssociationEndContext::paramList(size_t i) {
  return getRuleContext<USEParser::ParamListContext>(i);
}

tree::TerminalNode* USEParser::AssociationEndContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::LPAREN() {
  return getTokens(USEParser::LPAREN);
}

tree::TerminalNode* USEParser::AssociationEndContext::LPAREN(size_t i) {
  return getToken(USEParser::LPAREN, i);
}

std::vector<USEParser::ElemVarsDeclarationContext *> USEParser::AssociationEndContext::elemVarsDeclaration() {
  return getRuleContexts<USEParser::ElemVarsDeclarationContext>();
}

USEParser::ElemVarsDeclarationContext* USEParser::AssociationEndContext::elemVarsDeclaration(size_t i) {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::RPAREN() {
  return getTokens(USEParser::RPAREN);
}

tree::TerminalNode* USEParser::AssociationEndContext::RPAREN(size_t i) {
  return getToken(USEParser::RPAREN, i);
}


size_t USEParser::AssociationEndContext::getRuleIndex() const {
  return USEParser::RuleAssociationEnd;
}


std::any USEParser::AssociationEndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationEnd(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AssociationEndContext* USEParser::associationEnd() {
  AssociationEndContext *_localctx = _tracker.createInstance<AssociationEndContext>(_ctx, getState());
  enterRule(_localctx, 20, USEParser::RuleAssociationEnd);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(334);
    match(USEParser::ID);
    setState(335);
    match(USEParser::LBRACK);
    setState(336);
    multiplicity();
    setState(337);
    match(USEParser::RBRACK);
    setState(339);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__15) {
      setState(338);
      role();
    }
    setState(358);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 438272) != 0) || _la == USEParser::ORDERED

    || _la == USEParser::UNION) {
      setState(356);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case USEParser::ORDERED: {
          setState(341);
          match(USEParser::ORDERED);
          break;
        }

        case USEParser::T__17: {
          setState(342);
          subsets();
          break;
        }

        case USEParser::UNION: {
          setState(343);
          match(USEParser::UNION);
          break;
        }

        case USEParser::T__16: {
          setState(344);
          redefines();
          break;
        }

        case USEParser::T__11:
        case USEParser::T__12: {
          setState(345);
          _la = _input->LA(1);
          if (!(_la == USEParser::T__11

          || _la == USEParser::T__12)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(350);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == USEParser::LPAREN) {
            setState(346);
            match(USEParser::LPAREN);
            setState(347);
            elemVarsDeclaration();
            setState(348);
            match(USEParser::RPAREN);
          }
          setState(352);
          match(USEParser::EQUAL);
          setState(353);
          expression();
          break;
        }

        case USEParser::T__14: {
          setState(354);
          match(USEParser::T__14);
          setState(355);
          paramList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(360);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(362);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(361);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RoleContext ------------------------------------------------------------------

USEParser::RoleContext::RoleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::RoleContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::RoleContext::getRuleIndex() const {
  return USEParser::RuleRole;
}


std::any USEParser::RoleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRole(this);
  else
    return visitor->visitChildren(this);
}

USEParser::RoleContext* USEParser::role() {
  RoleContext *_localctx = _tracker.createInstance<RoleContext>(_ctx, getState());
  enterRule(_localctx, 22, USEParser::RuleRole);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(364);
    match(USEParser::T__15);
    setState(365);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinesContext ------------------------------------------------------------------

USEParser::RedefinesContext::RedefinesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::RedefinesContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::RedefinesContext::getRuleIndex() const {
  return USEParser::RuleRedefines;
}


std::any USEParser::RedefinesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRedefines(this);
  else
    return visitor->visitChildren(this);
}

USEParser::RedefinesContext* USEParser::redefines() {
  RedefinesContext *_localctx = _tracker.createInstance<RedefinesContext>(_ctx, getState());
  enterRule(_localctx, 24, USEParser::RuleRedefines);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(367);
    match(USEParser::T__16);
    setState(368);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsetsContext ------------------------------------------------------------------

USEParser::SubsetsContext::SubsetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::SubsetsContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::SubsetsContext::getRuleIndex() const {
  return USEParser::RuleSubsets;
}


std::any USEParser::SubsetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSubsets(this);
  else
    return visitor->visitChildren(this);
}

USEParser::SubsetsContext* USEParser::subsets() {
  SubsetsContext *_localctx = _tracker.createInstance<SubsetsContext>(_ctx, getState());
  enterRule(_localctx, 26, USEParser::RuleSubsets);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(370);
    match(USEParser::T__17);
    setState(371);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityContext ------------------------------------------------------------------

USEParser::MultiplicityContext::MultiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::MultiplicityRangeContext *> USEParser::MultiplicityContext::multiplicityRange() {
  return getRuleContexts<USEParser::MultiplicityRangeContext>();
}

USEParser::MultiplicityRangeContext* USEParser::MultiplicityContext::multiplicityRange(size_t i) {
  return getRuleContext<USEParser::MultiplicityRangeContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::MultiplicityContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::MultiplicityContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::MultiplicityContext::getRuleIndex() const {
  return USEParser::RuleMultiplicity;
}


std::any USEParser::MultiplicityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicity(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicityContext* USEParser::multiplicity() {
  MultiplicityContext *_localctx = _tracker.createInstance<MultiplicityContext>(_ctx, getState());
  enterRule(_localctx, 28, USEParser::RuleMultiplicity);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(373);
    multiplicityRange();
    setState(378);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(374);
      match(USEParser::COMMA);
      setState(375);
      multiplicityRange();
      setState(380);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityRangeContext ------------------------------------------------------------------

USEParser::MultiplicityRangeContext::MultiplicityRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::MultiplicitySpecContext *> USEParser::MultiplicityRangeContext::multiplicitySpec() {
  return getRuleContexts<USEParser::MultiplicitySpecContext>();
}

USEParser::MultiplicitySpecContext* USEParser::MultiplicityRangeContext::multiplicitySpec(size_t i) {
  return getRuleContext<USEParser::MultiplicitySpecContext>(i);
}

tree::TerminalNode* USEParser::MultiplicityRangeContext::DOTDOT() {
  return getToken(USEParser::DOTDOT, 0);
}


size_t USEParser::MultiplicityRangeContext::getRuleIndex() const {
  return USEParser::RuleMultiplicityRange;
}


std::any USEParser::MultiplicityRangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicityRange(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicityRangeContext* USEParser::multiplicityRange() {
  MultiplicityRangeContext *_localctx = _tracker.createInstance<MultiplicityRangeContext>(_ctx, getState());
  enterRule(_localctx, 30, USEParser::RuleMultiplicityRange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(381);
    multiplicitySpec();
    setState(384);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::DOTDOT) {
      setState(382);
      match(USEParser::DOTDOT);
      setState(383);
      multiplicitySpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicitySpecContext ------------------------------------------------------------------

USEParser::MultiplicitySpecContext::MultiplicitySpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::MultiplicitySpecContext::INT() {
  return getToken(USEParser::INT, 0);
}

tree::TerminalNode* USEParser::MultiplicitySpecContext::STAR() {
  return getToken(USEParser::STAR, 0);
}


size_t USEParser::MultiplicitySpecContext::getRuleIndex() const {
  return USEParser::RuleMultiplicitySpec;
}


std::any USEParser::MultiplicitySpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicitySpec(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicitySpecContext* USEParser::multiplicitySpec() {
  MultiplicitySpecContext *_localctx = _tracker.createInstance<MultiplicitySpecContext>(_ctx, getState());
  enterRule(_localctx, 32, USEParser::RuleMultiplicitySpec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(386);
    _la = _input->LA(1);
    if (!(_la == USEParser::STAR

    || _la == USEParser::INT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintDefinitionContext ------------------------------------------------------------------

USEParser::ConstraintDefinitionContext::ConstraintDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::ConstraintDefinitionContext::getRuleIndex() const {
  return USEParser::RuleConstraintDefinition;
}

void USEParser::ConstraintDefinitionContext::copyFrom(ConstraintDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrePostDefinitionContext ------------------------------------------------------------------

USEParser::PrePostContext* USEParser::PrePostDefinitionContext::prePost() {
  return getRuleContext<USEParser::PrePostContext>(0);
}

USEParser::PrePostDefinitionContext::PrePostDefinitionContext(ConstraintDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PrePostDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPrePostDefinition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InvariantDefinitionContext ------------------------------------------------------------------

USEParser::InvariantContext* USEParser::InvariantDefinitionContext::invariant() {
  return getRuleContext<USEParser::InvariantContext>(0);
}

USEParser::InvariantDefinitionContext::InvariantDefinitionContext(ConstraintDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::InvariantDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInvariantDefinition(this);
  else
    return visitor->visitChildren(this);
}
USEParser::ConstraintDefinitionContext* USEParser::constraintDefinition() {
  ConstraintDefinitionContext *_localctx = _tracker.createInstance<ConstraintDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 34, USEParser::RuleConstraintDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(390);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::InvariantDefinitionContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(388);
      invariant();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::PrePostDefinitionContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(389);
      prePost();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantContext ------------------------------------------------------------------

USEParser::InvariantContext::InvariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::SimpleTypeContext* USEParser::InvariantContext::simpleType() {
  return getRuleContext<USEParser::SimpleTypeContext>(0);
}

std::vector<tree::TerminalNode *> USEParser::InvariantContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::InvariantContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::InvariantContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::InvariantContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::InvariantContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::InvariantContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::InvariantContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::InvariantContext::getRuleIndex() const {
  return USEParser::RuleInvariant;
}


std::any USEParser::InvariantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInvariant(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InvariantContext* USEParser::invariant() {
  InvariantContext *_localctx = _tracker.createInstance<InvariantContext>(_ctx, getState());
  enterRule(_localctx, 36, USEParser::RuleInvariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(392);
    match(USEParser::T__18);
    setState(402);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(393);
      match(USEParser::ID);
      setState(398);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(394);
        match(USEParser::COMMA);
        setState(395);
        match(USEParser::ID);
        setState(400);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(401);
      match(USEParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(404);
    simpleType();
    setState(408);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::T__19 || _la == USEParser::EXISTENTIAL) {
      setState(405);
      invariantClause();
      setState(410);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantClauseContext ------------------------------------------------------------------

USEParser::InvariantClauseContext::InvariantClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::InvariantClauseContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::InvariantClauseContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::InvariantClauseContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::InvariantClauseContext::EXISTENTIAL() {
  return getToken(USEParser::EXISTENTIAL, 0);
}


size_t USEParser::InvariantClauseContext::getRuleIndex() const {
  return USEParser::RuleInvariantClause;
}


std::any USEParser::InvariantClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInvariantClause(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InvariantClauseContext* USEParser::invariantClause() {
  InvariantClauseContext *_localctx = _tracker.createInstance<InvariantClauseContext>(_ctx, getState());
  enterRule(_localctx, 38, USEParser::RuleInvariantClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(424);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__19: {
        enterOuterAlt(_localctx, 1);
        setState(411);
        match(USEParser::T__19);
        setState(413);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(412);
          match(USEParser::ID);
        }
        setState(415);
        match(USEParser::COLON);
        setState(416);
        expression();
        break;
      }

      case USEParser::EXISTENTIAL: {
        enterOuterAlt(_localctx, 2);
        setState(417);
        match(USEParser::EXISTENTIAL);
        setState(418);
        match(USEParser::T__19);
        setState(420);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(419);
          match(USEParser::ID);
        }
        setState(422);
        match(USEParser::COLON);
        setState(423);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrePostContext ------------------------------------------------------------------

USEParser::PrePostContext::PrePostContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::PrePostContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::PrePostContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::PrePostContext::COLON_COLON() {
  return getToken(USEParser::COLON_COLON, 0);
}

USEParser::ParamListContext* USEParser::PrePostContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}

tree::TerminalNode* USEParser::PrePostContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::PrePostContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

std::vector<USEParser::PrePostClauseContext *> USEParser::PrePostContext::prePostClause() {
  return getRuleContexts<USEParser::PrePostClauseContext>();
}

USEParser::PrePostClauseContext* USEParser::PrePostContext::prePostClause(size_t i) {
  return getRuleContext<USEParser::PrePostClauseContext>(i);
}


size_t USEParser::PrePostContext::getRuleIndex() const {
  return USEParser::RulePrePost;
}


std::any USEParser::PrePostContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPrePost(this);
  else
    return visitor->visitChildren(this);
}

USEParser::PrePostContext* USEParser::prePost() {
  PrePostContext *_localctx = _tracker.createInstance<PrePostContext>(_ctx, getState());
  enterRule(_localctx, 40, USEParser::RulePrePost);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(426);
    match(USEParser::T__18);
    setState(427);
    match(USEParser::ID);
    setState(428);
    match(USEParser::COLON_COLON);
    setState(429);
    match(USEParser::ID);
    setState(430);
    paramList();
    setState(433);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(431);
      match(USEParser::COLON);
      setState(432);
      type();
    }
    setState(436); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(435);
      prePostClause();
      setState(438); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::T__20

    || _la == USEParser::T__21);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrePostClauseContext ------------------------------------------------------------------

USEParser::PrePostClauseContext::PrePostClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PrePostClauseContext::getRuleIndex() const {
  return USEParser::RulePrePostClause;
}

void USEParser::PrePostClauseContext::copyFrom(PrePostClauseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PreConditionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PreConditionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::PreConditionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::PreConditionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::PreConditionContext::PreConditionContext(PrePostClauseContext *ctx) { copyFrom(ctx); }


std::any USEParser::PreConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPreCondition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PostConditionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PostConditionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::PostConditionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::PostConditionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::PostConditionContext::PostConditionContext(PrePostClauseContext *ctx) { copyFrom(ctx); }


std::any USEParser::PostConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPostCondition(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PrePostClauseContext* USEParser::prePostClause() {
  PrePostClauseContext *_localctx = _tracker.createInstance<PrePostClauseContext>(_ctx, getState());
  enterRule(_localctx, 42, USEParser::RulePrePostClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(452);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__20: {
        _localctx = _tracker.createInstance<USEParser::PreConditionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(440);
        match(USEParser::T__20);
        setState(442);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(441);
          match(USEParser::ID);
        }
        setState(444);
        match(USEParser::COLON);
        setState(445);
        expression();
        break;
      }

      case USEParser::T__21: {
        _localctx = _tracker.createInstance<USEParser::PostConditionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(446);
        match(USEParser::T__21);
        setState(448);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(447);
          match(USEParser::ID);
        }
        setState(450);
        match(USEParser::COLON);
        setState(451);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateMachineContext ------------------------------------------------------------------

USEParser::StateMachineContext::StateMachineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::StateMachineContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::StateDefinitionContext *> USEParser::StateMachineContext::stateDefinition() {
  return getRuleContexts<USEParser::StateDefinitionContext>();
}

USEParser::StateDefinitionContext* USEParser::StateMachineContext::stateDefinition(size_t i) {
  return getRuleContext<USEParser::StateDefinitionContext>(i);
}

std::vector<USEParser::TransitionDefinitionContext *> USEParser::StateMachineContext::transitionDefinition() {
  return getRuleContexts<USEParser::TransitionDefinitionContext>();
}

USEParser::TransitionDefinitionContext* USEParser::StateMachineContext::transitionDefinition(size_t i) {
  return getRuleContext<USEParser::TransitionDefinitionContext>(i);
}


size_t USEParser::StateMachineContext::getRuleIndex() const {
  return USEParser::RuleStateMachine;
}


std::any USEParser::StateMachineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitStateMachine(this);
  else
    return visitor->visitChildren(this);
}

USEParser::StateMachineContext* USEParser::stateMachine() {
  StateMachineContext *_localctx = _tracker.createInstance<StateMachineContext>(_ctx, getState());
  enterRule(_localctx, 44, USEParser::RuleStateMachine);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(454);
    match(USEParser::T__22);
    setState(455);
    match(USEParser::ID);
    setState(456);
    match(USEParser::T__23);
    setState(458); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(457);
      stateDefinition();
      setState(460); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::ID);
    setState(462);
    match(USEParser::T__24);
    setState(464); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(463);
      transitionDefinition();
      setState(466); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::ID);
    setState(468);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateDefinitionContext ------------------------------------------------------------------

USEParser::StateDefinitionContext::StateDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::StateDefinitionContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::StateDefinitionContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::StateDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::StateDefinitionContext::LBRACK() {
  return getToken(USEParser::LBRACK, 0);
}

USEParser::ExpressionContext* USEParser::StateDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::StateDefinitionContext::RBRACK() {
  return getToken(USEParser::RBRACK, 0);
}


size_t USEParser::StateDefinitionContext::getRuleIndex() const {
  return USEParser::RuleStateDefinition;
}


std::any USEParser::StateDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitStateDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::StateDefinitionContext* USEParser::stateDefinition() {
  StateDefinitionContext *_localctx = _tracker.createInstance<StateDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 46, USEParser::RuleStateDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(470);
    match(USEParser::ID);
    setState(473);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(471);
      match(USEParser::COLON);
      setState(472);
      match(USEParser::ID);
    }
    setState(479);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LBRACK) {
      setState(475);
      match(USEParser::LBRACK);
      setState(476);
      expression();
      setState(477);
      match(USEParser::RBRACK);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransitionDefinitionContext ------------------------------------------------------------------

USEParser::TransitionDefinitionContext::TransitionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::ARROW() {
  return getToken(USEParser::ARROW, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::LBRACK() {
  return getTokens(USEParser::LBRACK);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LBRACK(size_t i) {
  return getToken(USEParser::LBRACK, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::TransitionDefinitionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::TransitionDefinitionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::RBRACK() {
  return getTokens(USEParser::RBRACK);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RBRACK(size_t i) {
  return getToken(USEParser::RBRACK, i);
}

USEParser::ParamListContext* USEParser::TransitionDefinitionContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}


size_t USEParser::TransitionDefinitionContext::getRuleIndex() const {
  return USEParser::RuleTransitionDefinition;
}


std::any USEParser::TransitionDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTransitionDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TransitionDefinitionContext* USEParser::transitionDefinition() {
  TransitionDefinitionContext *_localctx = _tracker.createInstance<TransitionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 48, USEParser::RuleTransitionDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(481);
    match(USEParser::ID);
    setState(482);
    match(USEParser::ARROW);
    setState(483);
    match(USEParser::ID);
    setState(505);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LBRACE) {
      setState(484);
      match(USEParser::LBRACE);
      setState(489);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LBRACK) {
        setState(485);
        match(USEParser::LBRACK);
        setState(486);
        expression();
        setState(487);
        match(USEParser::RBRACK);
      }

      setState(491);
      match(USEParser::ID);
      setState(492);
      match(USEParser::LPAREN);
      setState(494);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LPAREN) {
        setState(493);
        paramList();
      }
      setState(496);
      match(USEParser::RPAREN);
      setState(502);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LBRACK) {
        setState(498);
        match(USEParser::LBRACK);
        setState(499);
        expression();
        setState(500);
        match(USEParser::RBRACK);
      }
      setState(504);
      match(USEParser::RBRACE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionOnlyContext ------------------------------------------------------------------

USEParser::ExpressionOnlyContext::ExpressionOnlyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::ExpressionOnlyContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ExpressionOnlyContext::EOF() {
  return getToken(USEParser::EOF, 0);
}


size_t USEParser::ExpressionOnlyContext::getRuleIndex() const {
  return USEParser::RuleExpressionOnly;
}


std::any USEParser::ExpressionOnlyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitExpressionOnly(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ExpressionOnlyContext* USEParser::expressionOnly() {
  ExpressionOnlyContext *_localctx = _tracker.createInstance<ExpressionOnlyContext>(_ctx, getState());
  enterRule(_localctx, 50, USEParser::RuleExpressionOnly);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(507);
    expression();
    setState(508);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

USEParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::ExpressionContext::getRuleIndex() const {
  return USEParser::RuleExpression;
}

void USEParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LetExprContext ------------------------------------------------------------------

USEParser::LetExpressionContext* USEParser::LetExprContext::letExpression() {
  return getRuleContext<USEParser::LetExpressionContext>(0);
}

USEParser::LetExprContext::LetExprContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LetExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLetExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConditionalExprContext ------------------------------------------------------------------

USEParser::ConditionalExpressionContext* USEParser::ConditionalExprContext::conditionalExpression() {
  return getRuleContext<USEParser::ConditionalExpressionContext>(0);
}

USEParser::ConditionalExprContext::ConditionalExprContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ConditionalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConditionalExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LogicalExprContext ------------------------------------------------------------------

USEParser::LogicalExpressionContext* USEParser::LogicalExprContext::logicalExpression() {
  return getRuleContext<USEParser::LogicalExpressionContext>(0);
}

USEParser::LogicalExprContext::LogicalExprContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LogicalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLogicalExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::ExpressionContext* USEParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 52, USEParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(513);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__34:
      case USEParser::T__37:
      case USEParser::T__38:
      case USEParser::T__39:
      case USEParser::T__40:
      case USEParser::T__41:
      case USEParser::T__42:
      case USEParser::T__43:
      case USEParser::T__44:
      case USEParser::T__45:
      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48:
      case USEParser::T__49:
      case USEParser::T__50:
      case USEParser::T__55:
      case USEParser::T__56:
      case USEParser::T__57:
      case USEParser::T__58:
      case USEParser::T__59:
      case USEParser::T__60:
      case USEParser::T__61:
      case USEParser::T__62:
      case USEParser::T__63:
      case USEParser::T__64:
      case USEParser::T__65:
      case USEParser::T__66:
      case USEParser::AT:
      case USEParser::HASH:
      case USEParser::LPAREN:
      case USEParser::MINUS:
      case USEParser::PLUS:
      case USEParser::STAR:
      case USEParser::INT:
      case USEParser::REAL:
      case USEParser::STRING:
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::LogicalExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(510);
        logicalExpression(0);
        break;
      }

      case USEParser::T__51: {
        _localctx = _tracker.createInstance<USEParser::ConditionalExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(511);
        conditionalExpression();
        break;
      }

      case USEParser::T__25: {
        _localctx = _tracker.createInstance<USEParser::LetExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(512);
        letExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetExpressionContext ------------------------------------------------------------------

USEParser::LetExpressionContext::LetExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::LetExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::LetExpressionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

std::vector<USEParser::ExpressionContext *> USEParser::LetExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::LetExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

tree::TerminalNode* USEParser::LetExpressionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::LetExpressionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::LetExpressionContext::getRuleIndex() const {
  return USEParser::RuleLetExpression;
}


std::any USEParser::LetExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLetExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::LetExpressionContext* USEParser::letExpression() {
  LetExpressionContext *_localctx = _tracker.createInstance<LetExpressionContext>(_ctx, getState());
  enterRule(_localctx, 54, USEParser::RuleLetExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(515);
    match(USEParser::T__25);
    setState(516);
    match(USEParser::ID);
    setState(519);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(517);
      match(USEParser::COLON);
      setState(518);
      type();
    }
    setState(521);
    match(USEParser::EQUAL);
    setState(522);
    expression();
    setState(523);
    match(USEParser::T__26);
    setState(524);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalExpressionContext ------------------------------------------------------------------

USEParser::LogicalExpressionContext::LogicalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::LogicalExpressionContext::getRuleIndex() const {
  return USEParser::RuleLogicalExpression;
}

void USEParser::LogicalExpressionContext::copyFrom(LogicalExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AndExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::AndExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::AndExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::AndExprContext::AndExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AndExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAndExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- EqualityExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::EqualityExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

USEParser::EqualityExprContext::EqualityExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::EqualityExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEqualityExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- XorExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::XorExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::XorExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::XorExprContext::XorExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::XorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitXorExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ImpliesExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::ImpliesExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::ImpliesExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::ImpliesExprContext::ImpliesExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ImpliesExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitImpliesExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OrExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::OrExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::OrExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::OrExprContext::OrExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::OrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOrExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::LogicalExpressionContext* USEParser::logicalExpression() {
   return logicalExpression(0);
}

USEParser::LogicalExpressionContext* USEParser::logicalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::LogicalExpressionContext *_localctx = _tracker.createInstance<LogicalExpressionContext>(_ctx, parentState);
  USEParser::LogicalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 56;
  enterRecursionRule(_localctx, 56, USEParser::RuleLogicalExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<EqualityExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(527);
    equalityExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(549);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(547);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<AndExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(529);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(530);
          match(USEParser::T__27);
          setState(531);
          logicalExpression(8);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<AndExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(532);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(533);
          match(USEParser::T__28);
          setState(534);
          logicalExpression(7);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<OrExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(535);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(536);
          match(USEParser::T__29);
          setState(537);
          logicalExpression(6);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<XorExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(538);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(539);
          match(USEParser::T__30);
          setState(540);
          logicalExpression(5);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ImpliesExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(541);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(542);
          match(USEParser::T__31);
          setState(543);
          logicalExpression(4);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ImpliesExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(544);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(545);
          match(USEParser::T__32);
          setState(546);
          logicalExpression(3);
          break;
        }

        default:
          break;
        } 
      }
      setState(551);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParamListContext ------------------------------------------------------------------

USEParser::ParamListContext::ParamListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ParamListContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::ParamListContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<USEParser::VariableDeclarationContext *> USEParser::ParamListContext::variableDeclaration() {
  return getRuleContexts<USEParser::VariableDeclarationContext>();
}

USEParser::VariableDeclarationContext* USEParser::ParamListContext::variableDeclaration(size_t i) {
  return getRuleContext<USEParser::VariableDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::ParamListContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::ParamListContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::ParamListContext::getRuleIndex() const {
  return USEParser::RuleParamList;
}


std::any USEParser::ParamListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitParamList(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ParamListContext* USEParser::paramList() {
  ParamListContext *_localctx = _tracker.createInstance<ParamListContext>(_ctx, getState());
  enterRule(_localctx, 58, USEParser::RuleParamList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(552);
    match(USEParser::LPAREN);
    setState(561);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ID) {
      setState(553);
      variableDeclaration();
      setState(558);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(554);
        match(USEParser::COMMA);
        setState(555);
        variableDeclaration();
        setState(560);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(563);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdListContext ------------------------------------------------------------------

USEParser::IdListContext::IdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::IdListContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::IdListContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

std::vector<tree::TerminalNode *> USEParser::IdListContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::IdListContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::IdListContext::getRuleIndex() const {
  return USEParser::RuleIdList;
}


std::any USEParser::IdListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIdList(this);
  else
    return visitor->visitChildren(this);
}

USEParser::IdListContext* USEParser::idList() {
  IdListContext *_localctx = _tracker.createInstance<IdListContext>(_ctx, getState());
  enterRule(_localctx, 60, USEParser::RuleIdList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(565);
    match(USEParser::ID);
    setState(570);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(566);
      match(USEParser::COMMA);
      setState(567);
      match(USEParser::ID);
      setState(572);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationContext ------------------------------------------------------------------

USEParser::VariableDeclarationContext::VariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::VariableDeclarationContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::VariableDeclarationContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::VariableDeclarationContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::VariableDeclarationContext::getRuleIndex() const {
  return USEParser::RuleVariableDeclaration;
}


std::any USEParser::VariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

USEParser::VariableDeclarationContext* USEParser::variableDeclaration() {
  VariableDeclarationContext *_localctx = _tracker.createInstance<VariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 62, USEParser::RuleVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(573);
    match(USEParser::ID);
    setState(574);
    match(USEParser::COLON);
    setState(575);
    type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::EqualityExpressionContext::getRuleIndex() const {
  return USEParser::RuleEqualityExpression;
}

void USEParser::EqualityExpressionContext::copyFrom(EqualityExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EqualExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::EqualExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

tree::TerminalNode* USEParser::EqualExprContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::RelationalExpressionContext* USEParser::EqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::EqualExprContext::EqualExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::EqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEqualExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelationalExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::RelationalExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::RelationalExprContext::RelationalExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::RelationalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRelationalExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotEqualExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::NotEqualExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

tree::TerminalNode* USEParser::NotEqualExprContext::NOT_EQUAL() {
  return getToken(USEParser::NOT_EQUAL, 0);
}

USEParser::RelationalExpressionContext* USEParser::NotEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::NotEqualExprContext::NotEqualExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::NotEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitNotEqualExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EqualityExpressionContext* USEParser::equalityExpression() {
   return equalityExpression(0);
}

USEParser::EqualityExpressionContext* USEParser::equalityExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, parentState);
  USEParser::EqualityExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 64;
  enterRecursionRule(_localctx, 64, USEParser::RuleEqualityExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<RelationalExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(578);
    relationalExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(588);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(586);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<EqualExprContext>(_tracker.createInstance<EqualityExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleEqualityExpression);
          setState(580);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(581);
          match(USEParser::EQUAL);
          setState(582);
          relationalExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<NotEqualExprContext>(_tracker.createInstance<EqualityExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleEqualityExpression);
          setState(583);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(584);
          match(USEParser::NOT_EQUAL);
          setState(585);
          relationalExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(590);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::RelationalExpressionContext::getRuleIndex() const {
  return USEParser::RuleRelationalExpression;
}

void USEParser::RelationalExpressionContext::copyFrom(RelationalExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LessThanOrEqualExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::LessThanOrEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::LessThanOrEqualExprContext::LESS_EQUAL() {
  return getToken(USEParser::LESS_EQUAL, 0);
}

USEParser::AdditiveExpressionContext* USEParser::LessThanOrEqualExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::LessThanOrEqualExprContext::LessThanOrEqualExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LessThanOrEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLessThanOrEqualExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GreaterThanExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::GreaterThanExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::GreaterThanExprContext::GREATER() {
  return getToken(USEParser::GREATER, 0);
}

USEParser::AdditiveExpressionContext* USEParser::GreaterThanExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::GreaterThanExprContext::GreaterThanExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::GreaterThanExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitGreaterThanExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AdditiveExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::AdditiveExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::AdditiveExprContext::AdditiveExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AdditiveExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LessThanExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::LessThanExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::LessThanExprContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::AdditiveExpressionContext* USEParser::LessThanExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::LessThanExprContext::LessThanExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LessThanExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLessThanExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GreaterThanOrEqualExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::GreaterThanOrEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::GreaterThanOrEqualExprContext::GREATER_EQUAL() {
  return getToken(USEParser::GREATER_EQUAL, 0);
}

USEParser::AdditiveExpressionContext* USEParser::GreaterThanOrEqualExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::GreaterThanOrEqualExprContext::GreaterThanOrEqualExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::GreaterThanOrEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitGreaterThanOrEqualExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::RelationalExpressionContext* USEParser::relationalExpression() {
   return relationalExpression(0);
}

USEParser::RelationalExpressionContext* USEParser::relationalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, parentState);
  USEParser::RelationalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 66;
  enterRecursionRule(_localctx, 66, USEParser::RuleRelationalExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<AdditiveExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(592);
    additiveExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(608);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(606);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<LessThanExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(594);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(595);
          match(USEParser::LESS);
          setState(596);
          additiveExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<GreaterThanExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(597);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(598);
          match(USEParser::GREATER);
          setState(599);
          additiveExpression(0);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<LessThanOrEqualExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(600);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(601);
          match(USEParser::LESS_EQUAL);
          setState(602);
          additiveExpression(0);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<GreaterThanOrEqualExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(603);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(604);
          match(USEParser::GREATER_EQUAL);
          setState(605);
          additiveExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(610);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::AdditiveExpressionContext::getRuleIndex() const {
  return USEParser::RuleAdditiveExpression;
}

void USEParser::AdditiveExpressionContext::copyFrom(AdditiveExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AdditionExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::AdditionExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* USEParser::AdditionExprContext::PLUS() {
  return getToken(USEParser::PLUS, 0);
}

USEParser::FactorExpressionContext* USEParser::AdditionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::AdditionExprContext::AdditionExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AdditionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAdditionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubtractionExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::SubtractionExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* USEParser::SubtractionExprContext::MINUS() {
  return getToken(USEParser::MINUS, 0);
}

USEParser::FactorExpressionContext* USEParser::SubtractionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::SubtractionExprContext::SubtractionExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SubtractionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSubtractionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FactorExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::FactorExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::FactorExprContext::FactorExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::FactorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitFactorExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AdditiveExpressionContext* USEParser::additiveExpression() {
   return additiveExpression(0);
}

USEParser::AdditiveExpressionContext* USEParser::additiveExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, parentState);
  USEParser::AdditiveExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 68;
  enterRecursionRule(_localctx, 68, USEParser::RuleAdditiveExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<FactorExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(612);
    factorExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(622);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(620);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<AdditionExprContext>(_tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleAdditiveExpression);
          setState(614);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(615);
          match(USEParser::PLUS);
          setState(616);
          factorExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<SubtractionExprContext>(_tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleAdditiveExpression);
          setState(617);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(618);
          match(USEParser::MINUS);
          setState(619);
          factorExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(624);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FactorExpressionContext ------------------------------------------------------------------

USEParser::FactorExpressionContext::FactorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::FactorExpressionContext::getRuleIndex() const {
  return USEParser::RuleFactorExpression;
}

void USEParser::FactorExpressionContext::copyFrom(FactorExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DivisionExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::DivisionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::UnaryExpressionContext* USEParser::DivisionExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* USEParser::DivisionExprContext::SLASH() {
  return getToken(USEParser::SLASH, 0);
}

USEParser::DivisionExprContext::DivisionExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::DivisionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitDivisionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MultiplicationExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::MultiplicationExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

tree::TerminalNode* USEParser::MultiplicationExprContext::STAR() {
  return getToken(USEParser::STAR, 0);
}

USEParser::UnaryExpressionContext* USEParser::MultiplicationExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::MultiplicationExprContext::MultiplicationExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::MultiplicationExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicationExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExprContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext* USEParser::UnaryExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::UnaryExprContext::UnaryExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::UnaryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUnaryExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::FactorExpressionContext* USEParser::factorExpression() {
   return factorExpression(0);
}

USEParser::FactorExpressionContext* USEParser::factorExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::FactorExpressionContext *_localctx = _tracker.createInstance<FactorExpressionContext>(_ctx, parentState);
  USEParser::FactorExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 70;
  enterRecursionRule(_localctx, 70, USEParser::RuleFactorExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<UnaryExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(626);
    unaryExpression();
    _ctx->stop = _input->LT(-1);
    setState(636);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(634);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<MultiplicationExprContext>(_tracker.createInstance<FactorExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleFactorExpression);
          setState(628);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(629);
          match(USEParser::STAR);
          setState(630);
          unaryExpression();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<DivisionExprContext>(_tracker.createInstance<FactorExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleFactorExpression);
          setState(631);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(632);
          _la = _input->LA(1);
          if (!(_la == USEParser::T__33

          || _la == USEParser::SLASH)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(633);
          unaryExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(638);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::UnaryExpressionContext::getRuleIndex() const {
  return USEParser::RuleUnaryExpression;
}

void USEParser::UnaryExpressionContext::copyFrom(UnaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PostfixExprContext ------------------------------------------------------------------

USEParser::PostfixExpressionContext* USEParser::PostfixExprContext::postfixExpression() {
  return getRuleContext<USEParser::PostfixExpressionContext>(0);
}

USEParser::PostfixExprContext::PostfixExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PostfixExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPostfixExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PlusExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PlusExprContext::PLUS() {
  return getToken(USEParser::PLUS, 0);
}

USEParser::UnaryExpressionContext* USEParser::PlusExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::PlusExprContext::PlusExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PlusExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPlusExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotExprContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext* USEParser::NotExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::NotExprContext::NotExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::NotExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitNotExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MinusExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::MinusExprContext::MINUS() {
  return getToken(USEParser::MINUS, 0);
}

USEParser::UnaryExpressionContext* USEParser::MinusExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::MinusExprContext::MinusExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::MinusExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMinusExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::UnaryExpressionContext* USEParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, USEParser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(646);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__34: {
        _localctx = _tracker.createInstance<USEParser::NotExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(639);
        match(USEParser::T__34);
        setState(640);
        unaryExpression();
        break;
      }

      case USEParser::MINUS: {
        _localctx = _tracker.createInstance<USEParser::MinusExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(641);
        match(USEParser::MINUS);
        setState(642);
        unaryExpression();
        break;
      }

      case USEParser::PLUS: {
        _localctx = _tracker.createInstance<USEParser::PlusExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(643);
        match(USEParser::PLUS);
        setState(644);
        unaryExpression();
        break;
      }

      case USEParser::T__37:
      case USEParser::T__38:
      case USEParser::T__39:
      case USEParser::T__40:
      case USEParser::T__41:
      case USEParser::T__42:
      case USEParser::T__43:
      case USEParser::T__44:
      case USEParser::T__45:
      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48:
      case USEParser::T__49:
      case USEParser::T__50:
      case USEParser::T__55:
      case USEParser::T__56:
      case USEParser::T__57:
      case USEParser::T__58:
      case USEParser::T__59:
      case USEParser::T__60:
      case USEParser::T__61:
      case USEParser::T__62:
      case USEParser::T__63:
      case USEParser::T__64:
      case USEParser::T__65:
      case USEParser::T__66:
      case USEParser::AT:
      case USEParser::HASH:
      case USEParser::LPAREN:
      case USEParser::STAR:
      case USEParser::INT:
      case USEParser::REAL:
      case USEParser::STRING:
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::PostfixExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(645);
        postfixExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

USEParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PostfixExpressionContext::getRuleIndex() const {
  return USEParser::RulePostfixExpression;
}

void USEParser::PostfixExpressionContext::copyFrom(PostfixExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PropertyCallExprContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext* USEParser::PropertyCallExprContext::primaryExpression() {
  return getRuleContext<USEParser::PrimaryExpressionContext>(0);
}

std::vector<USEParser::PropertyCallContext *> USEParser::PropertyCallExprContext::propertyCall() {
  return getRuleContexts<USEParser::PropertyCallContext>();
}

USEParser::PropertyCallContext* USEParser::PropertyCallExprContext::propertyCall(size_t i) {
  return getRuleContext<USEParser::PropertyCallContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::PropertyCallExprContext::DOT() {
  return getTokens(USEParser::DOT);
}

tree::TerminalNode* USEParser::PropertyCallExprContext::DOT(size_t i) {
  return getToken(USEParser::DOT, i);
}

std::vector<tree::TerminalNode *> USEParser::PropertyCallExprContext::ARROW() {
  return getTokens(USEParser::ARROW);
}

tree::TerminalNode* USEParser::PropertyCallExprContext::ARROW(size_t i) {
  return getToken(USEParser::ARROW, i);
}

USEParser::PropertyCallExprContext::PropertyCallExprContext(PostfixExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PropertyCallExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPropertyCallExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryExprContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext* USEParser::PrimaryExprContext::primaryExpression() {
  return getRuleContext<USEParser::PrimaryExpressionContext>(0);
}

USEParser::PrimaryExprContext::PrimaryExprContext(PostfixExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PrimaryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPrimaryExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PostfixExpressionContext* USEParser::postfixExpression() {
  PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 74, USEParser::RulePostfixExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(656);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::PrimaryExprContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(648);
      primaryExpression();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::PropertyCallExprContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(649);
      primaryExpression();
      setState(652); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(650);
                _la = _input->LA(1);
                if (!(_la == USEParser::ARROW

                || _la == USEParser::DOT)) {
                _errHandler->recoverInline(this);
                }
                else {
                  _errHandler->reportMatch(this);
                  consume();
                }
                setState(651);
                propertyCall();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(654); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PrimaryExpressionContext::getRuleIndex() const {
  return USEParser::RulePrimaryExpression;
}

void USEParser::PrimaryExpressionContext::copyFrom(PrimaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EmptyPropertyCallExprContext ------------------------------------------------------------------

USEParser::PropertyCallContext* USEParser::EmptyPropertyCallExprContext::propertyCall() {
  return getRuleContext<USEParser::PropertyCallContext>(0);
}

USEParser::EmptyPropertyCallExprContext::EmptyPropertyCallExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::EmptyPropertyCallExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEmptyPropertyCallExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ByUseIdExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ByUseIdExprContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::DOT() {
  return getToken(USEParser::DOT, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ByUseIdExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::AT() {
  return getToken(USEParser::AT, 0);
}

USEParser::ByUseIdExprContext::ByUseIdExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ByUseIdExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitByUseIdExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralExprContext ------------------------------------------------------------------

USEParser::LiteralContext* USEParser::LiteralExprContext::literal() {
  return getRuleContext<USEParser::LiteralContext>(0);
}

USEParser::LiteralExprContext::LiteralExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ParenthesizedExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ParenthesizedExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ParenthesizedExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ParenthesizedExprContext::ParenthesizedExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ParenthesizedExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitParenthesizedExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AllInstancesExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::AllInstancesExprContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::DOT() {
  return getToken(USEParser::DOT, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::AllInstancesExprContext::AllInstancesExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AllInstancesExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAllInstancesExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ObjectReferenceExprContext ------------------------------------------------------------------

USEParser::ObjectReferenceContext* USEParser::ObjectReferenceExprContext::objectReference() {
  return getRuleContext<USEParser::ObjectReferenceContext>(0);
}

USEParser::ObjectReferenceExprContext::ObjectReferenceExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ObjectReferenceExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitObjectReferenceExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PrimaryExpressionContext* USEParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 76, USEParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(686);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::LiteralExprContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(658);
      literal();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::ObjectReferenceExprContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(659);
      objectReference();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::EmptyPropertyCallExprContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(660);
      propertyCall();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::ParenthesizedExprContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(661);
      match(USEParser::LPAREN);
      setState(662);
      expression();
      setState(663);
      match(USEParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::AllInstancesExprContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(665);
      match(USEParser::ID);
      setState(666);
      match(USEParser::DOT);
      setState(667);
      match(USEParser::T__35);
      setState(670);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
      case 1: {
        setState(668);
        match(USEParser::AT);
        setState(669);
        match(USEParser::T__20);
        break;
      }

      default:
        break;
      }
      setState(674);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
      case 1: {
        setState(672);
        match(USEParser::LPAREN);
        setState(673);
        match(USEParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<USEParser::ByUseIdExprContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(676);
      match(USEParser::ID);
      setState(677);
      match(USEParser::DOT);
      setState(678);
      match(USEParser::T__36);
      setState(679);
      match(USEParser::LPAREN);
      setState(680);
      expression();
      setState(681);
      match(USEParser::RPAREN);
      setState(684);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
      case 1: {
        setState(682);
        match(USEParser::AT);
        setState(683);
        match(USEParser::T__20);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectReferenceContext ------------------------------------------------------------------

USEParser::ObjectReferenceContext::ObjectReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ObjectReferenceContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::ObjectReferenceContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::ObjectReferenceContext::getRuleIndex() const {
  return USEParser::RuleObjectReference;
}


std::any USEParser::ObjectReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitObjectReference(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ObjectReferenceContext* USEParser::objectReference() {
  ObjectReferenceContext *_localctx = _tracker.createInstance<ObjectReferenceContext>(_ctx, getState());
  enterRule(_localctx, 78, USEParser::RuleObjectReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(688);
    match(USEParser::AT);
    setState(689);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyCallContext ------------------------------------------------------------------

USEParser::PropertyCallContext::PropertyCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PropertyCallContext::getRuleIndex() const {
  return USEParser::RulePropertyCall;
}

void USEParser::PropertyCallContext::copyFrom(PropertyCallContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QueryExprContext ------------------------------------------------------------------

USEParser::QueryExpressionContext* USEParser::QueryExprContext::queryExpression() {
  return getRuleContext<USEParser::QueryExpressionContext>(0);
}

USEParser::QueryExprContext::QueryExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::QueryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitQueryExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OperationExprContext ------------------------------------------------------------------

USEParser::OperationExpressionContext* USEParser::OperationExprContext::operationExpression() {
  return getRuleContext<USEParser::OperationExpressionContext>(0);
}

USEParser::OperationExprContext::OperationExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::OperationExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IterateExprContext ------------------------------------------------------------------

USEParser::IterateExpressionContext* USEParser::IterateExprContext::iterateExpression() {
  return getRuleContext<USEParser::IterateExpressionContext>(0);
}

USEParser::IterateExprContext::IterateExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::IterateExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIterateExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeExprContext ------------------------------------------------------------------

USEParser::TypeExpressionContext* USEParser::TypeExprContext::typeExpression() {
  return getRuleContext<USEParser::TypeExpressionContext>(0);
}

USEParser::TypeExprContext::TypeExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InStateExprContext ------------------------------------------------------------------

USEParser::InStateExpressionContext* USEParser::InStateExprContext::inStateExpression() {
  return getRuleContext<USEParser::InStateExpressionContext>(0);
}

USEParser::InStateExprContext::InStateExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::InStateExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInStateExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PropertyCallContext* USEParser::propertyCall() {
  PropertyCallContext *_localctx = _tracker.createInstance<PropertyCallContext>(_ctx, getState());
  enterRule(_localctx, 80, USEParser::RulePropertyCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(696);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__37:
      case USEParser::T__38:
      case USEParser::T__39:
      case USEParser::T__40:
      case USEParser::T__41:
      case USEParser::T__42:
      case USEParser::T__43: {
        _localctx = _tracker.createInstance<USEParser::QueryExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(691);
        queryExpression();
        break;
      }

      case USEParser::T__44: {
        _localctx = _tracker.createInstance<USEParser::IterateExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(692);
        iterateExpression();
        break;
      }

      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::OperationExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(693);
        operationExpression();
        break;
      }

      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48:
      case USEParser::T__49:
      case USEParser::T__50: {
        _localctx = _tracker.createInstance<USEParser::TypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(694);
        typeExpression();
        break;
      }

      case USEParser::T__45: {
        _localctx = _tracker.createInstance<USEParser::InStateExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(695);
        inStateExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryExpressionContext ------------------------------------------------------------------

USEParser::QueryExpressionContext::QueryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::QueryExpressionContext::getRuleIndex() const {
  return USEParser::RuleQueryExpression;
}

void USEParser::QueryExpressionContext::copyFrom(QueryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- IsUniqueExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::IsUniqueExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::IsUniqueExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::IsUniqueExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::IsUniqueExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::IsUniqueExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::IsUniqueExprContext::IsUniqueExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::IsUniqueExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIsUniqueExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SortedByExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SortedByExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::SortedByExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::SortedByExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::SortedByExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::SortedByExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::SortedByExprContext::SortedByExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SortedByExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSortedByExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::SelectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::SelectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::SelectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::SelectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::SelectExprContext::SelectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SelectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CollectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::CollectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::CollectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::CollectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::CollectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::CollectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::CollectExprContext::CollectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::CollectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitCollectExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ForAllExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ForAllExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ForAllExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ForAllExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::ForAllExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::ForAllExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ForAllExprContext::ForAllExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ForAllExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitForAllExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExistsExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ExistsExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ExistsExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ExistsExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::ExistsExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::ExistsExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ExistsExprContext::ExistsExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ExistsExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitExistsExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RejectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::RejectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::RejectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::RejectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::RejectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::RejectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::RejectExprContext::RejectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::RejectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRejectExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::QueryExpressionContext* USEParser::queryExpression() {
  QueryExpressionContext *_localctx = _tracker.createInstance<QueryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, USEParser::RuleQueryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(768);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__37: {
        _localctx = _tracker.createInstance<USEParser::SelectExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(698);
        match(USEParser::T__37);
        setState(699);
        match(USEParser::LPAREN);
        setState(703);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
        case 1: {
          setState(700);
          elemVarsDeclaration();
          setState(701);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(705);
        expression();
        setState(706);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__38: {
        _localctx = _tracker.createInstance<USEParser::RejectExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(708);
        match(USEParser::T__38);
        setState(709);
        match(USEParser::LPAREN);
        setState(713);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
        case 1: {
          setState(710);
          elemVarsDeclaration();
          setState(711);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(715);
        expression();
        setState(716);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__39: {
        _localctx = _tracker.createInstance<USEParser::CollectExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(718);
        match(USEParser::T__39);
        setState(719);
        match(USEParser::LPAREN);
        setState(723);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
        case 1: {
          setState(720);
          elemVarsDeclaration();
          setState(721);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(725);
        expression();
        setState(726);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__40: {
        _localctx = _tracker.createInstance<USEParser::ExistsExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(728);
        match(USEParser::T__40);
        setState(729);
        match(USEParser::LPAREN);
        setState(733);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
        case 1: {
          setState(730);
          elemVarsDeclaration();
          setState(731);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(735);
        expression();
        setState(736);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__41: {
        _localctx = _tracker.createInstance<USEParser::ForAllExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(738);
        match(USEParser::T__41);
        setState(739);
        match(USEParser::LPAREN);
        setState(743);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
        case 1: {
          setState(740);
          elemVarsDeclaration();
          setState(741);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(745);
        expression();
        setState(746);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__42: {
        _localctx = _tracker.createInstance<USEParser::IsUniqueExprContext>(_localctx);
        enterOuterAlt(_localctx, 6);
        setState(748);
        match(USEParser::T__42);
        setState(749);
        match(USEParser::LPAREN);
        setState(753);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
        case 1: {
          setState(750);
          elemVarsDeclaration();
          setState(751);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(755);
        expression();
        setState(756);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__43: {
        _localctx = _tracker.createInstance<USEParser::SortedByExprContext>(_localctx);
        enterOuterAlt(_localctx, 7);
        setState(758);
        match(USEParser::T__43);
        setState(759);
        match(USEParser::LPAREN);
        setState(763);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
        case 1: {
          setState(760);
          elemVarsDeclaration();
          setState(761);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(765);
        expression();
        setState(766);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterateExpressionContext ------------------------------------------------------------------

USEParser::IterateExpressionContext::IterateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::IterateExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::IterateExpressionContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

USEParser::VariableInitializationContext* USEParser::IterateExpressionContext::variableInitialization() {
  return getRuleContext<USEParser::VariableInitializationContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ExpressionContext* USEParser::IterateExpressionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::IterateExpressionContext::getRuleIndex() const {
  return USEParser::RuleIterateExpression;
}


std::any USEParser::IterateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIterateExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::IterateExpressionContext* USEParser::iterateExpression() {
  IterateExpressionContext *_localctx = _tracker.createInstance<IterateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, USEParser::RuleIterateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(770);
    match(USEParser::T__44);
    setState(771);
    match(USEParser::LPAREN);
    setState(772);
    elemVarsDeclaration();
    setState(773);
    match(USEParser::SEMI);
    setState(774);
    variableInitialization();
    setState(775);
    match(USEParser::BAR);
    setState(776);
    expression();
    setState(777);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperationExpressionContext ------------------------------------------------------------------

USEParser::OperationExpressionContext::OperationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::OperationExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::LBRACK() {
  return getTokens(USEParser::LBRACK);
}

tree::TerminalNode* USEParser::OperationExpressionContext::LBRACK(size_t i) {
  return getToken(USEParser::LBRACK, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::OperationExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::OperationExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::RBRACK() {
  return getTokens(USEParser::RBRACK);
}

tree::TerminalNode* USEParser::OperationExpressionContext::RBRACK(size_t i) {
  return getToken(USEParser::RBRACK, i);
}

tree::TerminalNode* USEParser::OperationExpressionContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::OperationExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::OperationExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::OperationExpressionContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::OperationExpressionContext::getRuleIndex() const {
  return USEParser::RuleOperationExpression;
}


std::any USEParser::OperationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::OperationExpressionContext* USEParser::operationExpression() {
  OperationExpressionContext *_localctx = _tracker.createInstance<OperationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 86, USEParser::RuleOperationExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(779);
    match(USEParser::ID);
    setState(803);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      setState(780);
      match(USEParser::LBRACK);
      setState(781);
      expression();
      setState(786);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(782);
        match(USEParser::COMMA);
        setState(783);
        expression();
        setState(788);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(789);
      match(USEParser::RBRACK);
      setState(801);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
      case 1: {
        setState(790);
        match(USEParser::LBRACK);
        setState(791);
        expression();
        setState(796);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == USEParser::COMMA) {
          setState(792);
          match(USEParser::COMMA);
          setState(793);
          expression();
          setState(798);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(799);
        match(USEParser::RBRACK);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(807);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(805);
      match(USEParser::AT);
      setState(806);
      match(USEParser::T__20);
      break;
    }

    default:
      break;
    }
    setState(821);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(809);
      match(USEParser::LPAREN);
      setState(818);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -63050635234246656) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 47287775002895) != 0)) {
        setState(810);
        expression();
        setState(815);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == USEParser::COMMA) {
          setState(811);
          match(USEParser::COMMA);
          setState(812);
          expression();
          setState(817);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(820);
      match(USEParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InStateExpressionContext ------------------------------------------------------------------

USEParser::InStateExpressionContext::InStateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::InStateExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::InStateExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::InStateExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::InStateExpressionContext::getRuleIndex() const {
  return USEParser::RuleInStateExpression;
}


std::any USEParser::InStateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInStateExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InStateExpressionContext* USEParser::inStateExpression() {
  InStateExpressionContext *_localctx = _tracker.createInstance<InStateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, USEParser::RuleInStateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(823);
    match(USEParser::T__45);
    setState(824);
    match(USEParser::LPAREN);
    setState(825);
    match(USEParser::ID);
    setState(826);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeExpressionContext ------------------------------------------------------------------

USEParser::TypeExpressionContext::TypeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TypeExpressionContext::getRuleIndex() const {
  return USEParser::RuleTypeExpression;
}

void USEParser::TypeExpressionContext::copyFrom(TypeExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- OclIsTypeOfExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclIsTypeOfExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclIsTypeOfExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclIsTypeOfExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclIsTypeOfExprContext::OclIsTypeOfExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::OclIsTypeOfExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclIsTypeOfExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OclIsKindOfExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclIsKindOfExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclIsKindOfExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclIsKindOfExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclIsKindOfExprContext::OclIsKindOfExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::OclIsKindOfExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclIsKindOfExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectByKindExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectByKindExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::SelectByKindExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::SelectByKindExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::SelectByKindExprContext::SelectByKindExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SelectByKindExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectByKindExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectByTypeExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectByTypeExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::SelectByTypeExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::SelectByTypeExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::SelectByTypeExprContext::SelectByTypeExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SelectByTypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectByTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OclAsTypeExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclAsTypeExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclAsTypeExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclAsTypeExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclAsTypeExprContext::OclAsTypeExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::OclAsTypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclAsTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TypeExpressionContext* USEParser::typeExpression() {
  TypeExpressionContext *_localctx = _tracker.createInstance<TypeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 90, USEParser::RuleTypeExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(853);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__46: {
        _localctx = _tracker.createInstance<USEParser::OclAsTypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(828);
        match(USEParser::T__46);
        setState(829);
        match(USEParser::LPAREN);
        setState(830);
        type();
        setState(831);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__47: {
        _localctx = _tracker.createInstance<USEParser::OclIsKindOfExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(833);
        match(USEParser::T__47);
        setState(834);
        match(USEParser::LPAREN);
        setState(835);
        type();
        setState(836);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__48: {
        _localctx = _tracker.createInstance<USEParser::OclIsTypeOfExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(838);
        match(USEParser::T__48);
        setState(839);
        match(USEParser::LPAREN);
        setState(840);
        type();
        setState(841);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__49: {
        _localctx = _tracker.createInstance<USEParser::SelectByTypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(843);
        match(USEParser::T__49);
        setState(844);
        match(USEParser::LPAREN);
        setState(845);
        type();
        setState(846);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__50: {
        _localctx = _tracker.createInstance<USEParser::SelectByKindExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(848);
        match(USEParser::T__50);
        setState(849);
        match(USEParser::LPAREN);
        setState(850);
        type();
        setState(851);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemVarsDeclarationContext ------------------------------------------------------------------

USEParser::ElemVarsDeclarationContext::ElemVarsDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::COLON() {
  return getTokens(USEParser::COLON);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::COLON(size_t i) {
  return getToken(USEParser::COLON, i);
}

std::vector<USEParser::TypeContext *> USEParser::ElemVarsDeclarationContext::type() {
  return getRuleContexts<USEParser::TypeContext>();
}

USEParser::TypeContext* USEParser::ElemVarsDeclarationContext::type(size_t i) {
  return getRuleContext<USEParser::TypeContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::ElemVarsDeclarationContext::getRuleIndex() const {
  return USEParser::RuleElemVarsDeclaration;
}


std::any USEParser::ElemVarsDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitElemVarsDeclaration(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ElemVarsDeclarationContext* USEParser::elemVarsDeclaration() {
  ElemVarsDeclarationContext *_localctx = _tracker.createInstance<ElemVarsDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 92, USEParser::RuleElemVarsDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(855);
    match(USEParser::ID);
    setState(858);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(856);
      match(USEParser::COLON);
      setState(857);
      type();
    }
    setState(868);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(860);
      match(USEParser::COMMA);
      setState(861);
      match(USEParser::ID);
      setState(864);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::COLON) {
        setState(862);
        match(USEParser::COLON);
        setState(863);
        type();
      }
      setState(870);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializationContext ------------------------------------------------------------------

USEParser::VariableInitializationContext::VariableInitializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::VariableInitializationContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::VariableInitializationContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::VariableInitializationContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::VariableInitializationContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::VariableInitializationContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::VariableInitializationContext::getRuleIndex() const {
  return USEParser::RuleVariableInitialization;
}


std::any USEParser::VariableInitializationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitVariableInitialization(this);
  else
    return visitor->visitChildren(this);
}

USEParser::VariableInitializationContext* USEParser::variableInitialization() {
  VariableInitializationContext *_localctx = _tracker.createInstance<VariableInitializationContext>(_ctx, getState());
  enterRule(_localctx, 94, USEParser::RuleVariableInitialization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(871);
    match(USEParser::ID);
    setState(872);
    match(USEParser::COLON);
    setState(873);
    type();
    setState(874);
    match(USEParser::EQUAL);
    setState(875);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

USEParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::ExpressionContext *> USEParser::ConditionalExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::ConditionalExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}


size_t USEParser::ConditionalExpressionContext::getRuleIndex() const {
  return USEParser::RuleConditionalExpression;
}


std::any USEParser::ConditionalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConditionalExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ConditionalExpressionContext* USEParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 96, USEParser::RuleConditionalExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(877);
    match(USEParser::T__51);
    setState(878);
    expression();
    setState(879);
    match(USEParser::T__52);
    setState(880);
    expression();
    setState(881);
    match(USEParser::T__53);
    setState(882);
    expression();
    setState(883);
    match(USEParser::T__54);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

USEParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::LiteralContext::getRuleIndex() const {
  return USEParser::RuleLiteral;
}

void USEParser::LiteralContext::copyFrom(LiteralContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralIntegerContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralIntegerContext::INT() {
  return getToken(USEParser::INT, 0);
}

USEParser::LiteralIntegerContext::LiteralIntegerContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralIntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralInteger(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralEmptyCollectionContext ------------------------------------------------------------------

USEParser::EmptyCollectionLiteralContext* USEParser::LiteralEmptyCollectionContext::emptyCollectionLiteral() {
  return getRuleContext<USEParser::EmptyCollectionLiteralContext>(0);
}

USEParser::LiteralEmptyCollectionContext::LiteralEmptyCollectionContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralEmptyCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralEmptyCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralStringContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralStringContext::STRING() {
  return getToken(USEParser::STRING, 0);
}

USEParser::LiteralStringContext::LiteralStringContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralUnlimitedNaturalContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralUnlimitedNaturalContext::STAR() {
  return getToken(USEParser::STAR, 0);
}

USEParser::LiteralUnlimitedNaturalContext::LiteralUnlimitedNaturalContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralUnlimitedNaturalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralUnlimitedNatural(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralCollectionContext ------------------------------------------------------------------

USEParser::CollectionLiteralContext* USEParser::LiteralCollectionContext::collectionLiteral() {
  return getRuleContext<USEParser::CollectionLiteralContext>(0);
}

USEParser::LiteralCollectionContext::LiteralCollectionContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralBooleanFalseContext ------------------------------------------------------------------

USEParser::LiteralBooleanFalseContext::LiteralBooleanFalseContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralBooleanFalseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralBooleanFalse(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralEnumContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralEnumContext::HASH() {
  return getToken(USEParser::HASH, 0);
}

tree::TerminalNode* USEParser::LiteralEnumContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::LiteralEnumContext::LiteralEnumContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralQualifiedEnumContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> USEParser::LiteralQualifiedEnumContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::LiteralQualifiedEnumContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::LiteralQualifiedEnumContext::COLON_COLON() {
  return getToken(USEParser::COLON_COLON, 0);
}

USEParser::LiteralQualifiedEnumContext::LiteralQualifiedEnumContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralQualifiedEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralQualifiedEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralUndefinedContext ------------------------------------------------------------------

USEParser::UndefinedLiteralContext* USEParser::LiteralUndefinedContext::undefinedLiteral() {
  return getRuleContext<USEParser::UndefinedLiteralContext>(0);
}

USEParser::LiteralUndefinedContext::LiteralUndefinedContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralUndefinedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralUndefined(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralTupleContext ------------------------------------------------------------------

USEParser::TupleLiteralContext* USEParser::LiteralTupleContext::tupleLiteral() {
  return getRuleContext<USEParser::TupleLiteralContext>(0);
}

USEParser::LiteralTupleContext::LiteralTupleContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralBooleanTrueContext ------------------------------------------------------------------

USEParser::LiteralBooleanTrueContext::LiteralBooleanTrueContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralBooleanTrueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralBooleanTrue(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralRealContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralRealContext::REAL() {
  return getToken(USEParser::REAL, 0);
}

USEParser::LiteralRealContext::LiteralRealContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralRealContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralReal(this);
  else
    return visitor->visitChildren(this);
}
USEParser::LiteralContext* USEParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 98, USEParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(900);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::LiteralBooleanTrueContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(885);
      match(USEParser::T__55);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::LiteralBooleanFalseContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(886);
      match(USEParser::T__56);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::LiteralIntegerContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(887);
      match(USEParser::INT);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::LiteralRealContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(888);
      match(USEParser::REAL);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::LiteralStringContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(889);
      match(USEParser::STRING);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<USEParser::LiteralEnumContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(890);
      match(USEParser::HASH);
      setState(891);
      match(USEParser::ID);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<USEParser::LiteralQualifiedEnumContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(892);
      match(USEParser::ID);
      setState(893);
      match(USEParser::COLON_COLON);
      setState(894);
      match(USEParser::ID);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<USEParser::LiteralCollectionContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(895);
      collectionLiteral();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<USEParser::LiteralEmptyCollectionContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(896);
      emptyCollectionLiteral();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<USEParser::LiteralUndefinedContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(897);
      undefinedLiteral();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<USEParser::LiteralTupleContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(898);
      tupleLiteral();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<USEParser::LiteralUnlimitedNaturalContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(899);
      match(USEParser::STAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionLiteralContext ------------------------------------------------------------------

USEParser::CollectionLiteralContext::CollectionLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::CollectionLiteralContext::getRuleIndex() const {
  return USEParser::RuleCollectionLiteral;
}

void USEParser::CollectionLiteralContext::copyFrom(CollectionLiteralContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- OrderedSetLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OrderedSetLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::OrderedSetLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::OrderedSetLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::OrderedSetLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::OrderedSetLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::OrderedSetLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::OrderedSetLiteralContext::OrderedSetLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::OrderedSetLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOrderedSetLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SequenceLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SequenceLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::SequenceLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::SequenceLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::SequenceLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::SequenceLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::SequenceLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::SequenceLiteralContext::SequenceLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::SequenceLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSequenceLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BagLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::BagLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::BagLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::BagLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::BagLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::BagLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::BagLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::BagLiteralContext::BagLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::BagLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitBagLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SetLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::SetLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::SetLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::SetLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::SetLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::SetLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::SetLiteralContext::SetLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::SetLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSetLiteral(this);
  else
    return visitor->visitChildren(this);
}
USEParser::CollectionLiteralContext* USEParser::collectionLiteral() {
  CollectionLiteralContext *_localctx = _tracker.createInstance<CollectionLiteralContext>(_ctx, getState());
  enterRule(_localctx, 100, USEParser::RuleCollectionLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(954);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__57: {
        _localctx = _tracker.createInstance<USEParser::SetLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(902);
        match(USEParser::T__57);
        setState(903);
        match(USEParser::LBRACE);
        setState(912);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -63050635234246656) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 47287775002895) != 0)) {
          setState(904);
          collectionItem();
          setState(909);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(905);
            match(USEParser::COMMA);
            setState(906);
            collectionItem();
            setState(911);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(914);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__58: {
        _localctx = _tracker.createInstance<USEParser::SequenceLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(915);
        match(USEParser::T__58);
        setState(916);
        match(USEParser::LBRACE);
        setState(925);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -63050635234246656) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 47287775002895) != 0)) {
          setState(917);
          collectionItem();
          setState(922);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(918);
            match(USEParser::COMMA);
            setState(919);
            collectionItem();
            setState(924);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(927);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__59: {
        _localctx = _tracker.createInstance<USEParser::BagLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(928);
        match(USEParser::T__59);
        setState(929);
        match(USEParser::LBRACE);
        setState(938);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -63050635234246656) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 47287775002895) != 0)) {
          setState(930);
          collectionItem();
          setState(935);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(931);
            match(USEParser::COMMA);
            setState(932);
            collectionItem();
            setState(937);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(940);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__60: {
        _localctx = _tracker.createInstance<USEParser::OrderedSetLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(941);
        match(USEParser::T__60);
        setState(942);
        match(USEParser::LBRACE);
        setState(951);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -63050635234246656) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 47287775002895) != 0)) {
          setState(943);
          collectionItem();
          setState(948);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(944);
            match(USEParser::COMMA);
            setState(945);
            collectionItem();
            setState(950);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(953);
        match(USEParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionItemContext ------------------------------------------------------------------

USEParser::CollectionItemContext::CollectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::ExpressionContext *> USEParser::CollectionItemContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::CollectionItemContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

tree::TerminalNode* USEParser::CollectionItemContext::DOTDOT() {
  return getToken(USEParser::DOTDOT, 0);
}


size_t USEParser::CollectionItemContext::getRuleIndex() const {
  return USEParser::RuleCollectionItem;
}


std::any USEParser::CollectionItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitCollectionItem(this);
  else
    return visitor->visitChildren(this);
}

USEParser::CollectionItemContext* USEParser::collectionItem() {
  CollectionItemContext *_localctx = _tracker.createInstance<CollectionItemContext>(_ctx, getState());
  enterRule(_localctx, 102, USEParser::RuleCollectionItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(956);
    expression();
    setState(959);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::DOTDOT) {
      setState(957);
      match(USEParser::DOTDOT);
      setState(958);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyCollectionLiteralContext ------------------------------------------------------------------

USEParser::EmptyCollectionLiteralContext::EmptyCollectionLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::CollectionTypeContext* USEParser::EmptyCollectionLiteralContext::collectionType() {
  return getRuleContext<USEParser::CollectionTypeContext>(0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}


size_t USEParser::EmptyCollectionLiteralContext::getRuleIndex() const {
  return USEParser::RuleEmptyCollectionLiteral;
}


std::any USEParser::EmptyCollectionLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEmptyCollectionLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EmptyCollectionLiteralContext* USEParser::emptyCollectionLiteral() {
  EmptyCollectionLiteralContext *_localctx = _tracker.createInstance<EmptyCollectionLiteralContext>(_ctx, getState());
  enterRule(_localctx, 104, USEParser::RuleEmptyCollectionLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(970);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__61: {
        enterOuterAlt(_localctx, 1);
        setState(961);
        match(USEParser::T__61);
        setState(962);
        match(USEParser::LPAREN);
        setState(963);
        collectionType();
        setState(964);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__57:
      case USEParser::T__58:
      case USEParser::T__59:
      case USEParser::T__60:
      case USEParser::T__66: {
        enterOuterAlt(_localctx, 2);
        setState(966);
        collectionType();
        setState(967);
        match(USEParser::LBRACE);
        setState(968);
        match(USEParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UndefinedLiteralContext ------------------------------------------------------------------

USEParser::UndefinedLiteralContext::UndefinedLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::UndefinedLiteralContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::UndefinedLiteralContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::UndefinedLiteralContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::UndefinedLiteralContext::getRuleIndex() const {
  return USEParser::RuleUndefinedLiteral;
}


std::any USEParser::UndefinedLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUndefinedLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::UndefinedLiteralContext* USEParser::undefinedLiteral() {
  UndefinedLiteralContext *_localctx = _tracker.createInstance<UndefinedLiteralContext>(_ctx, getState());
  enterRule(_localctx, 106, USEParser::RuleUndefinedLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(984);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(972);
      match(USEParser::T__62);
      setState(973);
      match(USEParser::LPAREN);
      setState(974);
      type();
      setState(975);
      match(USEParser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(977);
      match(USEParser::T__63);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(978);
      match(USEParser::T__64);
      setState(979);
      match(USEParser::LPAREN);
      setState(980);
      type();
      setState(981);
      match(USEParser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(983);
      match(USEParser::T__64);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleLiteralContext ------------------------------------------------------------------

USEParser::TupleLiteralContext::TupleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TupleLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

std::vector<USEParser::TupleItemContext *> USEParser::TupleLiteralContext::tupleItem() {
  return getRuleContexts<USEParser::TupleItemContext>();
}

USEParser::TupleItemContext* USEParser::TupleLiteralContext::tupleItem(size_t i) {
  return getRuleContext<USEParser::TupleItemContext>(i);
}

tree::TerminalNode* USEParser::TupleLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<tree::TerminalNode *> USEParser::TupleLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::TupleLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::TupleLiteralContext::getRuleIndex() const {
  return USEParser::RuleTupleLiteral;
}


std::any USEParser::TupleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTupleLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TupleLiteralContext* USEParser::tupleLiteral() {
  TupleLiteralContext *_localctx = _tracker.createInstance<TupleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 108, USEParser::RuleTupleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(986);
    match(USEParser::T__65);
    setState(987);
    match(USEParser::LBRACE);
    setState(988);
    tupleItem();
    setState(993);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(989);
      match(USEParser::COMMA);
      setState(990);
      tupleItem();
      setState(995);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(996);
    match(USEParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleItemContext ------------------------------------------------------------------

USEParser::TupleItemContext::TupleItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TupleItemContext::getRuleIndex() const {
  return USEParser::RuleTupleItem;
}

void USEParser::TupleItemContext::copyFrom(TupleItemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UntypedTupleItemContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::UntypedTupleItemContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::ExpressionContext* USEParser::UntypedTupleItemContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::UntypedTupleItemContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::UntypedTupleItemContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::UntypedTupleItemContext::UntypedTupleItemContext(TupleItemContext *ctx) { copyFrom(ctx); }


std::any USEParser::UntypedTupleItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUntypedTupleItem(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypedTupleItemContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypedTupleItemContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::TypedTupleItemContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::TypedTupleItemContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypedTupleItemContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::TypedTupleItemContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

USEParser::TypedTupleItemContext::TypedTupleItemContext(TupleItemContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypedTupleItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypedTupleItem(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TupleItemContext* USEParser::tupleItem() {
  TupleItemContext *_localctx = _tracker.createInstance<TupleItemContext>(_ctx, getState());
  enterRule(_localctx, 110, USEParser::RuleTupleItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1007);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::TypedTupleItemContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(998);
      match(USEParser::ID);
      setState(999);
      match(USEParser::COLON);
      setState(1000);
      type();
      setState(1001);
      match(USEParser::EQUAL);
      setState(1002);
      expression();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::UntypedTupleItemContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1004);
      match(USEParser::ID);
      setState(1005);
      _la = _input->LA(1);
      if (!(_la == USEParser::COLON

      || _la == USEParser::EQUAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1006);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

USEParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TypeContext::getRuleIndex() const {
  return USEParser::RuleType;
}

void USEParser::TypeContext::copyFrom(TypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeTupleContext ------------------------------------------------------------------

USEParser::TupleTypeContext* USEParser::TypeTupleContext::tupleType() {
  return getRuleContext<USEParser::TupleTypeContext>(0);
}

USEParser::TypeTupleContext::TypeTupleContext(TypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeCollectionContext ------------------------------------------------------------------

USEParser::CollectionTypeContext* USEParser::TypeCollectionContext::collectionType() {
  return getRuleContext<USEParser::CollectionTypeContext>(0);
}

USEParser::TypeCollectionContext::TypeCollectionContext(TypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSimpleContext ------------------------------------------------------------------

USEParser::SimpleTypeContext* USEParser::TypeSimpleContext::simpleType() {
  return getRuleContext<USEParser::SimpleTypeContext>(0);
}

USEParser::TypeSimpleContext::TypeSimpleContext(TypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSimple(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TypeContext* USEParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 112, USEParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1012);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::TypeSimpleContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1009);
        simpleType();
        break;
      }

      case USEParser::T__57:
      case USEParser::T__58:
      case USEParser::T__59:
      case USEParser::T__60:
      case USEParser::T__66: {
        _localctx = _tracker.createInstance<USEParser::TypeCollectionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1010);
        collectionType();
        break;
      }

      case USEParser::T__65: {
        _localctx = _tracker.createInstance<USEParser::TypeTupleContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1011);
        tupleType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeOnlyContext ------------------------------------------------------------------

USEParser::TypeOnlyContext::TypeOnlyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::TypeContext* USEParser::TypeOnlyContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeOnlyContext::EOF() {
  return getToken(USEParser::EOF, 0);
}


size_t USEParser::TypeOnlyContext::getRuleIndex() const {
  return USEParser::RuleTypeOnly;
}


std::any USEParser::TypeOnlyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeOnly(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TypeOnlyContext* USEParser::typeOnly() {
  TypeOnlyContext *_localctx = _tracker.createInstance<TypeOnlyContext>(_ctx, getState());
  enterRule(_localctx, 114, USEParser::RuleTypeOnly);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1014);
    type();
    setState(1015);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeContext ------------------------------------------------------------------

USEParser::SimpleTypeContext::SimpleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::SimpleTypeContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::SimpleTypeContext::getRuleIndex() const {
  return USEParser::RuleSimpleType;
}


std::any USEParser::SimpleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSimpleType(this);
  else
    return visitor->visitChildren(this);
}

USEParser::SimpleTypeContext* USEParser::simpleType() {
  SimpleTypeContext *_localctx = _tracker.createInstance<SimpleTypeContext>(_ctx, getState());
  enterRule(_localctx, 116, USEParser::RuleSimpleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1017);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionTypeContext ------------------------------------------------------------------

USEParser::CollectionTypeContext::CollectionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::CollectionTypeContext::getRuleIndex() const {
  return USEParser::RuleCollectionType;
}

void USEParser::CollectionTypeContext::copyFrom(CollectionTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeBagContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeBagContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeBagContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeBagContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeBagContext::TypeBagContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeBagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeBag(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSimpleCollectionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSimpleCollectionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSimpleCollectionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSimpleCollectionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSimpleCollectionContext::TypeSimpleCollectionContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeSimpleCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSimpleCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeOrderedSetContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeOrderedSetContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeOrderedSetContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeOrderedSetContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeOrderedSetContext::TypeOrderedSetContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeOrderedSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeOrderedSet(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSequenceContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSequenceContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSequenceContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSequenceContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSequenceContext::TypeSequenceContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSequence(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSetContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSetContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSetContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSetContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSetContext::TypeSetContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSet(this);
  else
    return visitor->visitChildren(this);
}
USEParser::CollectionTypeContext* USEParser::collectionType() {
  CollectionTypeContext *_localctx = _tracker.createInstance<CollectionTypeContext>(_ctx, getState());
  enterRule(_localctx, 118, USEParser::RuleCollectionType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1044);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__66: {
        _localctx = _tracker.createInstance<USEParser::TypeSimpleCollectionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1019);
        match(USEParser::T__66);
        setState(1020);
        match(USEParser::LPAREN);
        setState(1021);
        type();
        setState(1022);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__57: {
        _localctx = _tracker.createInstance<USEParser::TypeSetContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1024);
        match(USEParser::T__57);
        setState(1025);
        match(USEParser::LPAREN);
        setState(1026);
        type();
        setState(1027);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__58: {
        _localctx = _tracker.createInstance<USEParser::TypeSequenceContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1029);
        match(USEParser::T__58);
        setState(1030);
        match(USEParser::LPAREN);
        setState(1031);
        type();
        setState(1032);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__59: {
        _localctx = _tracker.createInstance<USEParser::TypeBagContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1034);
        match(USEParser::T__59);
        setState(1035);
        match(USEParser::LPAREN);
        setState(1036);
        type();
        setState(1037);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__60: {
        _localctx = _tracker.createInstance<USEParser::TypeOrderedSetContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1039);
        match(USEParser::T__60);
        setState(1040);
        match(USEParser::LPAREN);
        setState(1041);
        type();
        setState(1042);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleTypeContext ------------------------------------------------------------------

USEParser::TupleTypeContext::TupleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TupleTypeContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

std::vector<USEParser::TuplePartContext *> USEParser::TupleTypeContext::tuplePart() {
  return getRuleContexts<USEParser::TuplePartContext>();
}

USEParser::TuplePartContext* USEParser::TupleTypeContext::tuplePart(size_t i) {
  return getRuleContext<USEParser::TuplePartContext>(i);
}

tree::TerminalNode* USEParser::TupleTypeContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::TupleTypeContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::TupleTypeContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::TupleTypeContext::getRuleIndex() const {
  return USEParser::RuleTupleType;
}


std::any USEParser::TupleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTupleType(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TupleTypeContext* USEParser::tupleType() {
  TupleTypeContext *_localctx = _tracker.createInstance<TupleTypeContext>(_ctx, getState());
  enterRule(_localctx, 120, USEParser::RuleTupleType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1046);
    match(USEParser::T__65);
    setState(1047);
    match(USEParser::LPAREN);
    setState(1048);
    tuplePart();
    setState(1053);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(1049);
      match(USEParser::COMMA);
      setState(1050);
      tuplePart();
      setState(1055);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1056);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TuplePartContext ------------------------------------------------------------------

USEParser::TuplePartContext::TuplePartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TuplePartContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::TuplePartContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::TuplePartContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::TuplePartContext::getRuleIndex() const {
  return USEParser::RuleTuplePart;
}


std::any USEParser::TuplePartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTuplePart(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TuplePartContext* USEParser::tuplePart() {
  TuplePartContext *_localctx = _tracker.createInstance<TuplePartContext>(_ctx, getState());
  enterRule(_localctx, 122, USEParser::RuleTuplePart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1058);
    match(USEParser::ID);
    setState(1059);
    match(USEParser::COLON);
    setState(1060);
    type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool USEParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 28: return logicalExpressionSempred(antlrcpp::downCast<LogicalExpressionContext *>(context), predicateIndex);
    case 32: return equalityExpressionSempred(antlrcpp::downCast<EqualityExpressionContext *>(context), predicateIndex);
    case 33: return relationalExpressionSempred(antlrcpp::downCast<RelationalExpressionContext *>(context), predicateIndex);
    case 34: return additiveExpressionSempred(antlrcpp::downCast<AdditiveExpressionContext *>(context), predicateIndex);
    case 35: return factorExpressionSempred(antlrcpp::downCast<FactorExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool USEParser::logicalExpressionSempred(LogicalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 7);
    case 1: return precpred(_ctx, 6);
    case 2: return precpred(_ctx, 5);
    case 3: return precpred(_ctx, 4);
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool USEParser::equalityExpressionSempred(EqualityExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::relationalExpressionSempred(RelationalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 4);
    case 9: return precpred(_ctx, 3);
    case 10: return precpred(_ctx, 2);
    case 11: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::additiveExpressionSempred(AdditiveExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 2);
    case 13: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::factorExpressionSempred(FactorExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 14: return precpred(_ctx, 2);
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void USEParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  useParserInitialize();
#else
  ::antlr4::internal::call_once(useParserOnceFlag, useParserInitialize);
#endif
}
