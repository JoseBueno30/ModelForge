 
/*
 * HEADER TEST
 */



// Generated from c:/Users/Victor/Documents/ModelForge/USE_grammar/USE.g4 by ANTLR 4.13.1


#include "USEVisitor.h"

#include "USEParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct USEParserStaticData final {
  USEParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  USEParserStaticData(const USEParserStaticData&) = delete;
  USEParserStaticData(USEParserStaticData&&) = delete;
  USEParserStaticData& operator=(const USEParserStaticData&) = delete;
  USEParserStaticData& operator=(USEParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag useParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
USEParserStaticData *useParserStaticData = nullptr;

void useParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (useParserStaticData != nullptr) {
    return;
  }
#else
  assert(useParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<USEParserStaticData>(
    std::vector<std::string>{
      "model", "modelElement", "enumTypeDefinition", "classDefinition", 
      "associationClassDefinition", "attributeDefinition", "initDefinition", 
      "derivedDefinition", "operationDefinition", "associationDefinition", 
      "associationEnd", "multiplicity", "multiplicityRange", "multiplicitySpec", 
      "constraintDefinition", "invariant", "invariantClause", "prePost", 
      "prePostClause", "stateMachine", "stateDefinition", "transitionDefinition", 
      "expressionOnly", "oclExpression", "expression", "lambdaExpression", 
      "letExpression", "logicalExpression", "paramList", "idList", "variableDeclaration", 
      "equalityExpression", "relationalExpression", "additiveExpression", 
      "factorExpression", "unaryExpression", "postfixExpression", "primaryExpression", 
      "objectReference", "propertyCall", "queryExpression", "iterateExpression", 
      "operationExpression", "inStateExpression", "typeExpression", "elemVarsDeclaration", 
      "variableInitialization", "conditionalExpression", "literal", "collectionLiteral", 
      "collectionItem", "emptyCollectionLiteral", "undefinedLiteral", "tupleLiteral", 
      "tupleItem", "type", "typeOnly", "simpleType", "collectionType", "tupleType", 
      "tuplePart", "role", "redefines", "subsets"
    },
    std::vector<std::string>{
      "", "'model'", "'constraints'", "'enum'", "'class'", "'attributes'", 
      "'operations'", "'statemachines'", "'end'", "'associationclass'", 
      "'between'", "'init'", "'derive'", "'derived'", "'association'", "'qualifier'", 
      "'context'", "'inv'", "'pre'", "'post'", "'psm'", "'states'", "'transitions'", 
      "'lambda'", "'in'", "'let'", "'and'", "'&'", "'or'", "'xor'", "'=>'", 
      "'implies'", "'div'", "'not'", "'allInstances'", "'byUseId'", "'select'", 
      "'reject'", "'collect'", "'exists'", "'forAll'", "'isUnique'", "'sortedBy'", 
      "'iterate'", "'oclInState'", "'oclAsType'", "'oclIsKindOf'", "'oclIsTypeOf'", 
      "'selectByType'", "'selectByKind'", "'if'", "'then'", "'else'", "'endif'", 
      "'true'", "'false'", "'Set'", "'Sequence'", "'Bag'", "'OrderedSet'", 
      "'oclEmpty'", "'oclUndefined'", "'Undefined'", "'null'", "'Tuple'", 
      "'Collection'", "'role'", "'redefines'", "'subsets'", "", "", "", 
      "'->'", "'@'", "'|'", "':'", "'::'", "':='", "','", "'.'", "'..'", 
      "'='", "'>'", "'>='", "'#'", "'{'", "'['", "'<'", "'<='", "'('", "'-'", 
      "'<>'", "'+'", "'}'", "']'", "')'", "';'", "'/'", "'*'", "'abstract'", 
      "'existential'", "'aggregation'", "'composition'", "'ordered'", "'union'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "WS", "SL_COMMENT", "ML_COMMENT", "ARROW", "AT", "BAR", "COLON", 
      "COLON_COLON", "COLON_EQUAL", "COMMA", "DOT", "DOTDOT", "EQUAL", "GREATER", 
      "GREATER_EQUAL", "HASH", "LBRACE", "LBRACK", "LESS", "LESS_EQUAL", 
      "LPAREN", "MINUS", "NOT_EQUAL", "PLUS", "RBRACE", "RBRACK", "RPAREN", 
      "SEMI", "SLASH", "STAR", "ABSTRACT", "EXISTENTIAL", "AGGREGATION", 
      "COMPOSITION", "ORDERED", "UNION", "INT", "REAL", "SOIL_OPERATION", 
      "STRING", "NON_OCL_STRING", "ID"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,110,1077,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,1,0,1,0,1,0,5,0,132,8,0,10,0,12,0,135,9,0,1,0,1,0,1,1,1,1,1,1,1,
  	1,1,1,1,1,5,1,145,8,1,10,1,12,1,148,9,1,3,1,150,8,1,1,2,1,2,1,2,1,2,1,
  	2,1,2,3,2,158,8,2,1,3,3,3,161,8,3,1,3,1,3,1,3,1,3,3,3,167,8,3,1,3,1,3,
  	5,3,171,8,3,10,3,12,3,174,9,3,3,3,176,8,3,1,3,1,3,5,3,180,8,3,10,3,12,
  	3,183,9,3,3,3,185,8,3,1,3,1,3,5,3,189,8,3,10,3,12,3,192,9,3,3,3,194,8,
  	3,1,3,1,3,5,3,198,8,3,10,3,12,3,201,9,3,3,3,203,8,3,1,3,1,3,1,4,3,4,208,
  	8,4,1,4,1,4,1,4,1,4,3,4,214,8,4,1,4,1,4,1,4,4,4,219,8,4,11,4,12,4,220,
  	3,4,223,8,4,1,4,1,4,5,4,227,8,4,10,4,12,4,230,9,4,3,4,232,8,4,1,4,1,4,
  	5,4,236,8,4,10,4,12,4,239,9,4,3,4,241,8,4,1,4,1,4,5,4,245,8,4,10,4,12,
  	4,248,9,4,3,4,250,8,4,1,4,1,4,5,4,254,8,4,10,4,12,4,257,9,4,3,4,259,8,
  	4,1,4,3,4,262,8,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,3,5,271,8,5,1,5,3,5,274,
  	8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,3,8,288,8,8,1,8,1,
  	8,1,8,3,8,293,8,8,1,8,5,8,296,8,8,10,8,12,8,299,9,8,1,8,3,8,302,8,8,1,
  	9,1,9,1,9,1,9,1,9,4,9,309,8,9,11,9,12,9,310,1,9,1,9,1,9,1,9,1,9,1,9,1,
  	9,4,9,320,8,9,11,9,12,9,321,1,9,1,9,1,9,1,9,1,9,1,9,1,9,4,9,331,8,9,11,
  	9,12,9,332,1,9,1,9,3,9,337,8,9,1,10,1,10,1,10,1,10,1,10,3,10,344,8,10,
  	1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,355,8,10,1,10,1,10,
  	1,10,1,10,5,10,361,8,10,10,10,12,10,364,9,10,1,10,3,10,367,8,10,1,11,
  	1,11,1,11,5,11,372,8,11,10,11,12,11,375,9,11,1,12,1,12,1,12,3,12,380,
  	8,12,1,13,1,13,1,14,1,14,3,14,386,8,14,1,15,1,15,1,15,1,15,5,15,392,8,
  	15,10,15,12,15,395,9,15,1,15,3,15,398,8,15,1,15,1,15,5,15,402,8,15,10,
  	15,12,15,405,9,15,1,16,1,16,3,16,409,8,16,1,16,1,16,1,16,1,16,1,16,3,
  	16,416,8,16,1,16,1,16,3,16,420,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
  	3,17,429,8,17,1,17,4,17,432,8,17,11,17,12,17,433,1,18,1,18,3,18,438,8,
  	18,1,18,1,18,1,18,1,18,3,18,444,8,18,1,18,1,18,3,18,448,8,18,1,19,1,19,
  	1,19,1,19,4,19,454,8,19,11,19,12,19,455,1,19,1,19,4,19,460,8,19,11,19,
  	12,19,461,1,19,1,19,1,20,1,20,1,20,3,20,469,8,20,1,20,1,20,1,20,1,20,
  	3,20,475,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,485,8,21,1,
  	21,1,21,1,21,3,21,490,8,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,498,8,21,
  	1,21,3,21,501,8,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,3,24,
  	512,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,3,26,
  	525,8,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	5,27,553,8,27,10,27,12,27,556,9,27,1,28,1,28,1,28,1,28,5,28,562,8,28,
  	10,28,12,28,565,9,28,3,28,567,8,28,1,28,1,28,1,29,1,29,1,29,5,29,574,
  	8,29,10,29,12,29,577,9,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,5,31,592,8,31,10,31,12,31,595,9,31,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,612,
  	8,32,10,32,12,32,615,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	5,33,626,8,33,10,33,12,33,629,9,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
  	1,34,1,34,5,34,640,8,34,10,34,12,34,643,9,34,1,35,1,35,1,35,1,35,1,35,
  	1,35,1,35,3,35,652,8,35,1,36,1,36,1,36,1,36,4,36,658,8,36,11,36,12,36,
  	659,3,36,662,8,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
  	37,1,37,3,37,676,8,37,1,37,1,37,3,37,680,8,37,1,37,1,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,3,37,690,8,37,3,37,692,8,37,1,38,1,38,1,38,1,39,1,39,1,
  	39,1,39,1,39,3,39,702,8,39,1,40,1,40,1,40,1,40,1,40,3,40,709,8,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,719,8,40,1,40,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,40,3,40,729,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,3,40,739,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,749,8,
  	40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,759,8,40,1,40,1,40,1,
  	40,1,40,1,40,1,40,1,40,1,40,3,40,769,8,40,1,40,1,40,1,40,3,40,774,8,40,
  	1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,
  	5,42,790,8,42,10,42,12,42,793,9,42,1,42,1,42,1,42,1,42,1,42,5,42,800,
  	8,42,10,42,12,42,803,9,42,1,42,1,42,3,42,807,8,42,3,42,809,8,42,1,42,
  	1,42,3,42,813,8,42,1,42,1,42,1,42,1,42,5,42,819,8,42,10,42,12,42,822,
  	9,42,3,42,824,8,42,1,42,3,42,827,8,42,1,43,1,43,1,43,1,43,1,43,1,44,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,859,8,44,1,45,1,
  	45,1,45,3,45,864,8,45,1,45,1,45,1,45,1,45,3,45,870,8,45,5,45,872,8,45,
  	10,45,12,45,875,9,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,
  	1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,48,1,48,3,48,906,8,48,1,49,1,49,1,49,1,49,1,49,5,49,
  	913,8,49,10,49,12,49,916,9,49,3,49,918,8,49,1,49,1,49,1,49,1,49,1,49,
  	1,49,5,49,926,8,49,10,49,12,49,929,9,49,3,49,931,8,49,1,49,1,49,1,49,
  	1,49,1,49,1,49,5,49,939,8,49,10,49,12,49,942,9,49,3,49,944,8,49,1,49,
  	1,49,1,49,1,49,1,49,1,49,5,49,952,8,49,10,49,12,49,955,9,49,3,49,957,
  	8,49,1,49,3,49,960,8,49,1,50,1,50,1,50,3,50,965,8,50,1,51,1,51,1,51,1,
  	51,1,51,1,51,1,51,1,51,1,51,3,51,976,8,51,1,52,1,52,1,52,1,52,1,52,1,
  	52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,990,8,52,1,53,1,53,1,53,1,53,1,
  	53,5,53,997,8,53,10,53,12,53,1000,9,53,1,53,1,53,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,3,54,1013,8,54,1,55,1,55,1,55,3,55,1018,8,55,
  	1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
  	1,58,1,58,3,58,1050,8,58,1,59,1,59,1,59,1,59,1,59,5,59,1057,8,59,10,59,
  	12,59,1060,9,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,
  	1,62,1,63,1,63,1,63,1,63,0,5,54,62,64,66,68,64,0,2,4,6,8,10,12,14,16,
  	18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
  	64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
  	108,110,112,114,116,118,120,122,124,126,0,6,1,0,101,102,2,0,75,75,81,
  	81,1,0,12,13,2,0,98,98,105,105,2,0,32,32,97,97,2,0,72,72,79,79,1190,0,
  	128,1,0,0,0,2,149,1,0,0,0,4,151,1,0,0,0,6,160,1,0,0,0,8,207,1,0,0,0,10,
  	265,1,0,0,0,12,275,1,0,0,0,14,279,1,0,0,0,16,283,1,0,0,0,18,336,1,0,0,
  	0,20,338,1,0,0,0,22,368,1,0,0,0,24,376,1,0,0,0,26,381,1,0,0,0,28,385,
  	1,0,0,0,30,387,1,0,0,0,32,419,1,0,0,0,34,421,1,0,0,0,36,447,1,0,0,0,38,
  	449,1,0,0,0,40,465,1,0,0,0,42,476,1,0,0,0,44,502,1,0,0,0,46,505,1,0,0,
  	0,48,511,1,0,0,0,50,513,1,0,0,0,52,520,1,0,0,0,54,531,1,0,0,0,56,557,
  	1,0,0,0,58,570,1,0,0,0,60,578,1,0,0,0,62,582,1,0,0,0,64,596,1,0,0,0,66,
  	616,1,0,0,0,68,630,1,0,0,0,70,651,1,0,0,0,72,661,1,0,0,0,74,691,1,0,0,
  	0,76,693,1,0,0,0,78,701,1,0,0,0,80,773,1,0,0,0,82,775,1,0,0,0,84,784,
  	1,0,0,0,86,828,1,0,0,0,88,858,1,0,0,0,90,860,1,0,0,0,92,876,1,0,0,0,94,
  	882,1,0,0,0,96,905,1,0,0,0,98,959,1,0,0,0,100,961,1,0,0,0,102,975,1,0,
  	0,0,104,989,1,0,0,0,106,991,1,0,0,0,108,1012,1,0,0,0,110,1017,1,0,0,0,
  	112,1019,1,0,0,0,114,1022,1,0,0,0,116,1049,1,0,0,0,118,1051,1,0,0,0,120,
  	1063,1,0,0,0,122,1067,1,0,0,0,124,1070,1,0,0,0,126,1073,1,0,0,0,128,129,
  	5,1,0,0,129,133,5,110,0,0,130,132,3,2,1,0,131,130,1,0,0,0,132,135,1,0,
  	0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,136,1,0,0,0,135,133,1,0,0,0,136,
  	137,5,0,0,1,137,1,1,0,0,0,138,150,3,4,2,0,139,150,3,6,3,0,140,150,3,18,
  	9,0,141,150,3,8,4,0,142,146,5,2,0,0,143,145,3,28,14,0,144,143,1,0,0,0,
  	145,148,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,0,147,150,1,0,0,0,148,146,
  	1,0,0,0,149,138,1,0,0,0,149,139,1,0,0,0,149,140,1,0,0,0,149,141,1,0,0,
  	0,149,142,1,0,0,0,150,3,1,0,0,0,151,152,5,3,0,0,152,153,5,110,0,0,153,
  	154,5,85,0,0,154,155,3,58,29,0,155,157,5,93,0,0,156,158,5,96,0,0,157,
  	156,1,0,0,0,157,158,1,0,0,0,158,5,1,0,0,0,159,161,5,99,0,0,160,159,1,
  	0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,4,0,0,163,166,5,110,0,
  	0,164,165,5,87,0,0,165,167,3,58,29,0,166,164,1,0,0,0,166,167,1,0,0,0,
  	167,175,1,0,0,0,168,172,5,5,0,0,169,171,3,10,5,0,170,169,1,0,0,0,171,
  	174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,176,1,0,0,0,174,172,1,
  	0,0,0,175,168,1,0,0,0,175,176,1,0,0,0,176,184,1,0,0,0,177,181,5,6,0,0,
  	178,180,3,16,8,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,
  	182,1,0,0,0,182,185,1,0,0,0,183,181,1,0,0,0,184,177,1,0,0,0,184,185,1,
  	0,0,0,185,193,1,0,0,0,186,190,5,2,0,0,187,189,3,32,16,0,188,187,1,0,0,
  	0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,194,1,0,0,0,192,
  	190,1,0,0,0,193,186,1,0,0,0,193,194,1,0,0,0,194,202,1,0,0,0,195,199,5,
  	7,0,0,196,198,3,38,19,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,
  	0,199,200,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,202,195,1,0,0,0,202,
  	203,1,0,0,0,203,204,1,0,0,0,204,205,5,8,0,0,205,7,1,0,0,0,206,208,5,99,
  	0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,0,0,0,209,210,5,9,0,0,210,
  	213,5,110,0,0,211,212,5,87,0,0,212,214,3,58,29,0,213,211,1,0,0,0,213,
  	214,1,0,0,0,214,222,1,0,0,0,215,216,5,10,0,0,216,218,3,20,10,0,217,219,
  	3,20,10,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,
  	0,0,221,223,1,0,0,0,222,215,1,0,0,0,222,223,1,0,0,0,223,231,1,0,0,0,224,
  	228,5,5,0,0,225,227,3,10,5,0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,
  	1,0,0,0,228,229,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,231,224,1,0,0,
  	0,231,232,1,0,0,0,232,240,1,0,0,0,233,237,5,6,0,0,234,236,3,16,8,0,235,
  	234,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,241,1,
  	0,0,0,239,237,1,0,0,0,240,233,1,0,0,0,240,241,1,0,0,0,241,249,1,0,0,0,
  	242,246,5,2,0,0,243,245,3,32,16,0,244,243,1,0,0,0,245,248,1,0,0,0,246,
  	244,1,0,0,0,246,247,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,249,242,1,
  	0,0,0,249,250,1,0,0,0,250,258,1,0,0,0,251,255,5,7,0,0,252,254,3,38,19,
  	0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,
  	259,1,0,0,0,257,255,1,0,0,0,258,251,1,0,0,0,258,259,1,0,0,0,259,261,1,
  	0,0,0,260,262,7,0,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,
  	263,264,5,8,0,0,264,9,1,0,0,0,265,266,5,110,0,0,266,267,5,75,0,0,267,
  	270,3,110,55,0,268,271,3,12,6,0,269,271,3,14,7,0,270,268,1,0,0,0,270,
  	269,1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,274,5,96,0,0,273,272,
  	1,0,0,0,273,274,1,0,0,0,274,11,1,0,0,0,275,276,5,11,0,0,276,277,7,1,0,
  	0,277,278,3,48,24,0,278,13,1,0,0,0,279,280,7,2,0,0,280,281,7,1,0,0,281,
  	282,3,48,24,0,282,15,1,0,0,0,283,284,5,110,0,0,284,287,3,56,28,0,285,
  	286,5,75,0,0,286,288,3,110,55,0,287,285,1,0,0,0,287,288,1,0,0,0,288,292,
  	1,0,0,0,289,290,5,81,0,0,290,293,3,48,24,0,291,293,5,107,0,0,292,289,
  	1,0,0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,297,1,0,0,0,294,296,3,36,
  	18,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,
  	298,301,1,0,0,0,299,297,1,0,0,0,300,302,5,96,0,0,301,300,1,0,0,0,301,
  	302,1,0,0,0,302,17,1,0,0,0,303,304,5,14,0,0,304,305,5,110,0,0,305,306,
  	5,10,0,0,306,308,3,20,10,0,307,309,3,20,10,0,308,307,1,0,0,0,309,310,
  	1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,5,8,0,
  	0,313,337,1,0,0,0,314,315,5,101,0,0,315,316,5,110,0,0,316,317,5,10,0,
  	0,317,319,3,20,10,0,318,320,3,20,10,0,319,318,1,0,0,0,320,321,1,0,0,0,
  	321,319,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,5,8,0,0,324,337,
  	1,0,0,0,325,326,5,102,0,0,326,327,5,110,0,0,327,328,5,10,0,0,328,330,
  	3,20,10,0,329,331,3,20,10,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,1,
  	0,0,0,332,333,1,0,0,0,333,334,1,0,0,0,334,335,5,8,0,0,335,337,1,0,0,0,
  	336,303,1,0,0,0,336,314,1,0,0,0,336,325,1,0,0,0,337,19,1,0,0,0,338,339,
  	5,110,0,0,339,340,5,86,0,0,340,341,3,22,11,0,341,343,5,94,0,0,342,344,
  	3,122,61,0,343,342,1,0,0,0,343,344,1,0,0,0,344,362,1,0,0,0,345,361,5,
  	103,0,0,346,361,3,126,63,0,347,361,5,104,0,0,348,361,3,124,62,0,349,354,
  	7,2,0,0,350,351,5,89,0,0,351,352,3,90,45,0,352,353,5,95,0,0,353,355,1,
  	0,0,0,354,350,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,5,81,0,
  	0,357,361,3,48,24,0,358,359,5,15,0,0,359,361,3,56,28,0,360,345,1,0,0,
  	0,360,346,1,0,0,0,360,347,1,0,0,0,360,348,1,0,0,0,360,349,1,0,0,0,360,
  	358,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,366,1,
  	0,0,0,364,362,1,0,0,0,365,367,5,96,0,0,366,365,1,0,0,0,366,367,1,0,0,
  	0,367,21,1,0,0,0,368,373,3,24,12,0,369,370,5,78,0,0,370,372,3,24,12,0,
  	371,369,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,23,
  	1,0,0,0,375,373,1,0,0,0,376,379,3,26,13,0,377,378,5,80,0,0,378,380,3,
  	26,13,0,379,377,1,0,0,0,379,380,1,0,0,0,380,25,1,0,0,0,381,382,7,3,0,
  	0,382,27,1,0,0,0,383,386,3,30,15,0,384,386,3,34,17,0,385,383,1,0,0,0,
  	385,384,1,0,0,0,386,29,1,0,0,0,387,397,5,16,0,0,388,393,5,110,0,0,389,
  	390,5,78,0,0,390,392,5,110,0,0,391,389,1,0,0,0,392,395,1,0,0,0,393,391,
  	1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,398,5,75,
  	0,0,397,388,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,403,3,114,57,
  	0,400,402,3,32,16,0,401,400,1,0,0,0,402,405,1,0,0,0,403,401,1,0,0,0,403,
  	404,1,0,0,0,404,31,1,0,0,0,405,403,1,0,0,0,406,408,5,17,0,0,407,409,5,
  	110,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,411,5,75,
  	0,0,411,420,3,48,24,0,412,413,5,100,0,0,413,415,5,17,0,0,414,416,5,110,
  	0,0,415,414,1,0,0,0,415,416,1,0,0,0,416,417,1,0,0,0,417,418,5,75,0,0,
  	418,420,3,48,24,0,419,406,1,0,0,0,419,412,1,0,0,0,420,33,1,0,0,0,421,
  	422,5,16,0,0,422,423,5,110,0,0,423,424,5,76,0,0,424,425,5,110,0,0,425,
  	428,3,56,28,0,426,427,5,75,0,0,427,429,3,110,55,0,428,426,1,0,0,0,428,
  	429,1,0,0,0,429,431,1,0,0,0,430,432,3,36,18,0,431,430,1,0,0,0,432,433,
  	1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,35,1,0,0,0,435,437,5,18,0,
  	0,436,438,5,110,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,
  	440,5,75,0,0,440,448,3,48,24,0,441,443,5,19,0,0,442,444,5,110,0,0,443,
  	442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,446,5,75,0,0,446,448,
  	3,48,24,0,447,435,1,0,0,0,447,441,1,0,0,0,448,37,1,0,0,0,449,450,5,20,
  	0,0,450,451,5,110,0,0,451,453,5,21,0,0,452,454,3,40,20,0,453,452,1,0,
  	0,0,454,455,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,
  	459,5,22,0,0,458,460,3,42,21,0,459,458,1,0,0,0,460,461,1,0,0,0,461,459,
  	1,0,0,0,461,462,1,0,0,0,462,463,1,0,0,0,463,464,5,8,0,0,464,39,1,0,0,
  	0,465,468,5,110,0,0,466,467,5,75,0,0,467,469,5,110,0,0,468,466,1,0,0,
  	0,468,469,1,0,0,0,469,474,1,0,0,0,470,471,5,86,0,0,471,472,3,48,24,0,
  	472,473,5,94,0,0,473,475,1,0,0,0,474,470,1,0,0,0,474,475,1,0,0,0,475,
  	41,1,0,0,0,476,477,5,110,0,0,477,478,5,72,0,0,478,500,5,110,0,0,479,484,
  	5,85,0,0,480,481,5,86,0,0,481,482,3,48,24,0,482,483,5,94,0,0,483,485,
  	1,0,0,0,484,480,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,487,5,110,
  	0,0,487,489,5,89,0,0,488,490,3,56,28,0,489,488,1,0,0,0,489,490,1,0,0,
  	0,490,491,1,0,0,0,491,492,5,95,0,0,492,497,1,0,0,0,493,494,5,86,0,0,494,
  	495,3,48,24,0,495,496,5,94,0,0,496,498,1,0,0,0,497,493,1,0,0,0,497,498,
  	1,0,0,0,498,499,1,0,0,0,499,501,5,93,0,0,500,479,1,0,0,0,500,501,1,0,
  	0,0,501,43,1,0,0,0,502,503,3,48,24,0,503,504,5,0,0,1,504,45,1,0,0,0,505,
  	506,3,48,24,0,506,47,1,0,0,0,507,512,3,54,27,0,508,512,3,94,47,0,509,
  	512,3,50,25,0,510,512,3,52,26,0,511,507,1,0,0,0,511,508,1,0,0,0,511,509,
  	1,0,0,0,511,510,1,0,0,0,512,49,1,0,0,0,513,514,5,23,0,0,514,515,5,110,
  	0,0,515,516,5,75,0,0,516,517,3,110,55,0,517,518,5,24,0,0,518,519,3,48,
  	24,0,519,51,1,0,0,0,520,521,5,25,0,0,521,524,5,110,0,0,522,523,5,75,0,
  	0,523,525,3,110,55,0,524,522,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,
  	526,527,5,81,0,0,527,528,3,48,24,0,528,529,5,24,0,0,529,530,3,48,24,0,
  	530,53,1,0,0,0,531,532,6,27,-1,0,532,533,3,62,31,0,533,554,1,0,0,0,534,
  	535,10,7,0,0,535,536,5,26,0,0,536,553,3,54,27,8,537,538,10,6,0,0,538,
  	539,5,27,0,0,539,553,3,54,27,7,540,541,10,5,0,0,541,542,5,28,0,0,542,
  	553,3,54,27,6,543,544,10,4,0,0,544,545,5,29,0,0,545,553,3,54,27,5,546,
  	547,10,3,0,0,547,548,5,30,0,0,548,553,3,54,27,4,549,550,10,2,0,0,550,
  	551,5,31,0,0,551,553,3,54,27,3,552,534,1,0,0,0,552,537,1,0,0,0,552,540,
  	1,0,0,0,552,543,1,0,0,0,552,546,1,0,0,0,552,549,1,0,0,0,553,556,1,0,0,
  	0,554,552,1,0,0,0,554,555,1,0,0,0,555,55,1,0,0,0,556,554,1,0,0,0,557,
  	566,5,89,0,0,558,563,3,60,30,0,559,560,5,78,0,0,560,562,3,60,30,0,561,
  	559,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,567,1,
  	0,0,0,565,563,1,0,0,0,566,558,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,
  	568,569,5,95,0,0,569,57,1,0,0,0,570,575,5,110,0,0,571,572,5,78,0,0,572,
  	574,5,110,0,0,573,571,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,
  	1,0,0,0,576,59,1,0,0,0,577,575,1,0,0,0,578,579,5,110,0,0,579,580,5,75,
  	0,0,580,581,3,110,55,0,581,61,1,0,0,0,582,583,6,31,-1,0,583,584,3,64,
  	32,0,584,593,1,0,0,0,585,586,10,2,0,0,586,587,5,81,0,0,587,592,3,64,32,
  	0,588,589,10,1,0,0,589,590,5,91,0,0,590,592,3,64,32,0,591,585,1,0,0,0,
  	591,588,1,0,0,0,592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,63,
  	1,0,0,0,595,593,1,0,0,0,596,597,6,32,-1,0,597,598,3,66,33,0,598,613,1,
  	0,0,0,599,600,10,4,0,0,600,601,5,87,0,0,601,612,3,66,33,0,602,603,10,
  	3,0,0,603,604,5,82,0,0,604,612,3,66,33,0,605,606,10,2,0,0,606,607,5,88,
  	0,0,607,612,3,66,33,0,608,609,10,1,0,0,609,610,5,83,0,0,610,612,3,66,
  	33,0,611,599,1,0,0,0,611,602,1,0,0,0,611,605,1,0,0,0,611,608,1,0,0,0,
  	612,615,1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,65,1,0,0,0,615,613,
  	1,0,0,0,616,617,6,33,-1,0,617,618,3,68,34,0,618,627,1,0,0,0,619,620,10,
  	2,0,0,620,621,5,92,0,0,621,626,3,68,34,0,622,623,10,1,0,0,623,624,5,90,
  	0,0,624,626,3,68,34,0,625,619,1,0,0,0,625,622,1,0,0,0,626,629,1,0,0,0,
  	627,625,1,0,0,0,627,628,1,0,0,0,628,67,1,0,0,0,629,627,1,0,0,0,630,631,
  	6,34,-1,0,631,632,3,70,35,0,632,641,1,0,0,0,633,634,10,2,0,0,634,635,
  	5,98,0,0,635,640,3,70,35,0,636,637,10,1,0,0,637,638,7,4,0,0,638,640,3,
  	70,35,0,639,633,1,0,0,0,639,636,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,
  	0,641,642,1,0,0,0,642,69,1,0,0,0,643,641,1,0,0,0,644,645,5,33,0,0,645,
  	652,3,70,35,0,646,647,5,90,0,0,647,652,3,70,35,0,648,649,5,92,0,0,649,
  	652,3,70,35,0,650,652,3,72,36,0,651,644,1,0,0,0,651,646,1,0,0,0,651,648,
  	1,0,0,0,651,650,1,0,0,0,652,71,1,0,0,0,653,662,3,74,37,0,654,657,3,74,
  	37,0,655,656,7,5,0,0,656,658,3,78,39,0,657,655,1,0,0,0,658,659,1,0,0,
  	0,659,657,1,0,0,0,659,660,1,0,0,0,660,662,1,0,0,0,661,653,1,0,0,0,661,
  	654,1,0,0,0,662,73,1,0,0,0,663,692,3,96,48,0,664,692,3,76,38,0,665,692,
  	3,78,39,0,666,667,5,89,0,0,667,668,3,48,24,0,668,669,5,95,0,0,669,692,
  	1,0,0,0,670,671,5,110,0,0,671,672,5,79,0,0,672,675,5,34,0,0,673,674,5,
  	73,0,0,674,676,5,18,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,679,1,0,0,
  	0,677,678,5,89,0,0,678,680,5,95,0,0,679,677,1,0,0,0,679,680,1,0,0,0,680,
  	692,1,0,0,0,681,682,5,110,0,0,682,683,5,79,0,0,683,684,5,35,0,0,684,685,
  	5,89,0,0,685,686,3,48,24,0,686,689,5,95,0,0,687,688,5,73,0,0,688,690,
  	5,18,0,0,689,687,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,663,1,0,
  	0,0,691,664,1,0,0,0,691,665,1,0,0,0,691,666,1,0,0,0,691,670,1,0,0,0,691,
  	681,1,0,0,0,692,75,1,0,0,0,693,694,5,73,0,0,694,695,5,110,0,0,695,77,
  	1,0,0,0,696,702,3,80,40,0,697,702,3,82,41,0,698,702,3,84,42,0,699,702,
  	3,88,44,0,700,702,3,86,43,0,701,696,1,0,0,0,701,697,1,0,0,0,701,698,1,
  	0,0,0,701,699,1,0,0,0,701,700,1,0,0,0,702,79,1,0,0,0,703,704,5,36,0,0,
  	704,708,5,89,0,0,705,706,3,90,45,0,706,707,5,74,0,0,707,709,1,0,0,0,708,
  	705,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,711,3,48,24,0,711,712,
  	5,95,0,0,712,774,1,0,0,0,713,714,5,37,0,0,714,718,5,89,0,0,715,716,3,
  	90,45,0,716,717,5,74,0,0,717,719,1,0,0,0,718,715,1,0,0,0,718,719,1,0,
  	0,0,719,720,1,0,0,0,720,721,3,48,24,0,721,722,5,95,0,0,722,774,1,0,0,
  	0,723,724,5,38,0,0,724,728,5,89,0,0,725,726,3,90,45,0,726,727,5,74,0,
  	0,727,729,1,0,0,0,728,725,1,0,0,0,728,729,1,0,0,0,729,730,1,0,0,0,730,
  	731,3,48,24,0,731,732,5,95,0,0,732,774,1,0,0,0,733,734,5,39,0,0,734,738,
  	5,89,0,0,735,736,3,90,45,0,736,737,5,74,0,0,737,739,1,0,0,0,738,735,1,
  	0,0,0,738,739,1,0,0,0,739,740,1,0,0,0,740,741,3,48,24,0,741,742,5,95,
  	0,0,742,774,1,0,0,0,743,744,5,40,0,0,744,748,5,89,0,0,745,746,3,90,45,
  	0,746,747,5,74,0,0,747,749,1,0,0,0,748,745,1,0,0,0,748,749,1,0,0,0,749,
  	750,1,0,0,0,750,751,3,48,24,0,751,752,5,95,0,0,752,774,1,0,0,0,753,754,
  	5,41,0,0,754,758,5,89,0,0,755,756,3,90,45,0,756,757,5,74,0,0,757,759,
  	1,0,0,0,758,755,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,761,3,48,
  	24,0,761,762,5,95,0,0,762,774,1,0,0,0,763,764,5,42,0,0,764,768,5,89,0,
  	0,765,766,3,90,45,0,766,767,5,74,0,0,767,769,1,0,0,0,768,765,1,0,0,0,
  	768,769,1,0,0,0,769,770,1,0,0,0,770,771,3,48,24,0,771,772,5,95,0,0,772,
  	774,1,0,0,0,773,703,1,0,0,0,773,713,1,0,0,0,773,723,1,0,0,0,773,733,1,
  	0,0,0,773,743,1,0,0,0,773,753,1,0,0,0,773,763,1,0,0,0,774,81,1,0,0,0,
  	775,776,5,43,0,0,776,777,5,89,0,0,777,778,3,90,45,0,778,779,5,96,0,0,
  	779,780,3,92,46,0,780,781,5,74,0,0,781,782,3,48,24,0,782,783,5,95,0,0,
  	783,83,1,0,0,0,784,808,5,110,0,0,785,786,5,86,0,0,786,791,3,48,24,0,787,
  	788,5,78,0,0,788,790,3,48,24,0,789,787,1,0,0,0,790,793,1,0,0,0,791,789,
  	1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,791,1,0,0,0,794,806,5,94,
  	0,0,795,796,5,86,0,0,796,801,3,48,24,0,797,798,5,78,0,0,798,800,3,48,
  	24,0,799,797,1,0,0,0,800,803,1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,
  	802,804,1,0,0,0,803,801,1,0,0,0,804,805,5,94,0,0,805,807,1,0,0,0,806,
  	795,1,0,0,0,806,807,1,0,0,0,807,809,1,0,0,0,808,785,1,0,0,0,808,809,1,
  	0,0,0,809,812,1,0,0,0,810,811,5,73,0,0,811,813,5,18,0,0,812,810,1,0,0,
  	0,812,813,1,0,0,0,813,826,1,0,0,0,814,823,5,89,0,0,815,820,3,48,24,0,
  	816,817,5,78,0,0,817,819,3,48,24,0,818,816,1,0,0,0,819,822,1,0,0,0,820,
  	818,1,0,0,0,820,821,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,823,815,1,
  	0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,827,5,95,0,0,826,814,1,0,0,
  	0,826,827,1,0,0,0,827,85,1,0,0,0,828,829,5,44,0,0,829,830,5,89,0,0,830,
  	831,5,110,0,0,831,832,5,95,0,0,832,87,1,0,0,0,833,834,5,45,0,0,834,835,
  	5,89,0,0,835,836,3,110,55,0,836,837,5,95,0,0,837,859,1,0,0,0,838,839,
  	5,46,0,0,839,840,5,89,0,0,840,841,3,110,55,0,841,842,5,95,0,0,842,859,
  	1,0,0,0,843,844,5,47,0,0,844,845,5,89,0,0,845,846,3,110,55,0,846,847,
  	5,95,0,0,847,859,1,0,0,0,848,849,5,48,0,0,849,850,5,89,0,0,850,851,3,
  	110,55,0,851,852,5,95,0,0,852,859,1,0,0,0,853,854,5,49,0,0,854,855,5,
  	89,0,0,855,856,3,110,55,0,856,857,5,95,0,0,857,859,1,0,0,0,858,833,1,
  	0,0,0,858,838,1,0,0,0,858,843,1,0,0,0,858,848,1,0,0,0,858,853,1,0,0,0,
  	859,89,1,0,0,0,860,863,5,110,0,0,861,862,5,75,0,0,862,864,3,110,55,0,
  	863,861,1,0,0,0,863,864,1,0,0,0,864,873,1,0,0,0,865,866,5,78,0,0,866,
  	869,5,110,0,0,867,868,5,75,0,0,868,870,3,110,55,0,869,867,1,0,0,0,869,
  	870,1,0,0,0,870,872,1,0,0,0,871,865,1,0,0,0,872,875,1,0,0,0,873,871,1,
  	0,0,0,873,874,1,0,0,0,874,91,1,0,0,0,875,873,1,0,0,0,876,877,5,110,0,
  	0,877,878,5,75,0,0,878,879,3,110,55,0,879,880,5,81,0,0,880,881,3,48,24,
  	0,881,93,1,0,0,0,882,883,5,50,0,0,883,884,3,48,24,0,884,885,5,51,0,0,
  	885,886,3,48,24,0,886,887,5,52,0,0,887,888,3,48,24,0,888,889,5,53,0,0,
  	889,95,1,0,0,0,890,906,5,54,0,0,891,906,5,55,0,0,892,906,5,105,0,0,893,
  	906,5,106,0,0,894,906,5,108,0,0,895,896,5,84,0,0,896,906,5,110,0,0,897,
  	898,5,110,0,0,898,899,5,76,0,0,899,906,5,110,0,0,900,906,3,98,49,0,901,
  	906,3,102,51,0,902,906,3,104,52,0,903,906,3,106,53,0,904,906,5,98,0,0,
  	905,890,1,0,0,0,905,891,1,0,0,0,905,892,1,0,0,0,905,893,1,0,0,0,905,894,
  	1,0,0,0,905,895,1,0,0,0,905,897,1,0,0,0,905,900,1,0,0,0,905,901,1,0,0,
  	0,905,902,1,0,0,0,905,903,1,0,0,0,905,904,1,0,0,0,906,97,1,0,0,0,907,
  	908,5,56,0,0,908,917,5,85,0,0,909,914,3,100,50,0,910,911,5,78,0,0,911,
  	913,3,100,50,0,912,910,1,0,0,0,913,916,1,0,0,0,914,912,1,0,0,0,914,915,
  	1,0,0,0,915,918,1,0,0,0,916,914,1,0,0,0,917,909,1,0,0,0,917,918,1,0,0,
  	0,918,919,1,0,0,0,919,960,5,93,0,0,920,921,5,57,0,0,921,930,5,85,0,0,
  	922,927,3,100,50,0,923,924,5,78,0,0,924,926,3,100,50,0,925,923,1,0,0,
  	0,926,929,1,0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,931,1,0,0,0,929,
  	927,1,0,0,0,930,922,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,960,5,
  	93,0,0,933,934,5,58,0,0,934,943,5,85,0,0,935,940,3,100,50,0,936,937,5,
  	78,0,0,937,939,3,100,50,0,938,936,1,0,0,0,939,942,1,0,0,0,940,938,1,0,
  	0,0,940,941,1,0,0,0,941,944,1,0,0,0,942,940,1,0,0,0,943,935,1,0,0,0,943,
  	944,1,0,0,0,944,945,1,0,0,0,945,960,5,93,0,0,946,947,5,59,0,0,947,956,
  	5,85,0,0,948,953,3,100,50,0,949,950,5,78,0,0,950,952,3,100,50,0,951,949,
  	1,0,0,0,952,955,1,0,0,0,953,951,1,0,0,0,953,954,1,0,0,0,954,957,1,0,0,
  	0,955,953,1,0,0,0,956,948,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,
  	960,5,93,0,0,959,907,1,0,0,0,959,920,1,0,0,0,959,933,1,0,0,0,959,946,
  	1,0,0,0,960,99,1,0,0,0,961,964,3,48,24,0,962,963,5,80,0,0,963,965,3,48,
  	24,0,964,962,1,0,0,0,964,965,1,0,0,0,965,101,1,0,0,0,966,967,5,60,0,0,
  	967,968,5,89,0,0,968,969,3,116,58,0,969,970,5,95,0,0,970,976,1,0,0,0,
  	971,972,3,116,58,0,972,973,5,85,0,0,973,974,5,93,0,0,974,976,1,0,0,0,
  	975,966,1,0,0,0,975,971,1,0,0,0,976,103,1,0,0,0,977,978,5,61,0,0,978,
  	979,5,89,0,0,979,980,3,110,55,0,980,981,5,95,0,0,981,990,1,0,0,0,982,
  	990,5,62,0,0,983,984,5,63,0,0,984,985,5,89,0,0,985,986,3,110,55,0,986,
  	987,5,95,0,0,987,990,1,0,0,0,988,990,5,63,0,0,989,977,1,0,0,0,989,982,
  	1,0,0,0,989,983,1,0,0,0,989,988,1,0,0,0,990,105,1,0,0,0,991,992,5,64,
  	0,0,992,993,5,85,0,0,993,998,3,108,54,0,994,995,5,78,0,0,995,997,3,108,
  	54,0,996,994,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,0,998,999,1,0,0,0,
  	999,1001,1,0,0,0,1000,998,1,0,0,0,1001,1002,5,93,0,0,1002,107,1,0,0,0,
  	1003,1004,5,110,0,0,1004,1005,5,75,0,0,1005,1006,3,110,55,0,1006,1007,
  	5,81,0,0,1007,1008,3,48,24,0,1008,1013,1,0,0,0,1009,1010,5,110,0,0,1010,
  	1011,7,1,0,0,1011,1013,3,48,24,0,1012,1003,1,0,0,0,1012,1009,1,0,0,0,
  	1013,109,1,0,0,0,1014,1018,3,114,57,0,1015,1018,3,116,58,0,1016,1018,
  	3,118,59,0,1017,1014,1,0,0,0,1017,1015,1,0,0,0,1017,1016,1,0,0,0,1018,
  	111,1,0,0,0,1019,1020,3,110,55,0,1020,1021,5,0,0,1,1021,113,1,0,0,0,1022,
  	1023,5,110,0,0,1023,115,1,0,0,0,1024,1025,5,65,0,0,1025,1026,5,89,0,0,
  	1026,1027,3,110,55,0,1027,1028,5,95,0,0,1028,1050,1,0,0,0,1029,1030,5,
  	56,0,0,1030,1031,5,89,0,0,1031,1032,3,110,55,0,1032,1033,5,95,0,0,1033,
  	1050,1,0,0,0,1034,1035,5,57,0,0,1035,1036,5,89,0,0,1036,1037,3,110,55,
  	0,1037,1038,5,95,0,0,1038,1050,1,0,0,0,1039,1040,5,58,0,0,1040,1041,5,
  	89,0,0,1041,1042,3,110,55,0,1042,1043,5,95,0,0,1043,1050,1,0,0,0,1044,
  	1045,5,59,0,0,1045,1046,5,89,0,0,1046,1047,3,110,55,0,1047,1048,5,95,
  	0,0,1048,1050,1,0,0,0,1049,1024,1,0,0,0,1049,1029,1,0,0,0,1049,1034,1,
  	0,0,0,1049,1039,1,0,0,0,1049,1044,1,0,0,0,1050,117,1,0,0,0,1051,1052,
  	5,64,0,0,1052,1053,5,89,0,0,1053,1058,3,120,60,0,1054,1055,5,78,0,0,1055,
  	1057,3,120,60,0,1056,1054,1,0,0,0,1057,1060,1,0,0,0,1058,1056,1,0,0,0,
  	1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,1058,1,0,0,0,1061,1062,5,95,
  	0,0,1062,119,1,0,0,0,1063,1064,5,110,0,0,1064,1065,5,75,0,0,1065,1066,
  	3,110,55,0,1066,121,1,0,0,0,1067,1068,5,66,0,0,1068,1069,5,110,0,0,1069,
  	123,1,0,0,0,1070,1071,5,67,0,0,1071,1072,5,110,0,0,1072,125,1,0,0,0,1073,
  	1074,5,68,0,0,1074,1075,5,110,0,0,1075,127,1,0,0,0,125,133,146,149,157,
  	160,166,172,175,181,184,190,193,199,202,207,213,220,222,228,231,237,240,
  	246,249,255,258,261,270,273,287,292,297,301,310,321,332,336,343,354,360,
  	362,366,373,379,385,393,397,403,408,415,419,428,433,437,443,447,455,461,
  	468,474,484,489,497,500,511,524,552,554,563,566,575,591,593,611,613,625,
  	627,639,641,651,659,661,675,679,689,691,701,708,718,728,738,748,758,768,
  	773,791,801,806,808,812,820,823,826,858,863,869,873,905,914,917,927,930,
  	940,943,953,956,959,964,975,989,998,1012,1017,1049,1058
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  useParserStaticData = staticData.release();
}

}

USEParser::USEParser(TokenStream *input) : USEParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

USEParser::USEParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  USEParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *useParserStaticData->atn, useParserStaticData->decisionToDFA, useParserStaticData->sharedContextCache, options);
}

USEParser::~USEParser() {
  delete _interpreter;
}

const atn::ATN& USEParser::getATN() const {
  return *useParserStaticData->atn;
}

std::string USEParser::getGrammarFileName() const {
  return "USE.g4";
}

const std::vector<std::string>& USEParser::getRuleNames() const {
  return useParserStaticData->ruleNames;
}

const dfa::Vocabulary& USEParser::getVocabulary() const {
  return useParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView USEParser::getSerializedATN() const {
  return useParserStaticData->serializedATN;
}


//----------------- ModelContext ------------------------------------------------------------------

USEParser::ModelContext::ModelContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ModelContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ModelContext::EOF() {
  return getToken(USEParser::EOF, 0);
}

std::vector<USEParser::ModelElementContext *> USEParser::ModelContext::modelElement() {
  return getRuleContexts<USEParser::ModelElementContext>();
}

USEParser::ModelElementContext* USEParser::ModelContext::modelElement(size_t i) {
  return getRuleContext<USEParser::ModelElementContext>(i);
}


size_t USEParser::ModelContext::getRuleIndex() const {
  return USEParser::RuleModel;
}


std::any USEParser::ModelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitModel(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ModelContext* USEParser::model() {
  ModelContext *_localctx = _tracker.createInstance<ModelContext>(_ctx, getState());
  enterRule(_localctx, 0, USEParser::RuleModel);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(128);
    match(USEParser::T__0);
    setState(129);
    match(USEParser::ID);
    setState(133);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 16924) != 0) || ((((_la - 99) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 99)) & 13) != 0)) {
      setState(130);
      modelElement();
      setState(135);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(136);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModelElementContext ------------------------------------------------------------------

USEParser::ModelElementContext::ModelElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::ModelElementContext::getRuleIndex() const {
  return USEParser::RuleModelElement;
}

void USEParser::ModelElementContext::copyFrom(ModelElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EnumContext ------------------------------------------------------------------

USEParser::EnumTypeDefinitionContext* USEParser::EnumContext::enumTypeDefinition() {
  return getRuleContext<USEParser::EnumTypeDefinitionContext>(0);
}

USEParser::EnumContext::EnumContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::EnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AssociationContext ------------------------------------------------------------------

USEParser::AssociationDefinitionContext* USEParser::AssociationContext::associationDefinition() {
  return getRuleContext<USEParser::AssociationDefinitionContext>(0);
}

USEParser::AssociationContext::AssociationContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::AssociationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConstraintsContext ------------------------------------------------------------------

std::vector<USEParser::ConstraintDefinitionContext *> USEParser::ConstraintsContext::constraintDefinition() {
  return getRuleContexts<USEParser::ConstraintDefinitionContext>();
}

USEParser::ConstraintDefinitionContext* USEParser::ConstraintsContext::constraintDefinition(size_t i) {
  return getRuleContext<USEParser::ConstraintDefinitionContext>(i);
}

USEParser::ConstraintsContext::ConstraintsContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::ConstraintsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConstraints(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClassContext ------------------------------------------------------------------

USEParser::ClassDefinitionContext* USEParser::ClassContext::classDefinition() {
  return getRuleContext<USEParser::ClassDefinitionContext>(0);
}

USEParser::ClassContext::ClassContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::ClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitClass(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AssociationClassContext ------------------------------------------------------------------

USEParser::AssociationClassDefinitionContext* USEParser::AssociationClassContext::associationClassDefinition() {
  return getRuleContext<USEParser::AssociationClassDefinitionContext>(0);
}

USEParser::AssociationClassContext::AssociationClassContext(ModelElementContext *ctx) { copyFrom(ctx); }


std::any USEParser::AssociationClassContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationClass(this);
  else
    return visitor->visitChildren(this);
}
USEParser::ModelElementContext* USEParser::modelElement() {
  ModelElementContext *_localctx = _tracker.createInstance<ModelElementContext>(_ctx, getState());
  enterRule(_localctx, 2, USEParser::RuleModelElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(149);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::EnumContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(138);
      enumTypeDefinition();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::ClassContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(139);
      classDefinition();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::AssociationContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(140);
      associationDefinition();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::AssociationClassContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(141);
      associationClassDefinition();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::ConstraintsContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(142);
      match(USEParser::T__1);
      setState(146);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__15) {
        setState(143);
        constraintDefinition();
        setState(148);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumTypeDefinitionContext ------------------------------------------------------------------

USEParser::EnumTypeDefinitionContext::EnumTypeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

USEParser::IdListContext* USEParser::EnumTypeDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

tree::TerminalNode* USEParser::EnumTypeDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}


size_t USEParser::EnumTypeDefinitionContext::getRuleIndex() const {
  return USEParser::RuleEnumTypeDefinition;
}


std::any USEParser::EnumTypeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEnumTypeDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EnumTypeDefinitionContext* USEParser::enumTypeDefinition() {
  EnumTypeDefinitionContext *_localctx = _tracker.createInstance<EnumTypeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 4, USEParser::RuleEnumTypeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(151);
    match(USEParser::T__2);
    setState(152);
    match(USEParser::ID);
    setState(153);
    match(USEParser::LBRACE);
    setState(154);
    idList();
    setState(155);
    match(USEParser::RBRACE);
    setState(157);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(156);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassDefinitionContext ------------------------------------------------------------------

USEParser::ClassDefinitionContext::ClassDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ClassDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ClassDefinitionContext::ABSTRACT() {
  return getToken(USEParser::ABSTRACT, 0);
}

tree::TerminalNode* USEParser::ClassDefinitionContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::IdListContext* USEParser::ClassDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

std::vector<USEParser::AttributeDefinitionContext *> USEParser::ClassDefinitionContext::attributeDefinition() {
  return getRuleContexts<USEParser::AttributeDefinitionContext>();
}

USEParser::AttributeDefinitionContext* USEParser::ClassDefinitionContext::attributeDefinition(size_t i) {
  return getRuleContext<USEParser::AttributeDefinitionContext>(i);
}

std::vector<USEParser::OperationDefinitionContext *> USEParser::ClassDefinitionContext::operationDefinition() {
  return getRuleContexts<USEParser::OperationDefinitionContext>();
}

USEParser::OperationDefinitionContext* USEParser::ClassDefinitionContext::operationDefinition(size_t i) {
  return getRuleContext<USEParser::OperationDefinitionContext>(i);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::ClassDefinitionContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::ClassDefinitionContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<USEParser::StateMachineContext *> USEParser::ClassDefinitionContext::stateMachine() {
  return getRuleContexts<USEParser::StateMachineContext>();
}

USEParser::StateMachineContext* USEParser::ClassDefinitionContext::stateMachine(size_t i) {
  return getRuleContext<USEParser::StateMachineContext>(i);
}


size_t USEParser::ClassDefinitionContext::getRuleIndex() const {
  return USEParser::RuleClassDefinition;
}


std::any USEParser::ClassDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitClassDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ClassDefinitionContext* USEParser::classDefinition() {
  ClassDefinitionContext *_localctx = _tracker.createInstance<ClassDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 6, USEParser::RuleClassDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(160);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ABSTRACT) {
      setState(159);
      match(USEParser::ABSTRACT);
    }
    setState(162);
    match(USEParser::T__3);
    setState(163);
    match(USEParser::ID);
    setState(166);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LESS) {
      setState(164);
      match(USEParser::LESS);
      setState(165);
      idList();
    }
    setState(175);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__4) {
      setState(168);
      match(USEParser::T__4);
      setState(172);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(169);
        attributeDefinition();
        setState(174);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(184);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__5) {
      setState(177);
      match(USEParser::T__5);
      setState(181);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(178);
        operationDefinition();
        setState(183);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(193);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__1) {
      setState(186);
      match(USEParser::T__1);
      setState(190);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__16 || _la == USEParser::EXISTENTIAL) {
        setState(187);
        invariantClause();
        setState(192);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(202);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__6) {
      setState(195);
      match(USEParser::T__6);
      setState(199);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__19) {
        setState(196);
        stateMachine();
        setState(201);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(204);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationClassDefinitionContext ------------------------------------------------------------------

USEParser::AssociationClassDefinitionContext::AssociationClassDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::ABSTRACT() {
  return getToken(USEParser::ABSTRACT, 0);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::IdListContext* USEParser::AssociationClassDefinitionContext::idList() {
  return getRuleContext<USEParser::IdListContext>(0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::AssociationClassDefinitionContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::AssociationClassDefinitionContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::AGGREGATION() {
  return getToken(USEParser::AGGREGATION, 0);
}

tree::TerminalNode* USEParser::AssociationClassDefinitionContext::COMPOSITION() {
  return getToken(USEParser::COMPOSITION, 0);
}

std::vector<USEParser::AttributeDefinitionContext *> USEParser::AssociationClassDefinitionContext::attributeDefinition() {
  return getRuleContexts<USEParser::AttributeDefinitionContext>();
}

USEParser::AttributeDefinitionContext* USEParser::AssociationClassDefinitionContext::attributeDefinition(size_t i) {
  return getRuleContext<USEParser::AttributeDefinitionContext>(i);
}

std::vector<USEParser::OperationDefinitionContext *> USEParser::AssociationClassDefinitionContext::operationDefinition() {
  return getRuleContexts<USEParser::OperationDefinitionContext>();
}

USEParser::OperationDefinitionContext* USEParser::AssociationClassDefinitionContext::operationDefinition(size_t i) {
  return getRuleContext<USEParser::OperationDefinitionContext>(i);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::AssociationClassDefinitionContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::AssociationClassDefinitionContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<USEParser::StateMachineContext *> USEParser::AssociationClassDefinitionContext::stateMachine() {
  return getRuleContexts<USEParser::StateMachineContext>();
}

USEParser::StateMachineContext* USEParser::AssociationClassDefinitionContext::stateMachine(size_t i) {
  return getRuleContext<USEParser::StateMachineContext>(i);
}


size_t USEParser::AssociationClassDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAssociationClassDefinition;
}


std::any USEParser::AssociationClassDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationClassDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AssociationClassDefinitionContext* USEParser::associationClassDefinition() {
  AssociationClassDefinitionContext *_localctx = _tracker.createInstance<AssociationClassDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 8, USEParser::RuleAssociationClassDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(207);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ABSTRACT) {
      setState(206);
      match(USEParser::ABSTRACT);
    }
    setState(209);
    match(USEParser::T__8);
    setState(210);
    match(USEParser::ID);
    setState(213);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LESS) {
      setState(211);
      match(USEParser::LESS);
      setState(212);
      idList();
    }
    setState(222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__9) {
      setState(215);
      match(USEParser::T__9);
      setState(216);
      associationEnd();
      setState(218); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(217);
        associationEnd();
        setState(220); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == USEParser::ID);
    }
    setState(231);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__4) {
      setState(224);
      match(USEParser::T__4);
      setState(228);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(225);
        attributeDefinition();
        setState(230);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(240);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__5) {
      setState(233);
      match(USEParser::T__5);
      setState(237);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::ID) {
        setState(234);
        operationDefinition();
        setState(239);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(249);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__1) {
      setState(242);
      match(USEParser::T__1);
      setState(246);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__16 || _la == USEParser::EXISTENTIAL) {
        setState(243);
        invariantClause();
        setState(248);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(258);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__6) {
      setState(251);
      match(USEParser::T__6);
      setState(255);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::T__19) {
        setState(252);
        stateMachine();
        setState(257);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(261);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::AGGREGATION

    || _la == USEParser::COMPOSITION) {
      setState(260);
      _la = _input->LA(1);
      if (!(_la == USEParser::AGGREGATION

      || _la == USEParser::COMPOSITION)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(263);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeDefinitionContext ------------------------------------------------------------------

USEParser::AttributeDefinitionContext::AttributeDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::AttributeDefinitionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

USEParser::InitDefinitionContext* USEParser::AttributeDefinitionContext::initDefinition() {
  return getRuleContext<USEParser::InitDefinitionContext>(0);
}

USEParser::DerivedDefinitionContext* USEParser::AttributeDefinitionContext::derivedDefinition() {
  return getRuleContext<USEParser::DerivedDefinitionContext>(0);
}

tree::TerminalNode* USEParser::AttributeDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}


size_t USEParser::AttributeDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAttributeDefinition;
}


std::any USEParser::AttributeDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAttributeDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AttributeDefinitionContext* USEParser::attributeDefinition() {
  AttributeDefinitionContext *_localctx = _tracker.createInstance<AttributeDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 10, USEParser::RuleAttributeDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(265);
    match(USEParser::ID);
    setState(266);
    match(USEParser::COLON);
    setState(267);
    type();
    setState(270);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__10: {
        setState(268);
        initDefinition();
        break;
      }

      case USEParser::T__11:
      case USEParser::T__12: {
        setState(269);
        derivedDefinition();
        break;
      }

      case USEParser::T__1:
      case USEParser::T__5:
      case USEParser::T__6:
      case USEParser::T__7:
      case USEParser::SEMI:
      case USEParser::AGGREGATION:
      case USEParser::COMPOSITION:
      case USEParser::ID: {
        break;
      }

    default:
      break;
    }
    setState(273);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(272);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDefinitionContext ------------------------------------------------------------------

USEParser::InitDefinitionContext::InitDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::InitDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::InitDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::InitDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}


size_t USEParser::InitDefinitionContext::getRuleIndex() const {
  return USEParser::RuleInitDefinition;
}


std::any USEParser::InitDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInitDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InitDefinitionContext* USEParser::initDefinition() {
  InitDefinitionContext *_localctx = _tracker.createInstance<InitDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 12, USEParser::RuleInitDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(275);
    match(USEParser::T__10);
    setState(276);
    _la = _input->LA(1);
    if (!(_la == USEParser::COLON

    || _la == USEParser::EQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(277);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DerivedDefinitionContext ------------------------------------------------------------------

USEParser::DerivedDefinitionContext::DerivedDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::DerivedDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::DerivedDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::DerivedDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}


size_t USEParser::DerivedDefinitionContext::getRuleIndex() const {
  return USEParser::RuleDerivedDefinition;
}


std::any USEParser::DerivedDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitDerivedDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::DerivedDefinitionContext* USEParser::derivedDefinition() {
  DerivedDefinitionContext *_localctx = _tracker.createInstance<DerivedDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 14, USEParser::RuleDerivedDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(279);
    _la = _input->LA(1);
    if (!(_la == USEParser::T__11

    || _la == USEParser::T__12)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(280);
    _la = _input->LA(1);
    if (!(_la == USEParser::COLON

    || _la == USEParser::EQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(281);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperationDefinitionContext ------------------------------------------------------------------

USEParser::OperationDefinitionContext::OperationDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::OperationDefinitionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::ParamListContext* USEParser::OperationDefinitionContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::OperationDefinitionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::SOIL_OPERATION() {
  return getToken(USEParser::SOIL_OPERATION, 0);
}

std::vector<USEParser::PrePostClauseContext *> USEParser::OperationDefinitionContext::prePostClause() {
  return getRuleContexts<USEParser::PrePostClauseContext>();
}

USEParser::PrePostClauseContext* USEParser::OperationDefinitionContext::prePostClause(size_t i) {
  return getRuleContext<USEParser::PrePostClauseContext>(i);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

tree::TerminalNode* USEParser::OperationDefinitionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::OperationDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::OperationDefinitionContext::getRuleIndex() const {
  return USEParser::RuleOperationDefinition;
}


std::any USEParser::OperationDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::OperationDefinitionContext* USEParser::operationDefinition() {
  OperationDefinitionContext *_localctx = _tracker.createInstance<OperationDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 16, USEParser::RuleOperationDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(283);
    match(USEParser::ID);
    setState(284);
    paramList();
    setState(287);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(285);
      match(USEParser::COLON);
      setState(286);
      type();
    }
    setState(292);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::EQUAL: {
        setState(289);
        match(USEParser::EQUAL);
        setState(290);
        expression();
        break;
      }

      case USEParser::SOIL_OPERATION: {
        setState(291);
        match(USEParser::SOIL_OPERATION);
        break;
      }

      case USEParser::T__1:
      case USEParser::T__6:
      case USEParser::T__7:
      case USEParser::T__17:
      case USEParser::T__18:
      case USEParser::SEMI:
      case USEParser::AGGREGATION:
      case USEParser::COMPOSITION:
      case USEParser::ID: {
        break;
      }

    default:
      break;
    }
    setState(297);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::T__17

    || _la == USEParser::T__18) {
      setState(294);
      prePostClause();
      setState(299);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(301);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(300);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationDefinitionContext ------------------------------------------------------------------

USEParser::AssociationDefinitionContext::AssociationDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::AssociationDefinitionContext::getRuleIndex() const {
  return USEParser::RuleAssociationDefinition;
}

void USEParser::AssociationDefinitionContext::copyFrom(AssociationDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AggregationContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::AggregationContext::AGGREGATION() {
  return getToken(USEParser::AGGREGATION, 0);
}

tree::TerminalNode* USEParser::AggregationContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::AggregationContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::AggregationContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::AggregationContext::AggregationContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AggregationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAggregation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CompositionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::CompositionContext::COMPOSITION() {
  return getToken(USEParser::COMPOSITION, 0);
}

tree::TerminalNode* USEParser::CompositionContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::CompositionContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::CompositionContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::CompositionContext::CompositionContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::CompositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitComposition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleAssociationContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SimpleAssociationContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::AssociationEndContext *> USEParser::SimpleAssociationContext::associationEnd() {
  return getRuleContexts<USEParser::AssociationEndContext>();
}

USEParser::AssociationEndContext* USEParser::SimpleAssociationContext::associationEnd(size_t i) {
  return getRuleContext<USEParser::AssociationEndContext>(i);
}

USEParser::SimpleAssociationContext::SimpleAssociationContext(AssociationDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SimpleAssociationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSimpleAssociation(this);
  else
    return visitor->visitChildren(this);
}
USEParser::AssociationDefinitionContext* USEParser::associationDefinition() {
  AssociationDefinitionContext *_localctx = _tracker.createInstance<AssociationDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 18, USEParser::RuleAssociationDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(336);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__13: {
        _localctx = _tracker.createInstance<USEParser::SimpleAssociationContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(303);
        match(USEParser::T__13);
        setState(304);
        match(USEParser::ID);
        setState(305);
        match(USEParser::T__9);
        setState(306);
        associationEnd();
        setState(308); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(307);
          associationEnd();
          setState(310); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(312);
        match(USEParser::T__7);
        break;
      }

      case USEParser::AGGREGATION: {
        _localctx = _tracker.createInstance<USEParser::AggregationContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(314);
        match(USEParser::AGGREGATION);
        setState(315);
        match(USEParser::ID);
        setState(316);
        match(USEParser::T__9);
        setState(317);
        associationEnd();
        setState(319); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(318);
          associationEnd();
          setState(321); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(323);
        match(USEParser::T__7);
        break;
      }

      case USEParser::COMPOSITION: {
        _localctx = _tracker.createInstance<USEParser::CompositionContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(325);
        match(USEParser::COMPOSITION);
        setState(326);
        match(USEParser::ID);
        setState(327);
        match(USEParser::T__9);
        setState(328);
        associationEnd();
        setState(330); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(329);
          associationEnd();
          setState(332); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == USEParser::ID);
        setState(334);
        match(USEParser::T__7);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssociationEndContext ------------------------------------------------------------------

USEParser::AssociationEndContext::AssociationEndContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::AssociationEndContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AssociationEndContext::LBRACK() {
  return getToken(USEParser::LBRACK, 0);
}

USEParser::MultiplicityContext* USEParser::AssociationEndContext::multiplicity() {
  return getRuleContext<USEParser::MultiplicityContext>(0);
}

tree::TerminalNode* USEParser::AssociationEndContext::RBRACK() {
  return getToken(USEParser::RBRACK, 0);
}

USEParser::RoleContext* USEParser::AssociationEndContext::role() {
  return getRuleContext<USEParser::RoleContext>(0);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::ORDERED() {
  return getTokens(USEParser::ORDERED);
}

tree::TerminalNode* USEParser::AssociationEndContext::ORDERED(size_t i) {
  return getToken(USEParser::ORDERED, i);
}

std::vector<USEParser::SubsetsContext *> USEParser::AssociationEndContext::subsets() {
  return getRuleContexts<USEParser::SubsetsContext>();
}

USEParser::SubsetsContext* USEParser::AssociationEndContext::subsets(size_t i) {
  return getRuleContext<USEParser::SubsetsContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::UNION() {
  return getTokens(USEParser::UNION);
}

tree::TerminalNode* USEParser::AssociationEndContext::UNION(size_t i) {
  return getToken(USEParser::UNION, i);
}

std::vector<USEParser::RedefinesContext *> USEParser::AssociationEndContext::redefines() {
  return getRuleContexts<USEParser::RedefinesContext>();
}

USEParser::RedefinesContext* USEParser::AssociationEndContext::redefines(size_t i) {
  return getRuleContext<USEParser::RedefinesContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::EQUAL() {
  return getTokens(USEParser::EQUAL);
}

tree::TerminalNode* USEParser::AssociationEndContext::EQUAL(size_t i) {
  return getToken(USEParser::EQUAL, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::AssociationEndContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::AssociationEndContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<USEParser::ParamListContext *> USEParser::AssociationEndContext::paramList() {
  return getRuleContexts<USEParser::ParamListContext>();
}

USEParser::ParamListContext* USEParser::AssociationEndContext::paramList(size_t i) {
  return getRuleContext<USEParser::ParamListContext>(i);
}

tree::TerminalNode* USEParser::AssociationEndContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::LPAREN() {
  return getTokens(USEParser::LPAREN);
}

tree::TerminalNode* USEParser::AssociationEndContext::LPAREN(size_t i) {
  return getToken(USEParser::LPAREN, i);
}

std::vector<USEParser::ElemVarsDeclarationContext *> USEParser::AssociationEndContext::elemVarsDeclaration() {
  return getRuleContexts<USEParser::ElemVarsDeclarationContext>();
}

USEParser::ElemVarsDeclarationContext* USEParser::AssociationEndContext::elemVarsDeclaration(size_t i) {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::AssociationEndContext::RPAREN() {
  return getTokens(USEParser::RPAREN);
}

tree::TerminalNode* USEParser::AssociationEndContext::RPAREN(size_t i) {
  return getToken(USEParser::RPAREN, i);
}


size_t USEParser::AssociationEndContext::getRuleIndex() const {
  return USEParser::RuleAssociationEnd;
}


std::any USEParser::AssociationEndContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAssociationEnd(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AssociationEndContext* USEParser::associationEnd() {
  AssociationEndContext *_localctx = _tracker.createInstance<AssociationEndContext>(_ctx, getState());
  enterRule(_localctx, 20, USEParser::RuleAssociationEnd);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(338);
    match(USEParser::ID);
    setState(339);
    match(USEParser::LBRACK);
    setState(340);
    multiplicity();
    setState(341);
    match(USEParser::RBRACK);
    setState(343);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::T__65) {
      setState(342);
      role();
    }
    setState(362);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 45056) != 0) || ((((_la - 67) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 67)) & 206158430211) != 0)) {
      setState(360);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case USEParser::ORDERED: {
          setState(345);
          match(USEParser::ORDERED);
          break;
        }

        case USEParser::T__67: {
          setState(346);
          subsets();
          break;
        }

        case USEParser::UNION: {
          setState(347);
          match(USEParser::UNION);
          break;
        }

        case USEParser::T__66: {
          setState(348);
          redefines();
          break;
        }

        case USEParser::T__11:
        case USEParser::T__12: {
          setState(349);
          _la = _input->LA(1);
          if (!(_la == USEParser::T__11

          || _la == USEParser::T__12)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(354);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == USEParser::LPAREN) {
            setState(350);
            match(USEParser::LPAREN);
            setState(351);
            elemVarsDeclaration();
            setState(352);
            match(USEParser::RPAREN);
          }
          setState(356);
          match(USEParser::EQUAL);
          setState(357);
          expression();
          break;
        }

        case USEParser::T__14: {
          setState(358);
          match(USEParser::T__14);
          setState(359);
          paramList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(364);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(366);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::SEMI) {
      setState(365);
      match(USEParser::SEMI);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityContext ------------------------------------------------------------------

USEParser::MultiplicityContext::MultiplicityContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::MultiplicityRangeContext *> USEParser::MultiplicityContext::multiplicityRange() {
  return getRuleContexts<USEParser::MultiplicityRangeContext>();
}

USEParser::MultiplicityRangeContext* USEParser::MultiplicityContext::multiplicityRange(size_t i) {
  return getRuleContext<USEParser::MultiplicityRangeContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::MultiplicityContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::MultiplicityContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::MultiplicityContext::getRuleIndex() const {
  return USEParser::RuleMultiplicity;
}


std::any USEParser::MultiplicityContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicity(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicityContext* USEParser::multiplicity() {
  MultiplicityContext *_localctx = _tracker.createInstance<MultiplicityContext>(_ctx, getState());
  enterRule(_localctx, 22, USEParser::RuleMultiplicity);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(368);
    multiplicityRange();
    setState(373);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(369);
      match(USEParser::COMMA);
      setState(370);
      multiplicityRange();
      setState(375);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicityRangeContext ------------------------------------------------------------------

USEParser::MultiplicityRangeContext::MultiplicityRangeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::MultiplicitySpecContext *> USEParser::MultiplicityRangeContext::multiplicitySpec() {
  return getRuleContexts<USEParser::MultiplicitySpecContext>();
}

USEParser::MultiplicitySpecContext* USEParser::MultiplicityRangeContext::multiplicitySpec(size_t i) {
  return getRuleContext<USEParser::MultiplicitySpecContext>(i);
}

tree::TerminalNode* USEParser::MultiplicityRangeContext::DOTDOT() {
  return getToken(USEParser::DOTDOT, 0);
}


size_t USEParser::MultiplicityRangeContext::getRuleIndex() const {
  return USEParser::RuleMultiplicityRange;
}


std::any USEParser::MultiplicityRangeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicityRange(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicityRangeContext* USEParser::multiplicityRange() {
  MultiplicityRangeContext *_localctx = _tracker.createInstance<MultiplicityRangeContext>(_ctx, getState());
  enterRule(_localctx, 24, USEParser::RuleMultiplicityRange);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(376);
    multiplicitySpec();
    setState(379);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::DOTDOT) {
      setState(377);
      match(USEParser::DOTDOT);
      setState(378);
      multiplicitySpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicitySpecContext ------------------------------------------------------------------

USEParser::MultiplicitySpecContext::MultiplicitySpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::MultiplicitySpecContext::INT() {
  return getToken(USEParser::INT, 0);
}

tree::TerminalNode* USEParser::MultiplicitySpecContext::STAR() {
  return getToken(USEParser::STAR, 0);
}


size_t USEParser::MultiplicitySpecContext::getRuleIndex() const {
  return USEParser::RuleMultiplicitySpec;
}


std::any USEParser::MultiplicitySpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicitySpec(this);
  else
    return visitor->visitChildren(this);
}

USEParser::MultiplicitySpecContext* USEParser::multiplicitySpec() {
  MultiplicitySpecContext *_localctx = _tracker.createInstance<MultiplicitySpecContext>(_ctx, getState());
  enterRule(_localctx, 26, USEParser::RuleMultiplicitySpec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(381);
    _la = _input->LA(1);
    if (!(_la == USEParser::STAR

    || _la == USEParser::INT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstraintDefinitionContext ------------------------------------------------------------------

USEParser::ConstraintDefinitionContext::ConstraintDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::ConstraintDefinitionContext::getRuleIndex() const {
  return USEParser::RuleConstraintDefinition;
}

void USEParser::ConstraintDefinitionContext::copyFrom(ConstraintDefinitionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PrePostDefinitionContext ------------------------------------------------------------------

USEParser::PrePostContext* USEParser::PrePostDefinitionContext::prePost() {
  return getRuleContext<USEParser::PrePostContext>(0);
}

USEParser::PrePostDefinitionContext::PrePostDefinitionContext(ConstraintDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PrePostDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPrePostDefinition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InvariantDefinitionContext ------------------------------------------------------------------

USEParser::InvariantContext* USEParser::InvariantDefinitionContext::invariant() {
  return getRuleContext<USEParser::InvariantContext>(0);
}

USEParser::InvariantDefinitionContext::InvariantDefinitionContext(ConstraintDefinitionContext *ctx) { copyFrom(ctx); }


std::any USEParser::InvariantDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInvariantDefinition(this);
  else
    return visitor->visitChildren(this);
}
USEParser::ConstraintDefinitionContext* USEParser::constraintDefinition() {
  ConstraintDefinitionContext *_localctx = _tracker.createInstance<ConstraintDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 28, USEParser::RuleConstraintDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(385);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::InvariantDefinitionContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(383);
      invariant();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::PrePostDefinitionContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(384);
      prePost();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantContext ------------------------------------------------------------------

USEParser::InvariantContext::InvariantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::SimpleTypeContext* USEParser::InvariantContext::simpleType() {
  return getRuleContext<USEParser::SimpleTypeContext>(0);
}

std::vector<tree::TerminalNode *> USEParser::InvariantContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::InvariantContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::InvariantContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

std::vector<USEParser::InvariantClauseContext *> USEParser::InvariantContext::invariantClause() {
  return getRuleContexts<USEParser::InvariantClauseContext>();
}

USEParser::InvariantClauseContext* USEParser::InvariantContext::invariantClause(size_t i) {
  return getRuleContext<USEParser::InvariantClauseContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::InvariantContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::InvariantContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::InvariantContext::getRuleIndex() const {
  return USEParser::RuleInvariant;
}


std::any USEParser::InvariantContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInvariant(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InvariantContext* USEParser::invariant() {
  InvariantContext *_localctx = _tracker.createInstance<InvariantContext>(_ctx, getState());
  enterRule(_localctx, 30, USEParser::RuleInvariant);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(387);
    match(USEParser::T__15);
    setState(397);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      setState(388);
      match(USEParser::ID);
      setState(393);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(389);
        match(USEParser::COMMA);
        setState(390);
        match(USEParser::ID);
        setState(395);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(396);
      match(USEParser::COLON);
      break;
    }

    default:
      break;
    }
    setState(399);
    simpleType();
    setState(403);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::T__16 || _la == USEParser::EXISTENTIAL) {
      setState(400);
      invariantClause();
      setState(405);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InvariantClauseContext ------------------------------------------------------------------

USEParser::InvariantClauseContext::InvariantClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::InvariantClauseContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::InvariantClauseContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::InvariantClauseContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::InvariantClauseContext::EXISTENTIAL() {
  return getToken(USEParser::EXISTENTIAL, 0);
}


size_t USEParser::InvariantClauseContext::getRuleIndex() const {
  return USEParser::RuleInvariantClause;
}


std::any USEParser::InvariantClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInvariantClause(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InvariantClauseContext* USEParser::invariantClause() {
  InvariantClauseContext *_localctx = _tracker.createInstance<InvariantClauseContext>(_ctx, getState());
  enterRule(_localctx, 32, USEParser::RuleInvariantClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(419);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__16: {
        enterOuterAlt(_localctx, 1);
        setState(406);
        match(USEParser::T__16);
        setState(408);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(407);
          match(USEParser::ID);
        }
        setState(410);
        match(USEParser::COLON);
        setState(411);
        expression();
        break;
      }

      case USEParser::EXISTENTIAL: {
        enterOuterAlt(_localctx, 2);
        setState(412);
        match(USEParser::EXISTENTIAL);
        setState(413);
        match(USEParser::T__16);
        setState(415);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(414);
          match(USEParser::ID);
        }
        setState(417);
        match(USEParser::COLON);
        setState(418);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrePostContext ------------------------------------------------------------------

USEParser::PrePostContext::PrePostContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::PrePostContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::PrePostContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::PrePostContext::COLON_COLON() {
  return getToken(USEParser::COLON_COLON, 0);
}

USEParser::ParamListContext* USEParser::PrePostContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}

tree::TerminalNode* USEParser::PrePostContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::PrePostContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

std::vector<USEParser::PrePostClauseContext *> USEParser::PrePostContext::prePostClause() {
  return getRuleContexts<USEParser::PrePostClauseContext>();
}

USEParser::PrePostClauseContext* USEParser::PrePostContext::prePostClause(size_t i) {
  return getRuleContext<USEParser::PrePostClauseContext>(i);
}


size_t USEParser::PrePostContext::getRuleIndex() const {
  return USEParser::RulePrePost;
}


std::any USEParser::PrePostContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPrePost(this);
  else
    return visitor->visitChildren(this);
}

USEParser::PrePostContext* USEParser::prePost() {
  PrePostContext *_localctx = _tracker.createInstance<PrePostContext>(_ctx, getState());
  enterRule(_localctx, 34, USEParser::RulePrePost);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(421);
    match(USEParser::T__15);
    setState(422);
    match(USEParser::ID);
    setState(423);
    match(USEParser::COLON_COLON);
    setState(424);
    match(USEParser::ID);
    setState(425);
    paramList();
    setState(428);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(426);
      match(USEParser::COLON);
      setState(427);
      type();
    }
    setState(431); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(430);
      prePostClause();
      setState(433); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::T__17

    || _la == USEParser::T__18);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrePostClauseContext ------------------------------------------------------------------

USEParser::PrePostClauseContext::PrePostClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PrePostClauseContext::getRuleIndex() const {
  return USEParser::RulePrePostClause;
}

void USEParser::PrePostClauseContext::copyFrom(PrePostClauseContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PreConditionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PreConditionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::PreConditionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::PreConditionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::PreConditionContext::PreConditionContext(PrePostClauseContext *ctx) { copyFrom(ctx); }


std::any USEParser::PreConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPreCondition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PostConditionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PostConditionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::ExpressionContext* USEParser::PostConditionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::PostConditionContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::PostConditionContext::PostConditionContext(PrePostClauseContext *ctx) { copyFrom(ctx); }


std::any USEParser::PostConditionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPostCondition(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PrePostClauseContext* USEParser::prePostClause() {
  PrePostClauseContext *_localctx = _tracker.createInstance<PrePostClauseContext>(_ctx, getState());
  enterRule(_localctx, 36, USEParser::RulePrePostClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(447);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__17: {
        _localctx = _tracker.createInstance<USEParser::PreConditionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(435);
        match(USEParser::T__17);
        setState(437);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(436);
          match(USEParser::ID);
        }
        setState(439);
        match(USEParser::COLON);
        setState(440);
        expression();
        break;
      }

      case USEParser::T__18: {
        _localctx = _tracker.createInstance<USEParser::PostConditionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(441);
        match(USEParser::T__18);
        setState(443);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == USEParser::ID) {
          setState(442);
          match(USEParser::ID);
        }
        setState(445);
        match(USEParser::COLON);
        setState(446);
        expression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateMachineContext ------------------------------------------------------------------

USEParser::StateMachineContext::StateMachineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::StateMachineContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<USEParser::StateDefinitionContext *> USEParser::StateMachineContext::stateDefinition() {
  return getRuleContexts<USEParser::StateDefinitionContext>();
}

USEParser::StateDefinitionContext* USEParser::StateMachineContext::stateDefinition(size_t i) {
  return getRuleContext<USEParser::StateDefinitionContext>(i);
}

std::vector<USEParser::TransitionDefinitionContext *> USEParser::StateMachineContext::transitionDefinition() {
  return getRuleContexts<USEParser::TransitionDefinitionContext>();
}

USEParser::TransitionDefinitionContext* USEParser::StateMachineContext::transitionDefinition(size_t i) {
  return getRuleContext<USEParser::TransitionDefinitionContext>(i);
}


size_t USEParser::StateMachineContext::getRuleIndex() const {
  return USEParser::RuleStateMachine;
}


std::any USEParser::StateMachineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitStateMachine(this);
  else
    return visitor->visitChildren(this);
}

USEParser::StateMachineContext* USEParser::stateMachine() {
  StateMachineContext *_localctx = _tracker.createInstance<StateMachineContext>(_ctx, getState());
  enterRule(_localctx, 38, USEParser::RuleStateMachine);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(449);
    match(USEParser::T__19);
    setState(450);
    match(USEParser::ID);
    setState(451);
    match(USEParser::T__20);
    setState(453); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(452);
      stateDefinition();
      setState(455); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::ID);
    setState(457);
    match(USEParser::T__21);
    setState(459); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(458);
      transitionDefinition();
      setState(461); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == USEParser::ID);
    setState(463);
    match(USEParser::T__7);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StateDefinitionContext ------------------------------------------------------------------

USEParser::StateDefinitionContext::StateDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::StateDefinitionContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::StateDefinitionContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::StateDefinitionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::StateDefinitionContext::LBRACK() {
  return getToken(USEParser::LBRACK, 0);
}

USEParser::ExpressionContext* USEParser::StateDefinitionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::StateDefinitionContext::RBRACK() {
  return getToken(USEParser::RBRACK, 0);
}


size_t USEParser::StateDefinitionContext::getRuleIndex() const {
  return USEParser::RuleStateDefinition;
}


std::any USEParser::StateDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitStateDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::StateDefinitionContext* USEParser::stateDefinition() {
  StateDefinitionContext *_localctx = _tracker.createInstance<StateDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 40, USEParser::RuleStateDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(465);
    match(USEParser::ID);
    setState(468);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(466);
      match(USEParser::COLON);
      setState(467);
      match(USEParser::ID);
    }
    setState(474);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LBRACK) {
      setState(470);
      match(USEParser::LBRACK);
      setState(471);
      expression();
      setState(472);
      match(USEParser::RBRACK);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransitionDefinitionContext ------------------------------------------------------------------

USEParser::TransitionDefinitionContext::TransitionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::ARROW() {
  return getToken(USEParser::ARROW, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::LBRACK() {
  return getTokens(USEParser::LBRACK);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::LBRACK(size_t i) {
  return getToken(USEParser::LBRACK, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::TransitionDefinitionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::TransitionDefinitionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::TransitionDefinitionContext::RBRACK() {
  return getTokens(USEParser::RBRACK);
}

tree::TerminalNode* USEParser::TransitionDefinitionContext::RBRACK(size_t i) {
  return getToken(USEParser::RBRACK, i);
}

USEParser::ParamListContext* USEParser::TransitionDefinitionContext::paramList() {
  return getRuleContext<USEParser::ParamListContext>(0);
}


size_t USEParser::TransitionDefinitionContext::getRuleIndex() const {
  return USEParser::RuleTransitionDefinition;
}


std::any USEParser::TransitionDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTransitionDefinition(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TransitionDefinitionContext* USEParser::transitionDefinition() {
  TransitionDefinitionContext *_localctx = _tracker.createInstance<TransitionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 42, USEParser::RuleTransitionDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(476);
    match(USEParser::ID);
    setState(477);
    match(USEParser::ARROW);
    setState(478);
    match(USEParser::ID);
    setState(500);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::LBRACE) {
      setState(479);
      match(USEParser::LBRACE);
      setState(484);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LBRACK) {
        setState(480);
        match(USEParser::LBRACK);
        setState(481);
        expression();
        setState(482);
        match(USEParser::RBRACK);
      }

      setState(486);
      match(USEParser::ID);
      setState(487);
      match(USEParser::LPAREN);
      setState(489);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LPAREN) {
        setState(488);
        paramList();
      }
      setState(491);
      match(USEParser::RPAREN);
      setState(497);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::LBRACK) {
        setState(493);
        match(USEParser::LBRACK);
        setState(494);
        expression();
        setState(495);
        match(USEParser::RBRACK);
      }
      setState(499);
      match(USEParser::RBRACE);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionOnlyContext ------------------------------------------------------------------

USEParser::ExpressionOnlyContext::ExpressionOnlyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::ExpressionOnlyContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ExpressionOnlyContext::EOF() {
  return getToken(USEParser::EOF, 0);
}


size_t USEParser::ExpressionOnlyContext::getRuleIndex() const {
  return USEParser::RuleExpressionOnly;
}


std::any USEParser::ExpressionOnlyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitExpressionOnly(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ExpressionOnlyContext* USEParser::expressionOnly() {
  ExpressionOnlyContext *_localctx = _tracker.createInstance<ExpressionOnlyContext>(_ctx, getState());
  enterRule(_localctx, 44, USEParser::RuleExpressionOnly);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(502);
    expression();
    setState(503);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OclExpressionContext ------------------------------------------------------------------

USEParser::OclExpressionContext::OclExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::ExpressionContext* USEParser::OclExpressionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::OclExpressionContext::getRuleIndex() const {
  return USEParser::RuleOclExpression;
}


std::any USEParser::OclExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::OclExpressionContext* USEParser::oclExpression() {
  OclExpressionContext *_localctx = _tracker.createInstance<OclExpressionContext>(_ctx, getState());
  enterRule(_localctx, 46, USEParser::RuleOclExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(505);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

USEParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::ExpressionContext::getRuleIndex() const {
  return USEParser::RuleExpression;
}

void USEParser::ExpressionContext::copyFrom(ExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LetExprContext ------------------------------------------------------------------

USEParser::LetExpressionContext* USEParser::LetExprContext::letExpression() {
  return getRuleContext<USEParser::LetExpressionContext>(0);
}

USEParser::LetExprContext::LetExprContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LetExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLetExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LambdaExprContext ------------------------------------------------------------------

USEParser::LambdaExpressionContext* USEParser::LambdaExprContext::lambdaExpression() {
  return getRuleContext<USEParser::LambdaExpressionContext>(0);
}

USEParser::LambdaExprContext::LambdaExprContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LambdaExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLambdaExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConditionalExprContext ------------------------------------------------------------------

USEParser::ConditionalExpressionContext* USEParser::ConditionalExprContext::conditionalExpression() {
  return getRuleContext<USEParser::ConditionalExpressionContext>(0);
}

USEParser::ConditionalExprContext::ConditionalExprContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ConditionalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConditionalExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LogicalExprContext ------------------------------------------------------------------

USEParser::LogicalExpressionContext* USEParser::LogicalExprContext::logicalExpression() {
  return getRuleContext<USEParser::LogicalExpressionContext>(0);
}

USEParser::LogicalExprContext::LogicalExprContext(ExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LogicalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLogicalExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::ExpressionContext* USEParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 48, USEParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(511);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__32:
      case USEParser::T__35:
      case USEParser::T__36:
      case USEParser::T__37:
      case USEParser::T__38:
      case USEParser::T__39:
      case USEParser::T__40:
      case USEParser::T__41:
      case USEParser::T__42:
      case USEParser::T__43:
      case USEParser::T__44:
      case USEParser::T__45:
      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48:
      case USEParser::T__53:
      case USEParser::T__54:
      case USEParser::T__55:
      case USEParser::T__56:
      case USEParser::T__57:
      case USEParser::T__58:
      case USEParser::T__59:
      case USEParser::T__60:
      case USEParser::T__61:
      case USEParser::T__62:
      case USEParser::T__63:
      case USEParser::T__64:
      case USEParser::AT:
      case USEParser::HASH:
      case USEParser::LPAREN:
      case USEParser::MINUS:
      case USEParser::PLUS:
      case USEParser::STAR:
      case USEParser::INT:
      case USEParser::REAL:
      case USEParser::STRING:
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::LogicalExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(507);
        logicalExpression(0);
        break;
      }

      case USEParser::T__49: {
        _localctx = _tracker.createInstance<USEParser::ConditionalExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(508);
        conditionalExpression();
        break;
      }

      case USEParser::T__22: {
        _localctx = _tracker.createInstance<USEParser::LambdaExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(509);
        lambdaExpression();
        break;
      }

      case USEParser::T__24: {
        _localctx = _tracker.createInstance<USEParser::LetExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(510);
        letExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

USEParser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::LambdaExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::LambdaExpressionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::LambdaExpressionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

USEParser::ExpressionContext* USEParser::LambdaExpressionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::LambdaExpressionContext::getRuleIndex() const {
  return USEParser::RuleLambdaExpression;
}


std::any USEParser::LambdaExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLambdaExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::LambdaExpressionContext* USEParser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 50, USEParser::RuleLambdaExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(513);
    match(USEParser::T__22);
    setState(514);
    match(USEParser::ID);
    setState(515);
    match(USEParser::COLON);
    setState(516);
    type();
    setState(517);
    match(USEParser::T__23);
    setState(518);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LetExpressionContext ------------------------------------------------------------------

USEParser::LetExpressionContext::LetExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::LetExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::LetExpressionContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

std::vector<USEParser::ExpressionContext *> USEParser::LetExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::LetExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

tree::TerminalNode* USEParser::LetExpressionContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::LetExpressionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::LetExpressionContext::getRuleIndex() const {
  return USEParser::RuleLetExpression;
}


std::any USEParser::LetExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLetExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::LetExpressionContext* USEParser::letExpression() {
  LetExpressionContext *_localctx = _tracker.createInstance<LetExpressionContext>(_ctx, getState());
  enterRule(_localctx, 52, USEParser::RuleLetExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(520);
    match(USEParser::T__24);
    setState(521);
    match(USEParser::ID);
    setState(524);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(522);
      match(USEParser::COLON);
      setState(523);
      type();
    }
    setState(526);
    match(USEParser::EQUAL);
    setState(527);
    expression();
    setState(528);
    match(USEParser::T__23);
    setState(529);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalExpressionContext ------------------------------------------------------------------

USEParser::LogicalExpressionContext::LogicalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::LogicalExpressionContext::getRuleIndex() const {
  return USEParser::RuleLogicalExpression;
}

void USEParser::LogicalExpressionContext::copyFrom(LogicalExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AndExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::AndExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::AndExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::AndExprContext::AndExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AndExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAndExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- EqualityExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::EqualityExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

USEParser::EqualityExprContext::EqualityExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::EqualityExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEqualityExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- XorExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::XorExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::XorExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::XorExprContext::XorExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::XorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitXorExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ImpliesExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::ImpliesExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::ImpliesExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::ImpliesExprContext::ImpliesExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ImpliesExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitImpliesExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OrExprContext ------------------------------------------------------------------

std::vector<USEParser::LogicalExpressionContext *> USEParser::OrExprContext::logicalExpression() {
  return getRuleContexts<USEParser::LogicalExpressionContext>();
}

USEParser::LogicalExpressionContext* USEParser::OrExprContext::logicalExpression(size_t i) {
  return getRuleContext<USEParser::LogicalExpressionContext>(i);
}

USEParser::OrExprContext::OrExprContext(LogicalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::OrExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOrExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::LogicalExpressionContext* USEParser::logicalExpression() {
   return logicalExpression(0);
}

USEParser::LogicalExpressionContext* USEParser::logicalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::LogicalExpressionContext *_localctx = _tracker.createInstance<LogicalExpressionContext>(_ctx, parentState);
  USEParser::LogicalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 54;
  enterRecursionRule(_localctx, 54, USEParser::RuleLogicalExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<EqualityExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(532);
    equalityExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(554);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(552);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<AndExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(534);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(535);
          match(USEParser::T__25);
          setState(536);
          logicalExpression(8);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<AndExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(537);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(538);
          match(USEParser::T__26);
          setState(539);
          logicalExpression(7);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<OrExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(540);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(541);
          match(USEParser::T__27);
          setState(542);
          logicalExpression(6);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<XorExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(543);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(544);
          match(USEParser::T__28);
          setState(545);
          logicalExpression(5);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ImpliesExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(546);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(547);
          match(USEParser::T__29);
          setState(548);
          logicalExpression(4);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ImpliesExprContext>(_tracker.createInstance<LogicalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleLogicalExpression);
          setState(549);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(550);
          match(USEParser::T__30);
          setState(551);
          logicalExpression(3);
          break;
        }

        default:
          break;
        } 
      }
      setState(556);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParamListContext ------------------------------------------------------------------

USEParser::ParamListContext::ParamListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ParamListContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::ParamListContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<USEParser::VariableDeclarationContext *> USEParser::ParamListContext::variableDeclaration() {
  return getRuleContexts<USEParser::VariableDeclarationContext>();
}

USEParser::VariableDeclarationContext* USEParser::ParamListContext::variableDeclaration(size_t i) {
  return getRuleContext<USEParser::VariableDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::ParamListContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::ParamListContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::ParamListContext::getRuleIndex() const {
  return USEParser::RuleParamList;
}


std::any USEParser::ParamListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitParamList(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ParamListContext* USEParser::paramList() {
  ParamListContext *_localctx = _tracker.createInstance<ParamListContext>(_ctx, getState());
  enterRule(_localctx, 56, USEParser::RuleParamList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    match(USEParser::LPAREN);
    setState(566);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::ID) {
      setState(558);
      variableDeclaration();
      setState(563);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(559);
        match(USEParser::COMMA);
        setState(560);
        variableDeclaration();
        setState(565);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(568);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdListContext ------------------------------------------------------------------

USEParser::IdListContext::IdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::IdListContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::IdListContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

std::vector<tree::TerminalNode *> USEParser::IdListContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::IdListContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::IdListContext::getRuleIndex() const {
  return USEParser::RuleIdList;
}


std::any USEParser::IdListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIdList(this);
  else
    return visitor->visitChildren(this);
}

USEParser::IdListContext* USEParser::idList() {
  IdListContext *_localctx = _tracker.createInstance<IdListContext>(_ctx, getState());
  enterRule(_localctx, 58, USEParser::RuleIdList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(570);
    match(USEParser::ID);
    setState(575);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(571);
      match(USEParser::COMMA);
      setState(572);
      match(USEParser::ID);
      setState(577);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableDeclarationContext ------------------------------------------------------------------

USEParser::VariableDeclarationContext::VariableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::VariableDeclarationContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::VariableDeclarationContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::VariableDeclarationContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::VariableDeclarationContext::getRuleIndex() const {
  return USEParser::RuleVariableDeclaration;
}


std::any USEParser::VariableDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitVariableDeclaration(this);
  else
    return visitor->visitChildren(this);
}

USEParser::VariableDeclarationContext* USEParser::variableDeclaration() {
  VariableDeclarationContext *_localctx = _tracker.createInstance<VariableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 60, USEParser::RuleVariableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(578);
    match(USEParser::ID);
    setState(579);
    match(USEParser::COLON);
    setState(580);
    type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::EqualityExpressionContext::getRuleIndex() const {
  return USEParser::RuleEqualityExpression;
}

void USEParser::EqualityExpressionContext::copyFrom(EqualityExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EqualExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::EqualExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

tree::TerminalNode* USEParser::EqualExprContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::RelationalExpressionContext* USEParser::EqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::EqualExprContext::EqualExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::EqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEqualExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RelationalExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::RelationalExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::RelationalExprContext::RelationalExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::RelationalExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRelationalExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotEqualExprContext ------------------------------------------------------------------

USEParser::EqualityExpressionContext* USEParser::NotEqualExprContext::equalityExpression() {
  return getRuleContext<USEParser::EqualityExpressionContext>(0);
}

tree::TerminalNode* USEParser::NotEqualExprContext::NOT_EQUAL() {
  return getToken(USEParser::NOT_EQUAL, 0);
}

USEParser::RelationalExpressionContext* USEParser::NotEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

USEParser::NotEqualExprContext::NotEqualExprContext(EqualityExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::NotEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitNotEqualExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EqualityExpressionContext* USEParser::equalityExpression() {
   return equalityExpression(0);
}

USEParser::EqualityExpressionContext* USEParser::equalityExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, parentState);
  USEParser::EqualityExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 62;
  enterRecursionRule(_localctx, 62, USEParser::RuleEqualityExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<RelationalExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(583);
    relationalExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(593);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(591);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<EqualExprContext>(_tracker.createInstance<EqualityExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleEqualityExpression);
          setState(585);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(586);
          match(USEParser::EQUAL);
          setState(587);
          relationalExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<NotEqualExprContext>(_tracker.createInstance<EqualityExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleEqualityExpression);
          setState(588);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(589);
          match(USEParser::NOT_EQUAL);
          setState(590);
          relationalExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(595);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::RelationalExpressionContext::getRuleIndex() const {
  return USEParser::RuleRelationalExpression;
}

void USEParser::RelationalExpressionContext::copyFrom(RelationalExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LessThanOrEqualExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::LessThanOrEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::LessThanOrEqualExprContext::LESS_EQUAL() {
  return getToken(USEParser::LESS_EQUAL, 0);
}

USEParser::AdditiveExpressionContext* USEParser::LessThanOrEqualExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::LessThanOrEqualExprContext::LessThanOrEqualExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LessThanOrEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLessThanOrEqualExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GreaterThanExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::GreaterThanExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::GreaterThanExprContext::GREATER() {
  return getToken(USEParser::GREATER, 0);
}

USEParser::AdditiveExpressionContext* USEParser::GreaterThanExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::GreaterThanExprContext::GreaterThanExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::GreaterThanExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitGreaterThanExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AdditiveExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::AdditiveExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::AdditiveExprContext::AdditiveExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AdditiveExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAdditiveExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LessThanExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::LessThanExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::LessThanExprContext::LESS() {
  return getToken(USEParser::LESS, 0);
}

USEParser::AdditiveExpressionContext* USEParser::LessThanExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::LessThanExprContext::LessThanExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LessThanExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLessThanExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GreaterThanOrEqualExprContext ------------------------------------------------------------------

USEParser::RelationalExpressionContext* USEParser::GreaterThanOrEqualExprContext::relationalExpression() {
  return getRuleContext<USEParser::RelationalExpressionContext>(0);
}

tree::TerminalNode* USEParser::GreaterThanOrEqualExprContext::GREATER_EQUAL() {
  return getToken(USEParser::GREATER_EQUAL, 0);
}

USEParser::AdditiveExpressionContext* USEParser::GreaterThanOrEqualExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

USEParser::GreaterThanOrEqualExprContext::GreaterThanOrEqualExprContext(RelationalExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::GreaterThanOrEqualExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitGreaterThanOrEqualExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::RelationalExpressionContext* USEParser::relationalExpression() {
   return relationalExpression(0);
}

USEParser::RelationalExpressionContext* USEParser::relationalExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, parentState);
  USEParser::RelationalExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 64;
  enterRecursionRule(_localctx, 64, USEParser::RuleRelationalExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<AdditiveExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(597);
    additiveExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(613);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(611);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 73, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<LessThanExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(599);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(600);
          match(USEParser::LESS);
          setState(601);
          additiveExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<GreaterThanExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(602);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(603);
          match(USEParser::GREATER);
          setState(604);
          additiveExpression(0);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<LessThanOrEqualExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(605);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(606);
          match(USEParser::LESS_EQUAL);
          setState(607);
          additiveExpression(0);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<GreaterThanOrEqualExprContext>(_tracker.createInstance<RelationalExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleRelationalExpression);
          setState(608);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(609);
          match(USEParser::GREATER_EQUAL);
          setState(610);
          additiveExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(615);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::AdditiveExpressionContext::getRuleIndex() const {
  return USEParser::RuleAdditiveExpression;
}

void USEParser::AdditiveExpressionContext::copyFrom(AdditiveExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- AdditionExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::AdditionExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* USEParser::AdditionExprContext::PLUS() {
  return getToken(USEParser::PLUS, 0);
}

USEParser::FactorExpressionContext* USEParser::AdditionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::AdditionExprContext::AdditionExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AdditionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAdditionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubtractionExprContext ------------------------------------------------------------------

USEParser::AdditiveExpressionContext* USEParser::SubtractionExprContext::additiveExpression() {
  return getRuleContext<USEParser::AdditiveExpressionContext>(0);
}

tree::TerminalNode* USEParser::SubtractionExprContext::MINUS() {
  return getToken(USEParser::MINUS, 0);
}

USEParser::FactorExpressionContext* USEParser::SubtractionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::SubtractionExprContext::SubtractionExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SubtractionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSubtractionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FactorExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::FactorExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::FactorExprContext::FactorExprContext(AdditiveExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::FactorExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitFactorExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::AdditiveExpressionContext* USEParser::additiveExpression() {
   return additiveExpression(0);
}

USEParser::AdditiveExpressionContext* USEParser::additiveExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, parentState);
  USEParser::AdditiveExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 66;
  enterRecursionRule(_localctx, 66, USEParser::RuleAdditiveExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<FactorExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(617);
    factorExpression(0);
    _ctx->stop = _input->LT(-1);
    setState(627);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(625);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<AdditionExprContext>(_tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleAdditiveExpression);
          setState(619);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(620);
          match(USEParser::PLUS);
          setState(621);
          factorExpression(0);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<SubtractionExprContext>(_tracker.createInstance<AdditiveExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleAdditiveExpression);
          setState(622);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(623);
          match(USEParser::MINUS);
          setState(624);
          factorExpression(0);
          break;
        }

        default:
          break;
        } 
      }
      setState(629);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FactorExpressionContext ------------------------------------------------------------------

USEParser::FactorExpressionContext::FactorExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::FactorExpressionContext::getRuleIndex() const {
  return USEParser::RuleFactorExpression;
}

void USEParser::FactorExpressionContext::copyFrom(FactorExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DivisionExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::DivisionExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

USEParser::UnaryExpressionContext* USEParser::DivisionExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* USEParser::DivisionExprContext::SLASH() {
  return getToken(USEParser::SLASH, 0);
}

USEParser::DivisionExprContext::DivisionExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::DivisionExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitDivisionExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MultiplicationExprContext ------------------------------------------------------------------

USEParser::FactorExpressionContext* USEParser::MultiplicationExprContext::factorExpression() {
  return getRuleContext<USEParser::FactorExpressionContext>(0);
}

tree::TerminalNode* USEParser::MultiplicationExprContext::STAR() {
  return getToken(USEParser::STAR, 0);
}

USEParser::UnaryExpressionContext* USEParser::MultiplicationExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::MultiplicationExprContext::MultiplicationExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::MultiplicationExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMultiplicationExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnaryExprContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext* USEParser::UnaryExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::UnaryExprContext::UnaryExprContext(FactorExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::UnaryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUnaryExpr(this);
  else
    return visitor->visitChildren(this);
}

USEParser::FactorExpressionContext* USEParser::factorExpression() {
   return factorExpression(0);
}

USEParser::FactorExpressionContext* USEParser::factorExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  USEParser::FactorExpressionContext *_localctx = _tracker.createInstance<FactorExpressionContext>(_ctx, parentState);
  USEParser::FactorExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 68;
  enterRecursionRule(_localctx, 68, USEParser::RuleFactorExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<UnaryExprContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(631);
    unaryExpression();
    _ctx->stop = _input->LT(-1);
    setState(641);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(639);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<MultiplicationExprContext>(_tracker.createInstance<FactorExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleFactorExpression);
          setState(633);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(634);
          match(USEParser::STAR);
          setState(635);
          unaryExpression();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<DivisionExprContext>(_tracker.createInstance<FactorExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleFactorExpression);
          setState(636);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(637);
          _la = _input->LA(1);
          if (!(_la == USEParser::T__31 || _la == USEParser::SLASH)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(638);
          unaryExpression();
          break;
        }

        default:
          break;
        } 
      }
      setState(643);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::UnaryExpressionContext::getRuleIndex() const {
  return USEParser::RuleUnaryExpression;
}

void USEParser::UnaryExpressionContext::copyFrom(UnaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PostfixExprContext ------------------------------------------------------------------

USEParser::PostfixExpressionContext* USEParser::PostfixExprContext::postfixExpression() {
  return getRuleContext<USEParser::PostfixExpressionContext>(0);
}

USEParser::PostfixExprContext::PostfixExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PostfixExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPostfixExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PlusExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::PlusExprContext::PLUS() {
  return getToken(USEParser::PLUS, 0);
}

USEParser::UnaryExpressionContext* USEParser::PlusExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::PlusExprContext::PlusExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PlusExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPlusExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotExprContext ------------------------------------------------------------------

USEParser::UnaryExpressionContext* USEParser::NotExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::NotExprContext::NotExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::NotExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitNotExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MinusExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::MinusExprContext::MINUS() {
  return getToken(USEParser::MINUS, 0);
}

USEParser::UnaryExpressionContext* USEParser::MinusExprContext::unaryExpression() {
  return getRuleContext<USEParser::UnaryExpressionContext>(0);
}

USEParser::MinusExprContext::MinusExprContext(UnaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::MinusExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitMinusExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::UnaryExpressionContext* USEParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 70, USEParser::RuleUnaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(651);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__32: {
        _localctx = _tracker.createInstance<USEParser::NotExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(644);
        match(USEParser::T__32);
        setState(645);
        unaryExpression();
        break;
      }

      case USEParser::MINUS: {
        _localctx = _tracker.createInstance<USEParser::MinusExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(646);
        match(USEParser::MINUS);
        setState(647);
        unaryExpression();
        break;
      }

      case USEParser::PLUS: {
        _localctx = _tracker.createInstance<USEParser::PlusExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(648);
        match(USEParser::PLUS);
        setState(649);
        unaryExpression();
        break;
      }

      case USEParser::T__35:
      case USEParser::T__36:
      case USEParser::T__37:
      case USEParser::T__38:
      case USEParser::T__39:
      case USEParser::T__40:
      case USEParser::T__41:
      case USEParser::T__42:
      case USEParser::T__43:
      case USEParser::T__44:
      case USEParser::T__45:
      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48:
      case USEParser::T__53:
      case USEParser::T__54:
      case USEParser::T__55:
      case USEParser::T__56:
      case USEParser::T__57:
      case USEParser::T__58:
      case USEParser::T__59:
      case USEParser::T__60:
      case USEParser::T__61:
      case USEParser::T__62:
      case USEParser::T__63:
      case USEParser::T__64:
      case USEParser::AT:
      case USEParser::HASH:
      case USEParser::LPAREN:
      case USEParser::STAR:
      case USEParser::INT:
      case USEParser::REAL:
      case USEParser::STRING:
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::PostfixExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(650);
        postfixExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

USEParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PostfixExpressionContext::getRuleIndex() const {
  return USEParser::RulePostfixExpression;
}

void USEParser::PostfixExpressionContext::copyFrom(PostfixExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PropertyCallExprContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext* USEParser::PropertyCallExprContext::primaryExpression() {
  return getRuleContext<USEParser::PrimaryExpressionContext>(0);
}

std::vector<USEParser::PropertyCallContext *> USEParser::PropertyCallExprContext::propertyCall() {
  return getRuleContexts<USEParser::PropertyCallContext>();
}

USEParser::PropertyCallContext* USEParser::PropertyCallExprContext::propertyCall(size_t i) {
  return getRuleContext<USEParser::PropertyCallContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::PropertyCallExprContext::DOT() {
  return getTokens(USEParser::DOT);
}

tree::TerminalNode* USEParser::PropertyCallExprContext::DOT(size_t i) {
  return getToken(USEParser::DOT, i);
}

std::vector<tree::TerminalNode *> USEParser::PropertyCallExprContext::ARROW() {
  return getTokens(USEParser::ARROW);
}

tree::TerminalNode* USEParser::PropertyCallExprContext::ARROW(size_t i) {
  return getToken(USEParser::ARROW, i);
}

USEParser::PropertyCallExprContext::PropertyCallExprContext(PostfixExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PropertyCallExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPropertyCallExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimaryExprContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext* USEParser::PrimaryExprContext::primaryExpression() {
  return getRuleContext<USEParser::PrimaryExpressionContext>(0);
}

USEParser::PrimaryExprContext::PrimaryExprContext(PostfixExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::PrimaryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitPrimaryExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PostfixExpressionContext* USEParser::postfixExpression() {
  PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, USEParser::RulePostfixExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(661);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::PrimaryExprContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(653);
      primaryExpression();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::PropertyCallExprContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(654);
      primaryExpression();
      setState(657); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(655);
                _la = _input->LA(1);
                if (!(_la == USEParser::ARROW

                || _la == USEParser::DOT)) {
                _errHandler->recoverInline(this);
                }
                else {
                  _errHandler->reportMatch(this);
                  consume();
                }
                setState(656);
                propertyCall();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(659); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

USEParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PrimaryExpressionContext::getRuleIndex() const {
  return USEParser::RulePrimaryExpression;
}

void USEParser::PrimaryExpressionContext::copyFrom(PrimaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- EmptyPropertyCallExprContext ------------------------------------------------------------------

USEParser::PropertyCallContext* USEParser::EmptyPropertyCallExprContext::propertyCall() {
  return getRuleContext<USEParser::PropertyCallContext>(0);
}

USEParser::EmptyPropertyCallExprContext::EmptyPropertyCallExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::EmptyPropertyCallExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEmptyPropertyCallExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ByUseIdExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ByUseIdExprContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::DOT() {
  return getToken(USEParser::DOT, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ByUseIdExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

tree::TerminalNode* USEParser::ByUseIdExprContext::AT() {
  return getToken(USEParser::AT, 0);
}

USEParser::ByUseIdExprContext::ByUseIdExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ByUseIdExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitByUseIdExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralExprContext ------------------------------------------------------------------

USEParser::LiteralContext* USEParser::LiteralExprContext::literal() {
  return getRuleContext<USEParser::LiteralContext>(0);
}

USEParser::LiteralExprContext::LiteralExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ParenthesizedExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ParenthesizedExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ParenthesizedExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ParenthesizedExprContext::ParenthesizedExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ParenthesizedExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitParenthesizedExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AllInstancesExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::AllInstancesExprContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::DOT() {
  return getToken(USEParser::DOT, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::AllInstancesExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::AllInstancesExprContext::AllInstancesExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::AllInstancesExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitAllInstancesExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ObjectReferenceExprContext ------------------------------------------------------------------

USEParser::ObjectReferenceContext* USEParser::ObjectReferenceExprContext::objectReference() {
  return getRuleContext<USEParser::ObjectReferenceContext>(0);
}

USEParser::ObjectReferenceExprContext::ObjectReferenceExprContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ObjectReferenceExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitObjectReferenceExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PrimaryExpressionContext* USEParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 74, USEParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(691);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::LiteralExprContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(663);
      literal();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::ObjectReferenceExprContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(664);
      objectReference();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::EmptyPropertyCallExprContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(665);
      propertyCall();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::ParenthesizedExprContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(666);
      match(USEParser::LPAREN);
      setState(667);
      expression();
      setState(668);
      match(USEParser::RPAREN);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::AllInstancesExprContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(670);
      match(USEParser::ID);
      setState(671);
      match(USEParser::DOT);
      setState(672);
      match(USEParser::T__33);
      setState(675);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
      case 1: {
        setState(673);
        match(USEParser::AT);
        setState(674);
        match(USEParser::T__17);
        break;
      }

      default:
        break;
      }
      setState(679);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
      case 1: {
        setState(677);
        match(USEParser::LPAREN);
        setState(678);
        match(USEParser::RPAREN);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<USEParser::ByUseIdExprContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(681);
      match(USEParser::ID);
      setState(682);
      match(USEParser::DOT);
      setState(683);
      match(USEParser::T__34);
      setState(684);
      match(USEParser::LPAREN);
      setState(685);
      expression();
      setState(686);
      match(USEParser::RPAREN);
      setState(689);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
      case 1: {
        setState(687);
        match(USEParser::AT);
        setState(688);
        match(USEParser::T__17);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ObjectReferenceContext ------------------------------------------------------------------

USEParser::ObjectReferenceContext::ObjectReferenceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::ObjectReferenceContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::ObjectReferenceContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::ObjectReferenceContext::getRuleIndex() const {
  return USEParser::RuleObjectReference;
}


std::any USEParser::ObjectReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitObjectReference(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ObjectReferenceContext* USEParser::objectReference() {
  ObjectReferenceContext *_localctx = _tracker.createInstance<ObjectReferenceContext>(_ctx, getState());
  enterRule(_localctx, 76, USEParser::RuleObjectReference);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(693);
    match(USEParser::AT);
    setState(694);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PropertyCallContext ------------------------------------------------------------------

USEParser::PropertyCallContext::PropertyCallContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::PropertyCallContext::getRuleIndex() const {
  return USEParser::RulePropertyCall;
}

void USEParser::PropertyCallContext::copyFrom(PropertyCallContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QueryExprContext ------------------------------------------------------------------

USEParser::QueryExpressionContext* USEParser::QueryExprContext::queryExpression() {
  return getRuleContext<USEParser::QueryExpressionContext>(0);
}

USEParser::QueryExprContext::QueryExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::QueryExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitQueryExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OperationExprContext ------------------------------------------------------------------

USEParser::OperationExpressionContext* USEParser::OperationExprContext::operationExpression() {
  return getRuleContext<USEParser::OperationExpressionContext>(0);
}

USEParser::OperationExprContext::OperationExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::OperationExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IterateExprContext ------------------------------------------------------------------

USEParser::IterateExpressionContext* USEParser::IterateExprContext::iterateExpression() {
  return getRuleContext<USEParser::IterateExpressionContext>(0);
}

USEParser::IterateExprContext::IterateExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::IterateExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIterateExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeExprContext ------------------------------------------------------------------

USEParser::TypeExpressionContext* USEParser::TypeExprContext::typeExpression() {
  return getRuleContext<USEParser::TypeExpressionContext>(0);
}

USEParser::TypeExprContext::TypeExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InStateExprContext ------------------------------------------------------------------

USEParser::InStateExpressionContext* USEParser::InStateExprContext::inStateExpression() {
  return getRuleContext<USEParser::InStateExpressionContext>(0);
}

USEParser::InStateExprContext::InStateExprContext(PropertyCallContext *ctx) { copyFrom(ctx); }


std::any USEParser::InStateExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInStateExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::PropertyCallContext* USEParser::propertyCall() {
  PropertyCallContext *_localctx = _tracker.createInstance<PropertyCallContext>(_ctx, getState());
  enterRule(_localctx, 78, USEParser::RulePropertyCall);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(701);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__35:
      case USEParser::T__36:
      case USEParser::T__37:
      case USEParser::T__38:
      case USEParser::T__39:
      case USEParser::T__40:
      case USEParser::T__41: {
        _localctx = _tracker.createInstance<USEParser::QueryExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(696);
        queryExpression();
        break;
      }

      case USEParser::T__42: {
        _localctx = _tracker.createInstance<USEParser::IterateExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(697);
        iterateExpression();
        break;
      }

      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::OperationExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(698);
        operationExpression();
        break;
      }

      case USEParser::T__44:
      case USEParser::T__45:
      case USEParser::T__46:
      case USEParser::T__47:
      case USEParser::T__48: {
        _localctx = _tracker.createInstance<USEParser::TypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(699);
        typeExpression();
        break;
      }

      case USEParser::T__43: {
        _localctx = _tracker.createInstance<USEParser::InStateExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(700);
        inStateExpression();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryExpressionContext ------------------------------------------------------------------

USEParser::QueryExpressionContext::QueryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::QueryExpressionContext::getRuleIndex() const {
  return USEParser::RuleQueryExpression;
}

void USEParser::QueryExpressionContext::copyFrom(QueryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- IsUniqueExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::IsUniqueExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::IsUniqueExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::IsUniqueExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::IsUniqueExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::IsUniqueExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::IsUniqueExprContext::IsUniqueExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::IsUniqueExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIsUniqueExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SortedByExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SortedByExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::SortedByExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::SortedByExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::SortedByExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::SortedByExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::SortedByExprContext::SortedByExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SortedByExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSortedByExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::SelectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::SelectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::SelectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::SelectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::SelectExprContext::SelectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SelectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CollectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::CollectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::CollectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::CollectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::CollectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::CollectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::CollectExprContext::CollectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::CollectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitCollectExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ForAllExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ForAllExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ForAllExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ForAllExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::ForAllExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::ForAllExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ForAllExprContext::ForAllExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ForAllExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitForAllExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExistsExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::ExistsExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::ExistsExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::ExistsExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::ExistsExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::ExistsExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ExistsExprContext::ExistsExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::ExistsExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitExistsExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RejectExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::RejectExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ExpressionContext* USEParser::RejectExprContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::RejectExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::RejectExprContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::RejectExprContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::RejectExprContext::RejectExprContext(QueryExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::RejectExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRejectExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::QueryExpressionContext* USEParser::queryExpression() {
  QueryExpressionContext *_localctx = _tracker.createInstance<QueryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, USEParser::RuleQueryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(773);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__35: {
        _localctx = _tracker.createInstance<USEParser::SelectExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(703);
        match(USEParser::T__35);
        setState(704);
        match(USEParser::LPAREN);
        setState(708);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
        case 1: {
          setState(705);
          elemVarsDeclaration();
          setState(706);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(710);
        expression();
        setState(711);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__36: {
        _localctx = _tracker.createInstance<USEParser::RejectExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(713);
        match(USEParser::T__36);
        setState(714);
        match(USEParser::LPAREN);
        setState(718);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
        case 1: {
          setState(715);
          elemVarsDeclaration();
          setState(716);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(720);
        expression();
        setState(721);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__37: {
        _localctx = _tracker.createInstance<USEParser::CollectExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(723);
        match(USEParser::T__37);
        setState(724);
        match(USEParser::LPAREN);
        setState(728);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
        case 1: {
          setState(725);
          elemVarsDeclaration();
          setState(726);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(730);
        expression();
        setState(731);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__38: {
        _localctx = _tracker.createInstance<USEParser::ExistsExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(733);
        match(USEParser::T__38);
        setState(734);
        match(USEParser::LPAREN);
        setState(738);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
        case 1: {
          setState(735);
          elemVarsDeclaration();
          setState(736);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(740);
        expression();
        setState(741);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__39: {
        _localctx = _tracker.createInstance<USEParser::ForAllExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(743);
        match(USEParser::T__39);
        setState(744);
        match(USEParser::LPAREN);
        setState(748);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
        case 1: {
          setState(745);
          elemVarsDeclaration();
          setState(746);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(750);
        expression();
        setState(751);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__40: {
        _localctx = _tracker.createInstance<USEParser::IsUniqueExprContext>(_localctx);
        enterOuterAlt(_localctx, 6);
        setState(753);
        match(USEParser::T__40);
        setState(754);
        match(USEParser::LPAREN);
        setState(758);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
        case 1: {
          setState(755);
          elemVarsDeclaration();
          setState(756);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(760);
        expression();
        setState(761);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__41: {
        _localctx = _tracker.createInstance<USEParser::SortedByExprContext>(_localctx);
        enterOuterAlt(_localctx, 7);
        setState(763);
        match(USEParser::T__41);
        setState(764);
        match(USEParser::LPAREN);
        setState(768);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
        case 1: {
          setState(765);
          elemVarsDeclaration();
          setState(766);
          match(USEParser::BAR);
          break;
        }

        default:
          break;
        }
        setState(770);
        expression();
        setState(771);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterateExpressionContext ------------------------------------------------------------------

USEParser::IterateExpressionContext::IterateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::IterateExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::ElemVarsDeclarationContext* USEParser::IterateExpressionContext::elemVarsDeclaration() {
  return getRuleContext<USEParser::ElemVarsDeclarationContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::SEMI() {
  return getToken(USEParser::SEMI, 0);
}

USEParser::VariableInitializationContext* USEParser::IterateExpressionContext::variableInitialization() {
  return getRuleContext<USEParser::VariableInitializationContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::BAR() {
  return getToken(USEParser::BAR, 0);
}

USEParser::ExpressionContext* USEParser::IterateExpressionContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::IterateExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::IterateExpressionContext::getRuleIndex() const {
  return USEParser::RuleIterateExpression;
}


std::any USEParser::IterateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitIterateExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::IterateExpressionContext* USEParser::iterateExpression() {
  IterateExpressionContext *_localctx = _tracker.createInstance<IterateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, USEParser::RuleIterateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(775);
    match(USEParser::T__42);
    setState(776);
    match(USEParser::LPAREN);
    setState(777);
    elemVarsDeclaration();
    setState(778);
    match(USEParser::SEMI);
    setState(779);
    variableInitialization();
    setState(780);
    match(USEParser::BAR);
    setState(781);
    expression();
    setState(782);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperationExpressionContext ------------------------------------------------------------------

USEParser::OperationExpressionContext::OperationExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::OperationExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::LBRACK() {
  return getTokens(USEParser::LBRACK);
}

tree::TerminalNode* USEParser::OperationExpressionContext::LBRACK(size_t i) {
  return getToken(USEParser::LBRACK, i);
}

std::vector<USEParser::ExpressionContext *> USEParser::OperationExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::OperationExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::RBRACK() {
  return getTokens(USEParser::RBRACK);
}

tree::TerminalNode* USEParser::OperationExpressionContext::RBRACK(size_t i) {
  return getToken(USEParser::RBRACK, i);
}

tree::TerminalNode* USEParser::OperationExpressionContext::AT() {
  return getToken(USEParser::AT, 0);
}

tree::TerminalNode* USEParser::OperationExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::OperationExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::OperationExpressionContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::OperationExpressionContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::OperationExpressionContext::getRuleIndex() const {
  return USEParser::RuleOperationExpression;
}


std::any USEParser::OperationExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOperationExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::OperationExpressionContext* USEParser::operationExpression() {
  OperationExpressionContext *_localctx = _tracker.createInstance<OperationExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, USEParser::RuleOperationExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(784);
    match(USEParser::ID);
    setState(808);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      setState(785);
      match(USEParser::LBRACK);
      setState(786);
      expression();
      setState(791);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == USEParser::COMMA) {
        setState(787);
        match(USEParser::COMMA);
        setState(788);
        expression();
        setState(793);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(794);
      match(USEParser::RBRACK);
      setState(806);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
      case 1: {
        setState(795);
        match(USEParser::LBRACK);
        setState(796);
        expression();
        setState(801);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == USEParser::COMMA) {
          setState(797);
          match(USEParser::COMMA);
          setState(798);
          expression();
          setState(803);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(804);
        match(USEParser::RBRACK);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(812);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(810);
      match(USEParser::AT);
      setState(811);
      match(USEParser::T__17);
      break;
    }

    default:
      break;
    }
    setState(826);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(814);
      match(USEParser::LPAREN);
      setState(823);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -15762658783395840) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & 94575550005763) != 0)) {
        setState(815);
        expression();
        setState(820);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == USEParser::COMMA) {
          setState(816);
          match(USEParser::COMMA);
          setState(817);
          expression();
          setState(822);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(825);
      match(USEParser::RPAREN);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InStateExpressionContext ------------------------------------------------------------------

USEParser::InStateExpressionContext::InStateExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::InStateExpressionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

tree::TerminalNode* USEParser::InStateExpressionContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::InStateExpressionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::InStateExpressionContext::getRuleIndex() const {
  return USEParser::RuleInStateExpression;
}


std::any USEParser::InStateExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitInStateExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::InStateExpressionContext* USEParser::inStateExpression() {
  InStateExpressionContext *_localctx = _tracker.createInstance<InStateExpressionContext>(_ctx, getState());
  enterRule(_localctx, 86, USEParser::RuleInStateExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(828);
    match(USEParser::T__43);
    setState(829);
    match(USEParser::LPAREN);
    setState(830);
    match(USEParser::ID);
    setState(831);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeExpressionContext ------------------------------------------------------------------

USEParser::TypeExpressionContext::TypeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TypeExpressionContext::getRuleIndex() const {
  return USEParser::RuleTypeExpression;
}

void USEParser::TypeExpressionContext::copyFrom(TypeExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- OclIsTypeOfExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclIsTypeOfExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclIsTypeOfExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclIsTypeOfExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclIsTypeOfExprContext::OclIsTypeOfExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::OclIsTypeOfExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclIsTypeOfExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OclIsKindOfExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclIsKindOfExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclIsKindOfExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclIsKindOfExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclIsKindOfExprContext::OclIsKindOfExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::OclIsKindOfExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclIsKindOfExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectByKindExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectByKindExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::SelectByKindExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::SelectByKindExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::SelectByKindExprContext::SelectByKindExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SelectByKindExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectByKindExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectByTypeExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SelectByTypeExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::SelectByTypeExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::SelectByTypeExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::SelectByTypeExprContext::SelectByTypeExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::SelectByTypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSelectByTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OclAsTypeExprContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OclAsTypeExprContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::OclAsTypeExprContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::OclAsTypeExprContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::OclAsTypeExprContext::OclAsTypeExprContext(TypeExpressionContext *ctx) { copyFrom(ctx); }


std::any USEParser::OclAsTypeExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOclAsTypeExpr(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TypeExpressionContext* USEParser::typeExpression() {
  TypeExpressionContext *_localctx = _tracker.createInstance<TypeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, USEParser::RuleTypeExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(858);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__44: {
        _localctx = _tracker.createInstance<USEParser::OclAsTypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(833);
        match(USEParser::T__44);
        setState(834);
        match(USEParser::LPAREN);
        setState(835);
        type();
        setState(836);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__45: {
        _localctx = _tracker.createInstance<USEParser::OclIsKindOfExprContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(838);
        match(USEParser::T__45);
        setState(839);
        match(USEParser::LPAREN);
        setState(840);
        type();
        setState(841);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__46: {
        _localctx = _tracker.createInstance<USEParser::OclIsTypeOfExprContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(843);
        match(USEParser::T__46);
        setState(844);
        match(USEParser::LPAREN);
        setState(845);
        type();
        setState(846);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__47: {
        _localctx = _tracker.createInstance<USEParser::SelectByTypeExprContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(848);
        match(USEParser::T__47);
        setState(849);
        match(USEParser::LPAREN);
        setState(850);
        type();
        setState(851);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__48: {
        _localctx = _tracker.createInstance<USEParser::SelectByKindExprContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(853);
        match(USEParser::T__48);
        setState(854);
        match(USEParser::LPAREN);
        setState(855);
        type();
        setState(856);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemVarsDeclarationContext ------------------------------------------------------------------

USEParser::ElemVarsDeclarationContext::ElemVarsDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::COLON() {
  return getTokens(USEParser::COLON);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::COLON(size_t i) {
  return getToken(USEParser::COLON, i);
}

std::vector<USEParser::TypeContext *> USEParser::ElemVarsDeclarationContext::type() {
  return getRuleContexts<USEParser::TypeContext>();
}

USEParser::TypeContext* USEParser::ElemVarsDeclarationContext::type(size_t i) {
  return getRuleContext<USEParser::TypeContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::ElemVarsDeclarationContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::ElemVarsDeclarationContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::ElemVarsDeclarationContext::getRuleIndex() const {
  return USEParser::RuleElemVarsDeclaration;
}


std::any USEParser::ElemVarsDeclarationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitElemVarsDeclaration(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ElemVarsDeclarationContext* USEParser::elemVarsDeclaration() {
  ElemVarsDeclarationContext *_localctx = _tracker.createInstance<ElemVarsDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 90, USEParser::RuleElemVarsDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(860);
    match(USEParser::ID);
    setState(863);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::COLON) {
      setState(861);
      match(USEParser::COLON);
      setState(862);
      type();
    }
    setState(873);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(865);
      match(USEParser::COMMA);
      setState(866);
      match(USEParser::ID);
      setState(869);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == USEParser::COLON) {
        setState(867);
        match(USEParser::COLON);
        setState(868);
        type();
      }
      setState(875);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VariableInitializationContext ------------------------------------------------------------------

USEParser::VariableInitializationContext::VariableInitializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::VariableInitializationContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::VariableInitializationContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::VariableInitializationContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::VariableInitializationContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::VariableInitializationContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}


size_t USEParser::VariableInitializationContext::getRuleIndex() const {
  return USEParser::RuleVariableInitialization;
}


std::any USEParser::VariableInitializationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitVariableInitialization(this);
  else
    return visitor->visitChildren(this);
}

USEParser::VariableInitializationContext* USEParser::variableInitialization() {
  VariableInitializationContext *_localctx = _tracker.createInstance<VariableInitializationContext>(_ctx, getState());
  enterRule(_localctx, 92, USEParser::RuleVariableInitialization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(876);
    match(USEParser::ID);
    setState(877);
    match(USEParser::COLON);
    setState(878);
    type();
    setState(879);
    match(USEParser::EQUAL);
    setState(880);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

USEParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::ExpressionContext *> USEParser::ConditionalExpressionContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::ConditionalExpressionContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}


size_t USEParser::ConditionalExpressionContext::getRuleIndex() const {
  return USEParser::RuleConditionalExpression;
}


std::any USEParser::ConditionalExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitConditionalExpression(this);
  else
    return visitor->visitChildren(this);
}

USEParser::ConditionalExpressionContext* USEParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 94, USEParser::RuleConditionalExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(882);
    match(USEParser::T__49);
    setState(883);
    expression();
    setState(884);
    match(USEParser::T__50);
    setState(885);
    expression();
    setState(886);
    match(USEParser::T__51);
    setState(887);
    expression();
    setState(888);
    match(USEParser::T__52);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

USEParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::LiteralContext::getRuleIndex() const {
  return USEParser::RuleLiteral;
}

void USEParser::LiteralContext::copyFrom(LiteralContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LiteralIntegerContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralIntegerContext::INT() {
  return getToken(USEParser::INT, 0);
}

USEParser::LiteralIntegerContext::LiteralIntegerContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralIntegerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralInteger(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralEmptyCollectionContext ------------------------------------------------------------------

USEParser::EmptyCollectionLiteralContext* USEParser::LiteralEmptyCollectionContext::emptyCollectionLiteral() {
  return getRuleContext<USEParser::EmptyCollectionLiteralContext>(0);
}

USEParser::LiteralEmptyCollectionContext::LiteralEmptyCollectionContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralEmptyCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralEmptyCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralStringContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralStringContext::STRING() {
  return getToken(USEParser::STRING, 0);
}

USEParser::LiteralStringContext::LiteralStringContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralString(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralUnlimitedNaturalContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralUnlimitedNaturalContext::STAR() {
  return getToken(USEParser::STAR, 0);
}

USEParser::LiteralUnlimitedNaturalContext::LiteralUnlimitedNaturalContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralUnlimitedNaturalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralUnlimitedNatural(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralCollectionContext ------------------------------------------------------------------

USEParser::CollectionLiteralContext* USEParser::LiteralCollectionContext::collectionLiteral() {
  return getRuleContext<USEParser::CollectionLiteralContext>(0);
}

USEParser::LiteralCollectionContext::LiteralCollectionContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralBooleanFalseContext ------------------------------------------------------------------

USEParser::LiteralBooleanFalseContext::LiteralBooleanFalseContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralBooleanFalseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralBooleanFalse(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralEnumContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralEnumContext::HASH() {
  return getToken(USEParser::HASH, 0);
}

tree::TerminalNode* USEParser::LiteralEnumContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::LiteralEnumContext::LiteralEnumContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralQualifiedEnumContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> USEParser::LiteralQualifiedEnumContext::ID() {
  return getTokens(USEParser::ID);
}

tree::TerminalNode* USEParser::LiteralQualifiedEnumContext::ID(size_t i) {
  return getToken(USEParser::ID, i);
}

tree::TerminalNode* USEParser::LiteralQualifiedEnumContext::COLON_COLON() {
  return getToken(USEParser::COLON_COLON, 0);
}

USEParser::LiteralQualifiedEnumContext::LiteralQualifiedEnumContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralQualifiedEnumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralQualifiedEnum(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralUndefinedContext ------------------------------------------------------------------

USEParser::UndefinedLiteralContext* USEParser::LiteralUndefinedContext::undefinedLiteral() {
  return getRuleContext<USEParser::UndefinedLiteralContext>(0);
}

USEParser::LiteralUndefinedContext::LiteralUndefinedContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralUndefinedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralUndefined(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralTupleContext ------------------------------------------------------------------

USEParser::TupleLiteralContext* USEParser::LiteralTupleContext::tupleLiteral() {
  return getRuleContext<USEParser::TupleLiteralContext>(0);
}

USEParser::LiteralTupleContext::LiteralTupleContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralBooleanTrueContext ------------------------------------------------------------------

USEParser::LiteralBooleanTrueContext::LiteralBooleanTrueContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralBooleanTrueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralBooleanTrue(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LiteralRealContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::LiteralRealContext::REAL() {
  return getToken(USEParser::REAL, 0);
}

USEParser::LiteralRealContext::LiteralRealContext(LiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::LiteralRealContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitLiteralReal(this);
  else
    return visitor->visitChildren(this);
}
USEParser::LiteralContext* USEParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 96, USEParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(905);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::LiteralBooleanTrueContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(890);
      match(USEParser::T__53);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::LiteralBooleanFalseContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(891);
      match(USEParser::T__54);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<USEParser::LiteralIntegerContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(892);
      match(USEParser::INT);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<USEParser::LiteralRealContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(893);
      match(USEParser::REAL);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<USEParser::LiteralStringContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(894);
      match(USEParser::STRING);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<USEParser::LiteralEnumContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(895);
      match(USEParser::HASH);
      setState(896);
      match(USEParser::ID);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<USEParser::LiteralQualifiedEnumContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(897);
      match(USEParser::ID);
      setState(898);
      match(USEParser::COLON_COLON);
      setState(899);
      match(USEParser::ID);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<USEParser::LiteralCollectionContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(900);
      collectionLiteral();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<USEParser::LiteralEmptyCollectionContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(901);
      emptyCollectionLiteral();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<USEParser::LiteralUndefinedContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(902);
      undefinedLiteral();
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<USEParser::LiteralTupleContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(903);
      tupleLiteral();
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<USEParser::LiteralUnlimitedNaturalContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(904);
      match(USEParser::STAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionLiteralContext ------------------------------------------------------------------

USEParser::CollectionLiteralContext::CollectionLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::CollectionLiteralContext::getRuleIndex() const {
  return USEParser::RuleCollectionLiteral;
}

void USEParser::CollectionLiteralContext::copyFrom(CollectionLiteralContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- OrderedSetLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::OrderedSetLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::OrderedSetLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::OrderedSetLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::OrderedSetLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::OrderedSetLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::OrderedSetLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::OrderedSetLiteralContext::OrderedSetLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::OrderedSetLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitOrderedSetLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SequenceLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SequenceLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::SequenceLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::SequenceLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::SequenceLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::SequenceLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::SequenceLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::SequenceLiteralContext::SequenceLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::SequenceLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSequenceLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BagLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::BagLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::BagLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::BagLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::BagLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::BagLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::BagLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::BagLiteralContext::BagLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::BagLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitBagLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetLiteralContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::SetLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::SetLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<USEParser::CollectionItemContext *> USEParser::SetLiteralContext::collectionItem() {
  return getRuleContexts<USEParser::CollectionItemContext>();
}

USEParser::CollectionItemContext* USEParser::SetLiteralContext::collectionItem(size_t i) {
  return getRuleContext<USEParser::CollectionItemContext>(i);
}

std::vector<tree::TerminalNode *> USEParser::SetLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::SetLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}

USEParser::SetLiteralContext::SetLiteralContext(CollectionLiteralContext *ctx) { copyFrom(ctx); }


std::any USEParser::SetLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSetLiteral(this);
  else
    return visitor->visitChildren(this);
}
USEParser::CollectionLiteralContext* USEParser::collectionLiteral() {
  CollectionLiteralContext *_localctx = _tracker.createInstance<CollectionLiteralContext>(_ctx, getState());
  enterRule(_localctx, 98, USEParser::RuleCollectionLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(959);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__55: {
        _localctx = _tracker.createInstance<USEParser::SetLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(907);
        match(USEParser::T__55);
        setState(908);
        match(USEParser::LBRACE);
        setState(917);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -15762658783395840) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 94575550005763) != 0)) {
          setState(909);
          collectionItem();
          setState(914);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(910);
            match(USEParser::COMMA);
            setState(911);
            collectionItem();
            setState(916);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(919);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__56: {
        _localctx = _tracker.createInstance<USEParser::SequenceLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(920);
        match(USEParser::T__56);
        setState(921);
        match(USEParser::LBRACE);
        setState(930);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -15762658783395840) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 94575550005763) != 0)) {
          setState(922);
          collectionItem();
          setState(927);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(923);
            match(USEParser::COMMA);
            setState(924);
            collectionItem();
            setState(929);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(932);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__57: {
        _localctx = _tracker.createInstance<USEParser::BagLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(933);
        match(USEParser::T__57);
        setState(934);
        match(USEParser::LBRACE);
        setState(943);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -15762658783395840) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 94575550005763) != 0)) {
          setState(935);
          collectionItem();
          setState(940);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(936);
            match(USEParser::COMMA);
            setState(937);
            collectionItem();
            setState(942);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(945);
        match(USEParser::RBRACE);
        break;
      }

      case USEParser::T__58: {
        _localctx = _tracker.createInstance<USEParser::OrderedSetLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(946);
        match(USEParser::T__58);
        setState(947);
        match(USEParser::LBRACE);
        setState(956);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -15762658783395840) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 94575550005763) != 0)) {
          setState(948);
          collectionItem();
          setState(953);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == USEParser::COMMA) {
            setState(949);
            match(USEParser::COMMA);
            setState(950);
            collectionItem();
            setState(955);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(958);
        match(USEParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionItemContext ------------------------------------------------------------------

USEParser::CollectionItemContext::CollectionItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<USEParser::ExpressionContext *> USEParser::CollectionItemContext::expression() {
  return getRuleContexts<USEParser::ExpressionContext>();
}

USEParser::ExpressionContext* USEParser::CollectionItemContext::expression(size_t i) {
  return getRuleContext<USEParser::ExpressionContext>(i);
}

tree::TerminalNode* USEParser::CollectionItemContext::DOTDOT() {
  return getToken(USEParser::DOTDOT, 0);
}


size_t USEParser::CollectionItemContext::getRuleIndex() const {
  return USEParser::RuleCollectionItem;
}


std::any USEParser::CollectionItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitCollectionItem(this);
  else
    return visitor->visitChildren(this);
}

USEParser::CollectionItemContext* USEParser::collectionItem() {
  CollectionItemContext *_localctx = _tracker.createInstance<CollectionItemContext>(_ctx, getState());
  enterRule(_localctx, 100, USEParser::RuleCollectionItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(961);
    expression();
    setState(964);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == USEParser::DOTDOT) {
      setState(962);
      match(USEParser::DOTDOT);
      setState(963);
      expression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyCollectionLiteralContext ------------------------------------------------------------------

USEParser::EmptyCollectionLiteralContext::EmptyCollectionLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::CollectionTypeContext* USEParser::EmptyCollectionLiteralContext::collectionType() {
  return getRuleContext<USEParser::CollectionTypeContext>(0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

tree::TerminalNode* USEParser::EmptyCollectionLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}


size_t USEParser::EmptyCollectionLiteralContext::getRuleIndex() const {
  return USEParser::RuleEmptyCollectionLiteral;
}


std::any USEParser::EmptyCollectionLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitEmptyCollectionLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::EmptyCollectionLiteralContext* USEParser::emptyCollectionLiteral() {
  EmptyCollectionLiteralContext *_localctx = _tracker.createInstance<EmptyCollectionLiteralContext>(_ctx, getState());
  enterRule(_localctx, 102, USEParser::RuleEmptyCollectionLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(975);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__59: {
        enterOuterAlt(_localctx, 1);
        setState(966);
        match(USEParser::T__59);
        setState(967);
        match(USEParser::LPAREN);
        setState(968);
        collectionType();
        setState(969);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__55:
      case USEParser::T__56:
      case USEParser::T__57:
      case USEParser::T__58:
      case USEParser::T__64: {
        enterOuterAlt(_localctx, 2);
        setState(971);
        collectionType();
        setState(972);
        match(USEParser::LBRACE);
        setState(973);
        match(USEParser::RBRACE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UndefinedLiteralContext ------------------------------------------------------------------

USEParser::UndefinedLiteralContext::UndefinedLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::UndefinedLiteralContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::UndefinedLiteralContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::UndefinedLiteralContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}


size_t USEParser::UndefinedLiteralContext::getRuleIndex() const {
  return USEParser::RuleUndefinedLiteral;
}


std::any USEParser::UndefinedLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUndefinedLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::UndefinedLiteralContext* USEParser::undefinedLiteral() {
  UndefinedLiteralContext *_localctx = _tracker.createInstance<UndefinedLiteralContext>(_ctx, getState());
  enterRule(_localctx, 104, USEParser::RuleUndefinedLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(989);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(977);
      match(USEParser::T__60);
      setState(978);
      match(USEParser::LPAREN);
      setState(979);
      type();
      setState(980);
      match(USEParser::RPAREN);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(982);
      match(USEParser::T__61);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(983);
      match(USEParser::T__62);
      setState(984);
      match(USEParser::LPAREN);
      setState(985);
      type();
      setState(986);
      match(USEParser::RPAREN);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(988);
      match(USEParser::T__62);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleLiteralContext ------------------------------------------------------------------

USEParser::TupleLiteralContext::TupleLiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TupleLiteralContext::LBRACE() {
  return getToken(USEParser::LBRACE, 0);
}

std::vector<USEParser::TupleItemContext *> USEParser::TupleLiteralContext::tupleItem() {
  return getRuleContexts<USEParser::TupleItemContext>();
}

USEParser::TupleItemContext* USEParser::TupleLiteralContext::tupleItem(size_t i) {
  return getRuleContext<USEParser::TupleItemContext>(i);
}

tree::TerminalNode* USEParser::TupleLiteralContext::RBRACE() {
  return getToken(USEParser::RBRACE, 0);
}

std::vector<tree::TerminalNode *> USEParser::TupleLiteralContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::TupleLiteralContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::TupleLiteralContext::getRuleIndex() const {
  return USEParser::RuleTupleLiteral;
}


std::any USEParser::TupleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTupleLiteral(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TupleLiteralContext* USEParser::tupleLiteral() {
  TupleLiteralContext *_localctx = _tracker.createInstance<TupleLiteralContext>(_ctx, getState());
  enterRule(_localctx, 106, USEParser::RuleTupleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(991);
    match(USEParser::T__63);
    setState(992);
    match(USEParser::LBRACE);
    setState(993);
    tupleItem();
    setState(998);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(994);
      match(USEParser::COMMA);
      setState(995);
      tupleItem();
      setState(1000);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1001);
    match(USEParser::RBRACE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleItemContext ------------------------------------------------------------------

USEParser::TupleItemContext::TupleItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TupleItemContext::getRuleIndex() const {
  return USEParser::RuleTupleItem;
}

void USEParser::TupleItemContext::copyFrom(TupleItemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- UntypedTupleItemContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::UntypedTupleItemContext::ID() {
  return getToken(USEParser::ID, 0);
}

USEParser::ExpressionContext* USEParser::UntypedTupleItemContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

tree::TerminalNode* USEParser::UntypedTupleItemContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

tree::TerminalNode* USEParser::UntypedTupleItemContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::UntypedTupleItemContext::UntypedTupleItemContext(TupleItemContext *ctx) { copyFrom(ctx); }


std::any USEParser::UntypedTupleItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitUntypedTupleItem(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypedTupleItemContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypedTupleItemContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::TypedTupleItemContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::TypedTupleItemContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypedTupleItemContext::EQUAL() {
  return getToken(USEParser::EQUAL, 0);
}

USEParser::ExpressionContext* USEParser::TypedTupleItemContext::expression() {
  return getRuleContext<USEParser::ExpressionContext>(0);
}

USEParser::TypedTupleItemContext::TypedTupleItemContext(TupleItemContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypedTupleItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypedTupleItem(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TupleItemContext* USEParser::tupleItem() {
  TupleItemContext *_localctx = _tracker.createInstance<TupleItemContext>(_ctx, getState());
  enterRule(_localctx, 108, USEParser::RuleTupleItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1012);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<USEParser::TypedTupleItemContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1003);
      match(USEParser::ID);
      setState(1004);
      match(USEParser::COLON);
      setState(1005);
      type();
      setState(1006);
      match(USEParser::EQUAL);
      setState(1007);
      expression();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<USEParser::UntypedTupleItemContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1009);
      match(USEParser::ID);
      setState(1010);
      _la = _input->LA(1);
      if (!(_la == USEParser::COLON

      || _la == USEParser::EQUAL)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1011);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

USEParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::TypeContext::getRuleIndex() const {
  return USEParser::RuleType;
}

void USEParser::TypeContext::copyFrom(TypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeTupleContext ------------------------------------------------------------------

USEParser::TupleTypeContext* USEParser::TypeTupleContext::tupleType() {
  return getRuleContext<USEParser::TupleTypeContext>(0);
}

USEParser::TypeTupleContext::TypeTupleContext(TypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeTupleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeTuple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeCollectionContext ------------------------------------------------------------------

USEParser::CollectionTypeContext* USEParser::TypeCollectionContext::collectionType() {
  return getRuleContext<USEParser::CollectionTypeContext>(0);
}

USEParser::TypeCollectionContext::TypeCollectionContext(TypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSimpleContext ------------------------------------------------------------------

USEParser::SimpleTypeContext* USEParser::TypeSimpleContext::simpleType() {
  return getRuleContext<USEParser::SimpleTypeContext>(0);
}

USEParser::TypeSimpleContext::TypeSimpleContext(TypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeSimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSimple(this);
  else
    return visitor->visitChildren(this);
}
USEParser::TypeContext* USEParser::type() {
  TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, getState());
  enterRule(_localctx, 110, USEParser::RuleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1017);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::ID: {
        _localctx = _tracker.createInstance<USEParser::TypeSimpleContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1014);
        simpleType();
        break;
      }

      case USEParser::T__55:
      case USEParser::T__56:
      case USEParser::T__57:
      case USEParser::T__58:
      case USEParser::T__64: {
        _localctx = _tracker.createInstance<USEParser::TypeCollectionContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1015);
        collectionType();
        break;
      }

      case USEParser::T__63: {
        _localctx = _tracker.createInstance<USEParser::TypeTupleContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1016);
        tupleType();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeOnlyContext ------------------------------------------------------------------

USEParser::TypeOnlyContext::TypeOnlyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

USEParser::TypeContext* USEParser::TypeOnlyContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeOnlyContext::EOF() {
  return getToken(USEParser::EOF, 0);
}


size_t USEParser::TypeOnlyContext::getRuleIndex() const {
  return USEParser::RuleTypeOnly;
}


std::any USEParser::TypeOnlyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeOnly(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TypeOnlyContext* USEParser::typeOnly() {
  TypeOnlyContext *_localctx = _tracker.createInstance<TypeOnlyContext>(_ctx, getState());
  enterRule(_localctx, 112, USEParser::RuleTypeOnly);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1019);
    type();
    setState(1020);
    match(USEParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeContext ------------------------------------------------------------------

USEParser::SimpleTypeContext::SimpleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::SimpleTypeContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::SimpleTypeContext::getRuleIndex() const {
  return USEParser::RuleSimpleType;
}


std::any USEParser::SimpleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSimpleType(this);
  else
    return visitor->visitChildren(this);
}

USEParser::SimpleTypeContext* USEParser::simpleType() {
  SimpleTypeContext *_localctx = _tracker.createInstance<SimpleTypeContext>(_ctx, getState());
  enterRule(_localctx, 114, USEParser::RuleSimpleType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1022);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CollectionTypeContext ------------------------------------------------------------------

USEParser::CollectionTypeContext::CollectionTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t USEParser::CollectionTypeContext::getRuleIndex() const {
  return USEParser::RuleCollectionType;
}

void USEParser::CollectionTypeContext::copyFrom(CollectionTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TypeBagContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeBagContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeBagContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeBagContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeBagContext::TypeBagContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeBagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeBag(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSimpleCollectionContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSimpleCollectionContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSimpleCollectionContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSimpleCollectionContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSimpleCollectionContext::TypeSimpleCollectionContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeSimpleCollectionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSimpleCollection(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeOrderedSetContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeOrderedSetContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeOrderedSetContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeOrderedSetContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeOrderedSetContext::TypeOrderedSetContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeOrderedSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeOrderedSet(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSequenceContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSequenceContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSequenceContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSequenceContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSequenceContext::TypeSequenceContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeSequenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSequence(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeSetContext ------------------------------------------------------------------

tree::TerminalNode* USEParser::TypeSetContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

USEParser::TypeContext* USEParser::TypeSetContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}

tree::TerminalNode* USEParser::TypeSetContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

USEParser::TypeSetContext::TypeSetContext(CollectionTypeContext *ctx) { copyFrom(ctx); }


std::any USEParser::TypeSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTypeSet(this);
  else
    return visitor->visitChildren(this);
}
USEParser::CollectionTypeContext* USEParser::collectionType() {
  CollectionTypeContext *_localctx = _tracker.createInstance<CollectionTypeContext>(_ctx, getState());
  enterRule(_localctx, 116, USEParser::RuleCollectionType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1049);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case USEParser::T__64: {
        _localctx = _tracker.createInstance<USEParser::TypeSimpleCollectionContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1024);
        match(USEParser::T__64);
        setState(1025);
        match(USEParser::LPAREN);
        setState(1026);
        type();
        setState(1027);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__55: {
        _localctx = _tracker.createInstance<USEParser::TypeSetContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1029);
        match(USEParser::T__55);
        setState(1030);
        match(USEParser::LPAREN);
        setState(1031);
        type();
        setState(1032);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__56: {
        _localctx = _tracker.createInstance<USEParser::TypeSequenceContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1034);
        match(USEParser::T__56);
        setState(1035);
        match(USEParser::LPAREN);
        setState(1036);
        type();
        setState(1037);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__57: {
        _localctx = _tracker.createInstance<USEParser::TypeBagContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1039);
        match(USEParser::T__57);
        setState(1040);
        match(USEParser::LPAREN);
        setState(1041);
        type();
        setState(1042);
        match(USEParser::RPAREN);
        break;
      }

      case USEParser::T__58: {
        _localctx = _tracker.createInstance<USEParser::TypeOrderedSetContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1044);
        match(USEParser::T__58);
        setState(1045);
        match(USEParser::LPAREN);
        setState(1046);
        type();
        setState(1047);
        match(USEParser::RPAREN);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TupleTypeContext ------------------------------------------------------------------

USEParser::TupleTypeContext::TupleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TupleTypeContext::LPAREN() {
  return getToken(USEParser::LPAREN, 0);
}

std::vector<USEParser::TuplePartContext *> USEParser::TupleTypeContext::tuplePart() {
  return getRuleContexts<USEParser::TuplePartContext>();
}

USEParser::TuplePartContext* USEParser::TupleTypeContext::tuplePart(size_t i) {
  return getRuleContext<USEParser::TuplePartContext>(i);
}

tree::TerminalNode* USEParser::TupleTypeContext::RPAREN() {
  return getToken(USEParser::RPAREN, 0);
}

std::vector<tree::TerminalNode *> USEParser::TupleTypeContext::COMMA() {
  return getTokens(USEParser::COMMA);
}

tree::TerminalNode* USEParser::TupleTypeContext::COMMA(size_t i) {
  return getToken(USEParser::COMMA, i);
}


size_t USEParser::TupleTypeContext::getRuleIndex() const {
  return USEParser::RuleTupleType;
}


std::any USEParser::TupleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTupleType(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TupleTypeContext* USEParser::tupleType() {
  TupleTypeContext *_localctx = _tracker.createInstance<TupleTypeContext>(_ctx, getState());
  enterRule(_localctx, 118, USEParser::RuleTupleType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1051);
    match(USEParser::T__63);
    setState(1052);
    match(USEParser::LPAREN);
    setState(1053);
    tuplePart();
    setState(1058);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == USEParser::COMMA) {
      setState(1054);
      match(USEParser::COMMA);
      setState(1055);
      tuplePart();
      setState(1060);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1061);
    match(USEParser::RPAREN);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TuplePartContext ------------------------------------------------------------------

USEParser::TuplePartContext::TuplePartContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::TuplePartContext::ID() {
  return getToken(USEParser::ID, 0);
}

tree::TerminalNode* USEParser::TuplePartContext::COLON() {
  return getToken(USEParser::COLON, 0);
}

USEParser::TypeContext* USEParser::TuplePartContext::type() {
  return getRuleContext<USEParser::TypeContext>(0);
}


size_t USEParser::TuplePartContext::getRuleIndex() const {
  return USEParser::RuleTuplePart;
}


std::any USEParser::TuplePartContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitTuplePart(this);
  else
    return visitor->visitChildren(this);
}

USEParser::TuplePartContext* USEParser::tuplePart() {
  TuplePartContext *_localctx = _tracker.createInstance<TuplePartContext>(_ctx, getState());
  enterRule(_localctx, 120, USEParser::RuleTuplePart);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1063);
    match(USEParser::ID);
    setState(1064);
    match(USEParser::COLON);
    setState(1065);
    type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RoleContext ------------------------------------------------------------------

USEParser::RoleContext::RoleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::RoleContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::RoleContext::getRuleIndex() const {
  return USEParser::RuleRole;
}


std::any USEParser::RoleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRole(this);
  else
    return visitor->visitChildren(this);
}

USEParser::RoleContext* USEParser::role() {
  RoleContext *_localctx = _tracker.createInstance<RoleContext>(_ctx, getState());
  enterRule(_localctx, 122, USEParser::RuleRole);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1067);
    match(USEParser::T__65);
    setState(1068);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RedefinesContext ------------------------------------------------------------------

USEParser::RedefinesContext::RedefinesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::RedefinesContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::RedefinesContext::getRuleIndex() const {
  return USEParser::RuleRedefines;
}


std::any USEParser::RedefinesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitRedefines(this);
  else
    return visitor->visitChildren(this);
}

USEParser::RedefinesContext* USEParser::redefines() {
  RedefinesContext *_localctx = _tracker.createInstance<RedefinesContext>(_ctx, getState());
  enterRule(_localctx, 124, USEParser::RuleRedefines);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1070);
    match(USEParser::T__66);
    setState(1071);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SubsetsContext ------------------------------------------------------------------

USEParser::SubsetsContext::SubsetsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* USEParser::SubsetsContext::ID() {
  return getToken(USEParser::ID, 0);
}


size_t USEParser::SubsetsContext::getRuleIndex() const {
  return USEParser::RuleSubsets;
}


std::any USEParser::SubsetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<USEVisitor*>(visitor))
    return parserVisitor->visitSubsets(this);
  else
    return visitor->visitChildren(this);
}

USEParser::SubsetsContext* USEParser::subsets() {
  SubsetsContext *_localctx = _tracker.createInstance<SubsetsContext>(_ctx, getState());
  enterRule(_localctx, 126, USEParser::RuleSubsets);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1073);
    match(USEParser::T__67);
    setState(1074);
    match(USEParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool USEParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 27: return logicalExpressionSempred(antlrcpp::downCast<LogicalExpressionContext *>(context), predicateIndex);
    case 31: return equalityExpressionSempred(antlrcpp::downCast<EqualityExpressionContext *>(context), predicateIndex);
    case 32: return relationalExpressionSempred(antlrcpp::downCast<RelationalExpressionContext *>(context), predicateIndex);
    case 33: return additiveExpressionSempred(antlrcpp::downCast<AdditiveExpressionContext *>(context), predicateIndex);
    case 34: return factorExpressionSempred(antlrcpp::downCast<FactorExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool USEParser::logicalExpressionSempred(LogicalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 7);
    case 1: return precpred(_ctx, 6);
    case 2: return precpred(_ctx, 5);
    case 3: return precpred(_ctx, 4);
    case 4: return precpred(_ctx, 3);
    case 5: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool USEParser::equalityExpressionSempred(EqualityExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 2);
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::relationalExpressionSempred(RelationalExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return precpred(_ctx, 4);
    case 9: return precpred(_ctx, 3);
    case 10: return precpred(_ctx, 2);
    case 11: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::additiveExpressionSempred(AdditiveExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 2);
    case 13: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool USEParser::factorExpressionSempred(FactorExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 14: return precpred(_ctx, 2);
    case 15: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void USEParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  useParserInitialize();
#else
  ::antlr4::internal::call_once(useParserOnceFlag, useParserInitialize);
#endif
}
