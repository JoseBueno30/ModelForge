model BankAccount

enum AccountType {Investments, Savings}

abstract class SuperAccount
end

class Account < SuperAccount
attributes
balance : Integer --+
test : Person --+
type : AccountType --+
operations
transfer(variable : Integer) : Integer --#
	begin
        self.balance := self.balance + 1;
    end
	pre BalancePositive: self.balance > 0
	post ResultGreaterThanStart: result > self.balance@pre
constraints
inv Positive_Balance:
	self.balance > 0
inv Test:
	(self.balance > 1) or (true and true) or self.type = AccountType::Savings
inv Test2:
	true
inv Test3:
	true and (true or true)
end

class Bank
attributes
test : Set(Integer) --+
end

class Person
attributes
age : Integer --â€”
name : String --+
constraints
inv TestConstraint1:
	self.employee.salary > 0
end

composition BankAccounts between
Account [*] role accounts --+
Bank [1] role bank --+
end

association Ownership between
Account [*] role accounts --+
Person [1, 3..4] role owner --+
end

association Use between
Account [*] role usedAccounts --+
Person [*] role users --+
end

associationclass Employee between
Bank [0..1] role bank --+
Person [*] role employees --+
attributes
	salary: Integer
end

